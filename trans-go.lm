include 'trans.lm'

namespace go
	lex 
		literal '%%{', '}%%'

		literal 'int', 'bool', 'const', 'char', 'ptr',
				'var', 'fmt.Print', 'byte'

		literal ';', '<', '>', '(', ')', '[', ']', '=', '*', '!'

		ignore / ( [ \t] | NL )+ /

		token tk_ident /ident/
		token tk_number /digit+/
		token tk_hex_number /'0x' [0-9a-fA-F]+/

		token string
			/ s_literal | d_literal /

		token indep_any / any /
	end

	def tok
		[tk_ident]
	|	[tk_ident '[' tok ']']
	|	[tk_number]
	|	[tk_hex_number]
	|	[string]
	|	['<' type '>' '(' tok* ')']
	|	['(' type ')' '(' tok* ')']
	|	['(' tok* ')']
	|	['fmt.Print' '(' tok* ')' ';']
	|	[';']
	|	['<']
	|	['>']
	|	['[']
	|	[']']
	|	['=']
	|	['!']
	|	['*']
	|	[indep_any]

	def opt_arr
		['[' tok ']']
	|	[]

	def type
		['int']
	|	['bool']
	|	['char']
	|	['char' '*']
	|	['const' '(' 'char' ')' '*']
	|	['byte']

	def var_decl
		['var' tk_ident opt_arr type]
end


OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: start = parse start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

prints( Output
	"/*
	" * @LANG: go
	" * @GENERATED: yes
	" */
	"
	"package main
	"import \"fmt\"
	"
)

go::tok go_tok( Tok: tok )
{
	return cast<go::tok> Tok
}

go::tk_ident go_ident( Ident: tk_ident )
{
	return cast<go::tk_ident> Ident
}

go::opt_arr go_opt_arr( OptArr: opt_arr )
{
	return cast<go::opt_arr> OptArr
}

go::type go_type( Type: type )
{
	return cast<go::type> Type
}

go::tok* go_tok_list( TokList: tok* )
{
	return cast<go::tok*> TokList
}

int indepToHost( Indep: ref<section*> )
{
	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cast<var_decl> cons go::var_decl
				"var [go_ident(Ident)] [go_opt_arr(OptArr)] int
		}
		elsif match Decl
			"int [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cast<var_decl> cons go::var_decl
				"var [go_ident(Ident)] [go_opt_arr(OptArr)] int
		}
		elsif match Decl
			"char [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cast<var_decl> cons go::var_decl
				"var [go_ident(Ident)] [go_opt_arr(OptArr)] byte
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cast<var_decl> cons go::var_decl
				"var [go_ident(Ident)] int
		}
	}

	for Tok: tok in Indep {
		if match Tok "true" {
			Tok = cons tok "1"
		}
		elsif match Tok "false" {
			Tok = cons tok "0"
		}
		elsif match Tok ['<' Type: type '>' '(' TokList: tok* ')'] {
			Tok = cast<tok> cons go::tok
				"( [go_type(Type)] ) ( [go_tok_list(TokList)] )"
		}
		elsif match Tok ['printi' V: tok ';' ] {
			Tok = cast<tok> cons go::tok
				"fmt.Print( [go_tok(V)] );"
		}
		elsif match Tok ['printb' V: tok ';' ] {
			Tok = cast<tok> cons go::tok
				"fmt.Print( string ( [go_tok(V)]\[:pos\] ));"
		}
		elsif match Tok ['prints' V: tok ';' ] {
			Tok = cast<tok> cons go::tok
				"fmt.Print( [go_tok(V)] );"
		}
		elsif match Tok ['print_token' ';' ] {
			Tok = cast<tok> cons go::tok
				"fmt.Print( data\[ts:te\] );" 
		}
		elsif match Tok ['first_token_char'] {
			Tok = cast<tok> cons go::tok
				"data\[ts\]"
		}
	}
}

for Section: section in RagelTree {
	if match Section [Decl: var_decl] {
		cons SectionList: section* [Decl]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

for Section: section in RagelTree {
	if match Section [section_multiline] {
		for Action: ragel::action_block in Section {
			# Reparse as lang-independent code.
			parse SectionList: section*[$Action]

			# Translate to specific language.
			indepToHost( SectionList )

			# Reparse back to ragel action block.
			Action = parse ragel::action_block[$SectionList]
		}

		prints( Output '\n' Section '\n' )
	}
}

send Output
	"var cs int
	"
	"%% write data;
	"
	"func prepare() {

for Section: section in RagelTree {
	if match Section [ExprStmt: expr_stmt] {
		cons SectionList: section* [ExprStmt]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

send Output
	"	%% write init;
	"}
	"
	"func exec(data string) {
    "	var p int = 0
    "	var pe int = len(data)

if NeedsEof {
	send Output
		"	var eof int = pe
}

send Output
	"	%% write exec;
	"}
	"func finish() {
	"	if cs >= [MachineName.word]_first_final {
	"		fmt.Println(\"ACCEPT\")
	"	} else {
	"		fmt.Println(\"FAIL\")
	"	}
	"}

send Output
	~var inp []string = []string {

for InputString: input_string in RagelTree {
	send Output [^InputString ",\n"]
}

send Output
	"};
	"

send Output
	"func main() {
	"	for _, data := range inp {
	"		prepare()
	"		exec(data)
	"		finish()
	"	}
	"}

send Output "/* _____OUTPUT_____
for OutputLine: output_line in RagelTree {
	prints( Output OutputLine )
}
send Output "*/
