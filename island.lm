
lex function_body
{
	token func_chr /[^{}]+/
	token func_open /'{'/
	token func_close /'}'/
}

def func_item 
	[func_chr]
|	[func_open func_body func_close]

def func_body 
	[func_item*]

def func 
	[ident '(' ')' '{' func_body func_close ]

lex start
{
	token ident /[a-zA-Z_]+/
	token number /[0-9]+/

	rl s_string / "'" ([^'\\\n] | '\\' any )* "'" /
	rl d_string / '"' ([^"\\\n] | '\\' any )* '"' /
	token string /s_string | d_string/

	literal '+', '*', ';', '(', ')', '{', '}'

	ignore wp / [ \t\n]+ /
}

def class_item
	[func]
|	[class]
|	[ident ';']
|	[number ';']
|	[string ';']

def class_body 
	[class_item*]

def class 
	[ident '{' class_body '}' ]

def top_item 
	[func]
|	[class]

def start 
	[top_item*]

parse S: start[ stdin ]
print_xml( S.tree )
print( '\n' )

#pattern start
#	~class { func() { func() { 1+{2}} } } func() {{a}} 
