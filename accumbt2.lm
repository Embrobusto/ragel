context accum_bt
{
	lex
	{
		ignore /[ \t\n]+/
		token id1 /[a-zA-Z_][a-zA-Z_0-9]*/

		def one [ id1* ]
	}

	OneParser: accum<one>

	lex
	{
		ignore /[ \t]+/
		token id2 /[a-zA-Z_][a-zA-Z_0-9]*/
		literal '!', ';', '\n'

		def A1 []
			{ print( "A1\n" ) }

		def A2 []
			{ print( "A2\n" ) }

		def item2
			[id2]
			{
				send OneParser [' extra ']
				send OneParser [$r1]
			}

		def two 
			[A1 item2* '!' '\n']
		|	[A2 item2* ';' '\n']
	}
}

AccumBt: accum_bt = cons accum_bt[]
AccumBt.OneParser = cons parser<accum_bt::one>[]

parse TwoParser: accum_bt::two(AccumBt)[ stdin ]
Two: accum_bt::two = TwoParser.tree

send AccumBt.OneParser ['\n']

print( Two )
print( ^( AccumBt.OneParser.finish() ) '\n' )
