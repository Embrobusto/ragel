out_code::lines rw_asm_action_block( ActionBlock: indep::action_block ActionNum: int )
{
	Out = new parser<out_code::lines>
	if match ActionBlock [`{ stmt* `}] {
		send Out
			"{
			"	movq %r12, %rdi
			"	call action_[ActionNum]
			"}
	}
	else if match ActionBlock [`{ expr `}] {
		send Out
			"{
			"	movq %r12, %rdi
			"	call action_[ActionNum]
			"}
	}
	send Out [] eos
	return Out->tree
}

void rw_asm( Output: stream )
{
	send Output
		~
		~/*
		~ * The C component of the test case.
		~ */
		~
		~#include <string.h>
		~#include <stdio.h>
		~

	Init: indep::stmt* = RagelTree.Init
	for Stmt: indep::stmt in Init {
		if match Stmt [Decl: var_decl] {
			Out = new parser<out_code::lines>
			rw_c_var_decl( Decl )
			send Out [] eos

			send Output
				[Out->tree]
		}
	}

	send Output
		"void init()
		"{

	for Stmt: indep::stmt in Init {
		if match Stmt [ExprStmt: expr_stmt] {
			Out = new parser<out_code::lines>
			rw_c_expr_stmt( ExprStmt )
			send Out [] eos
			send Output [Out->tree]
		}
	}

	send Output
		"}

	ActionNum: int = 0
	Section: indep::section = RagelTree.section
	for Action: ragel::action_block in Section {
		# Reparse as lang-independent code.
		parse IndepActionBlock: indep::action_block[$Action]
		if ( !IndepActionBlock ) {
			print( error '\n' Action )
			exit(1)
		}

		Lines: out_code::lines =
				rw_c_action_block( IndepActionBlock )

		send Output	
			"void action_[ActionNum]( const char *p )
			"{
			"	char fc = *p;
			"[Lines]
			"}

		ActionNum = ActionNum + 1
	}
	
	send Output
		"#################### DRIVER SPLIT ####################
		"
		"#
		"# @LANG: asm
		"# @GENERATED: yes

	if ProhibitGenflags {
		send Output
			"# @PROHIBIT_GENFLAGS:[ProhibitGenflags]
	}

	send Output
		"#
		"

	ActionNum = 0
	Section = RagelTree.section
	for Action: ragel::action_block in Section {
		# Reparse as lang-independent code.
		parse IndepActionBlock: indep::action_block[$Action]
		if ( !IndepActionBlock ) {
			print( error '\n' Action )
			exit(1)
		}

		Lines: out_code::lines =
				rw_asm_action_block( IndepActionBlock ActionNum )

		# Reparse back to ragel action block.
		Action = parse ragel::action_block[Lines]
		if ( !Action ) {
			print( error '\n' )
			exit(1)
		}

		ActionNum = ActionNum + 1
	}

	send Output
		"
		"[Section]
		"
		"	.section .rodata
		"
		".L_str_accept:
		"	.string \"ACCEPT\"
		".L_str_fail:
		"	.string \"FAIL\"
		"
		"	%% write data;
		"
		"	.text
		"exec:
		"	pushq	%rbp
		"	movq	%rsp, %rbp
		"
		"	pushq	%r12
		"	pushq	%r13
		"	movq	%rdi, %r12

#	if NeedsEof {
#		send Output
#			"	char *eof = pe;
#	}

		"	# initialize the action data
		"	call	init
		"
		"	# Get the length.
		"	movq	%r12, %rdi
		"	call	strlen
		"	movq	%r12, %r13
		"	movslq	%eax, %rax
		"	addq	%rax, %r13

		"
		"	%% write init;
		"	%% write exec;
		"
		"	# current state is in r11.
		"	movq	[MachineName.word]_first_final(%rip), %rax
		"	cmpq	%rax, %r11
		"	jl		.L_exec_fail
		"	movq	$.L_str_accept, %rdi
		"	call	puts
		"	jmp		.L_exec_done
		".L_exec_fail:
		"	movq	$.L_str_fail, %rdi
		"	call	puts
		".L_exec_done:
		"	popq	%r13
		"	popq	%r12
		"	leave
		"	ret

	send Output
		"	.section	.rodata

	NR: int = 0
	for InputString: indep::input_string in RagelTree {
		send Output 
			".L_inp_[NR]:
			"	.string	[^InputString]
		NR = NR + 1
	}

	send Output
		"
		"	.align 8
		"inp:

	NR = 0
	for InputString: indep::input_string in RagelTree {
		send Output 
			"	.quad	.L_inp_[NR]
		NR = NR + 1
	}

	send Output
		"


	send Output
		"	.align 8
		"inplen:
		"	.quad [NR]
		"

	send Output
		"	.text
		"	.globl	main
		"main:
		"	pushq	%rbp
		"	movq	%rsp, %rbp
		"	pushq	%r12
		"	movq	$0, %r12
		".L_again:
		"	movq	inplen(%rip), %rax
		"	cmpq	%r12, %rax
		"	je		.L_done
		"	movq	inp(,%r12,8), %rdi
		"	call	exec
		"	incq	%r12
		"	jmp		.L_again
		".L_done:
		"	popq	%r12
		"	mov		$0, %rax
		"	leave
		"	ret

	send Output 
		"# _____OUTPUT_____

	for OutputLine: indep::output_line in RagelTree {
		send Output
			 [OutputLine]
	}

	send Output
		 "# _____OUTPUT_____
}
