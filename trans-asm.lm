int rw_asm_factor( Factor: indep::factor )
{
	if match Factor [`first_token_char]
	{
		send Out "ts\[0\]"
	}
	else if match Factor [tk_ident `[ expr `]]
	{
		send Out
			"[$Factor.tk_ident]\[ [rw_asm_expr(Factor.expr)] \]
	}
	else if match Factor [tk_ident `( expr `)]
	{
		send Out
			"[$Factor.tk_ident]( [rw_asm_expr(Factor.expr)] )
	}
	elsif match Factor [`< type `> `( expr `)]
	{
		send Out
			"( [rw_asm_type(Factor.type)] ) ( [rw_asm_expr(Factor.expr)] )
	}
	elsif match Factor [`( expr `)]
	{
		send Out
			"( [rw_asm_expr(Factor.expr)] )
	}
	elsif match Factor ['true']
	{
		send Out '1'
	}
	elsif match Factor ['false']
	{
		send Out '0'
	}
	else 
	{
		send Out [$Factor]
	}
}

void rw_asm_type( Type: indep::type )
{
	if match Type [`int]
	{
		send Out "int"
	}
	elsif match Type [`bool]
	{
		send Out "int"
	}
	elsif match Type [`char]
	{
		send Out "char"
	}
	elsif match Type [`ptr]
	{
		send Out "char *"
	}
	elsif match Type [`byte]
	{
		send Out "unsigned char"
	}
}

void rw_asm_expr( Expr: indep::expr )
{
	rw_asm_factor( Expr.factor )
	if ( Expr.op )
		send Out " [$Expr.op] [rw_asm_expr( Expr._expr )]"
}

void rw_asm_opt_array( OptArr: indep::opt_arr )
{
	if OptArr.expr {
		send Out "\[[rw_asm_expr( OptArr.expr )]\]"
	}
}

int rw_asm_var_decl( VarDecl: indep::var_decl )
{
	send Out
		"[rw_asm_type( VarDecl.type )] [$VarDecl.tk_ident] [rw_asm_opt_array(VarDecl.opt_arr)];
}

void rw_asm_opt_sub( OptSub: indep::opt_sub )
{
	if ( OptSub.expr )
		send Out "\[[rw_asm_expr(OptSub.expr)]\]"
}

int rw_asm_expr_stmt( ExprStmt: indep::expr_stmt )
{
	if match ExprStmt [tk_ident opt_sub `= expr `;]
	{
		send Out
			"[$ExprStmt.tk_ident rw_asm_opt_sub(ExprStmt.opt_sub)] = [rw_asm_expr(ExprStmt.expr)];
	}
	else if match ExprStmt [expr `;]
	{
		send Out
			"[rw_asm_expr(ExprStmt.expr)];
	}
}

int rw_asm_if_stmt( IfStmt: indep::if_stmt )
{
	send Out
		"if ( [rw_asm_expr( IfStmt.expr )] )
		"{
		"	[rw_asm_stmt_list( IfStmt._repeat_stmt )]
		"} 

	if ( IfStmt.opt_else._repeat_stmt ) {
		send Out
			"else {
			"	[rw_asm_stmt_list( IfStmt.opt_else._repeat_stmt )]
			"}
	}
}

int rw_asm_print_stmt( Stmt: indep::print_stmt )
{
	if match Stmt [`print_int expr `;] {
		send Out
			"printf( \"%d\", [rw_asm_expr(Stmt.expr)] );
	}
	else if match Stmt [`print_buf E1: expr `, E2: expr `;]
	{
		send Out
			"fwrite( [rw_asm_expr(E1)], 1, [rw_asm_expr(E2)], stdout );"
	}
	else if match Stmt [`print_str expr `;]
	{
		send Out
			"printf( \"%s\", [rw_asm_expr( Stmt.expr )] );
	}
	else if match Stmt [`print_token `;]
	{
		send Out
			"fwrite ( ts , 1 , te - ts , stdout );" 
	}
}

int rw_asm_ragel_stmt( Stmt: indep::ragel_stmt )
{
	send Out
		[$Stmt]
}

int rw_asm_stmt( Stmt: indep::stmt )
{
	if match Stmt [var_decl]
		rw_asm_var_decl( Stmt.var_decl )
	else if match Stmt [expr_stmt]
		rw_asm_expr_stmt( Stmt.expr_stmt )
	else if match Stmt [if_stmt]
		rw_asm_if_stmt( Stmt.if_stmt )
	else if match Stmt [print_stmt]
		rw_asm_print_stmt( Stmt.print_stmt )
	else if	match Stmt [ragel_stmt]
		rw_asm_ragel_stmt( Stmt.ragel_stmt )
}

void rw_asm_stmt_list( StmtList: indep::stmt* )
{
	for Stmt: indep::stmt in repeat( StmtList )
		rw_asm_stmt( Stmt )
}

int rw_asm_action_block( ActionBlock: indep::action_block )
{
#	Out = new parser<out_code::lines>
#	if match ActionBlock [`{ stmt* `}] {
#		send Out
#			"{[rw_asm_stmt_list( ActionBlock._repeat_stmt )]}
#	}
#	else if match ActionBlock [`{ expr `}] {
#		send Out
#			"{[rw_asm_expr( ActionBlock.expr )]}
#	}
#	send Out [] eos

	Out = new parser<out_code::lines>
	if match ActionBlock [`{ stmt* `}] {
		send Out
			"{}
	}
	else if match ActionBlock [`{ expr `}] {
		send Out
			"{}
	}
	send Out [] eos
}

void rw_asm( Output: stream )
{
	send Output
		"#
		"# @LANG: asm
		"# @GENERATED: yes

	if ProhibitGenflags {
		send Output
			"# @PROHIBIT_GENFLAGS:[ProhibitGenflags]
	}

	send Output
		"#
		"
#	Init: indep::stmt* = RagelTree.Init
#	for Stmt: indep::stmt in Init {
#		if match Stmt [Decl: var_decl] {
#			Out = new parser<out_code::lines>
#			rw_asm_var_decl( Decl )
#			send Out [] eos
#			send Output [Out->tree]
#		}
#	}

	Section: indep::section = RagelTree.section
	for Action: ragel::action_block in Section {
		# Reparse as lang-independent code.
		parse IndepActionBlock: indep::action_block[$Action]
		if ( !IndepActionBlock ) {
			print( error '\n' Action )
			exit(1)
		}

		rw_asm_action_block( IndepActionBlock )

		# Reparse back to ragel action block.
		Action = parse ragel::action_block[$Out->tree]
		if ( !Action ) {
			print( error '\n' )
			exit(1)
		}
	}

	send Output
		"
		"[Section]
		"
		"	.section .rodata
		"
		".L_str_accept:
		"	.string \"ACCEPT\"
		".L_str_fail:
		"	.string \"FAIL\"
		"
		"	%% write data;
		"
		"	.text
		"exec:
		"	pushq	%rbp
		"	movq	%rsp, %rbp
		"
		"	pushq	%r12
		"	pushq	%r13
		"	movq	%rdi, %r12

#	if NeedsEof {
#		send Output
#			"	char *eof = pe;
#	}

		"
		"	# Get the length.
		"	call	strlen
		"	movq	%r12, %r13
		"	movslq	%eax, %rax
		"	addq	%rax, %r13

#	for Stmt: indep::stmt in Init {
#		if match Stmt [ExprStmt: expr_stmt] {
#			Out = new parser<out_code::lines>
#			rw_asm_expr_stmt( ExprStmt )
#			send Out [] eos
#			send Output [Out->tree]
#		}
#	}
		"
		"	%% write init;
		"	%% write exec;
		"
		"	# current state is in r11.
		"	movq	[MachineName.word]_first_final(%rip), %rax
		"	cmpq	%rax, %r11
		"	jl		.L_exec_fail
		"	movq	$.L_str_accept, %rdi
		"	call	puts
		"	jmp		.L_exec_done
		".L_exec_fail:
		"	movq	$.L_str_fail, %rdi
		"	call	puts
		".L_exec_done:
		"	popq	%r13
		"	popq	%r12
		"	leave
		"	ret

	send Output
		"	.section	.rodata

	NR: int = 0
	for InputString: indep::input_string in RagelTree {
		send Output 
			".L_inp_[NR]:
			"	.string	[^InputString]
		NR = NR + 1
	}

	send Output
		"
		"	.align 8
		"inp:

	NR = 0
	for InputString: indep::input_string in RagelTree {
		send Output 
			"	.quad	.L_inp_[NR]
		NR = NR + 1
	}

	send Output
		"


	send Output
		"	.align 8
		"inplen:
		"	.quad [NR]
		"

	send Output
		"	.text
		"	.globl	main
		"main:
		"	pushq	%rbp
		"	movq	%rsp, %rbp
		"	pushq	%r12
		"	movq	$0, %r12
		".L_again:
		"	movq	inplen(%rip), %rax
		"	cmpq	%r12, %rax
		"	je		.L_done
		"	movq	inp(,%r12,8), %rdi
		"	call	exec
		"	incq	%r12
		"	jmp		.L_again
		".L_done:
		"	popq	%r12
		"	leave
		"	ret

	send Output 
		"# _____OUTPUT_____

	for OutputLine: indep::output_line in RagelTree {
		send Output
			 [OutputLine]
	}

	send Output
		 "# _____OUTPUT_____
}
