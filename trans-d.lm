include 'trans.lm'

namespace d
	lex 
		literal '%%{', '}%%'

		literal 'int', 'bool', 'const', 'char', 'ptr', 'printi',
				'printb', 'prints', 'print_token', 'printf',
				'fwrite', 'first_token_char', 'var', 'byte'

		literal ';', '<', '>', '(', ')', '[', ']', '=', '*', '!'

		ignore / ( [ \t] | NL )+ /

		token tk_ident /ident/
		token tk_number /digit+/
		token tk_hex_number /'0x' [0-9a-fA-F]+/

		token string
			/ s_literal | d_literal /

		token indep_any / any /
	end

	def tok
		[tk_ident]
	|	[tk_ident '[' tok ']']
	|	[tk_number]
	|	[tk_hex_number]
	|	[string]
	|	['<' type '>' '(' tok* ')']
	|	['(' type ')' '(' tok* ')']
	|	['(' tok* ')']
	|	['printf' '(' tok* ')' ';']
	|	['fwrite' '(' tok* ')' ';']
	|	[';']
	|	['<']
	|	['>']
	|	['[']
	|	[']']
	|	['=']
	|	['!']
	|	['*']
	|	[indep_any]
end


OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: start = parse start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

send Output
	"/*
	" * @LANG: d
	" * @GENERATED: yes
	" */
	"
	"import std.stdio;
	"import std.string;
	"
	"class [MachineName.word]
	"{

int indepToHost( Indep: ref<section*> )
{
	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cons var_decl
				"int [Ident OptArr];
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cons var_decl
				"const(char) * [Ident];
		}
	}

	for Tok: tok in Indep {
		if match Tok "true" {
			Tok = cons tok "1"
		}
		elsif match Tok "false" {
			Tok = cons tok "0"
		}
		elsif match Tok ['<' type '>' '(' TokList: tok* ')'] {
			Tok = cons tok ['(' TokList ')']
		}
		elsif match Tok ['printi' V: tok ';' ] {
			DV: d::tok = cast<d::tok> V
			Tok = cast<tok> cons d::tok[ "printf( \"%d\", [DV] );"]
		}
		elsif match Tok ['printb' V: tok ';' ] {
			DV: d::tok = cast<d::tok> V
			Tok = cast<tok> cons d::tok[ "printf( \"%.*s\", [DV]\[0..(pos)\] );"]
		}
		elsif match Tok ['prints' V: tok ';' ] {
			DV: d::tok = cast<d::tok> V
			Tok = cast<tok> cons d::tok[ "printf( \"%.*s\", [DV] );"]
		}
		elsif match Tok ['print_token' ';' ] {
			Tok = cast<tok> cons d::tok[ "printf( \"%.*s\", ts\[0..(te - ts)\] );"]
		}
		elsif match Tok ['first_token_char'] {
			Tok = cast<tok> cons d::tok ["ts\[0\]"]
		}
	}
}

for Section: section in RagelTree {
	if match Section [Decl: var_decl] {
		cons SectionList: section* [Decl]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

for Section: section in RagelTree {
	if match Section [section_multiline] {
		for Action: ragel::action_block in Section {
			# Reparse as lang-independent code.
			parse SectionList: section*[$Action]

			# Translate to specific language.
			indepToHost( SectionList )

			# Reparse back to ragel action block.
			Action = parse ragel::action_block[$SectionList]
		}

		prints( Output '\n' Section '\n' )
	}
}

send Output
	"%% write data;
	"int cs;
	"
	"void init()
	"{

for Section: section in RagelTree {
	if match Section [ExprStmt: expr_stmt] {
		cons SectionList: section* [ExprStmt]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

send Output
	"	%% write init;
	"}

send Output
	"void exec( const(char) data\[\] )
	"{
	"	const(char) *p = data.ptr;
	"	const(char) *pe = data.ptr + data.length;

if NeedsEof {
	send Output
		"	const(char) *eof = pe;
}

send Output
	"	char _s\[\];
	"
	"	%% write exec;
	"}
	"
	"void finish( )
	"{
	"	if ( cs >= [MachineName.word]_first_final )
	"		writefln( \"ACCEPT\" );
	"	else
	"		writefln( \"FAIL\" );
	"}

send Output
	~const char[][] inp = [

NR: int = 0
for InputString: input_string in RagelTree {
	send Output [^InputString ",\n"]
	NR = NR + 1
}

send Output
	"\];
	"
	"int inplen = [NR];
	"
	"}

send Output
	"int main()
	"{
	"	[MachineName.word] m = new [MachineName.word]();
	"	int i;
	"	for ( i = 0; i < m.inplen; i++ ) {
	"		m.init();
	"		m.exec( m.inp\[i\] );
	"		m.finish();
	"	}
	"	return 0;
	"}
	"

send Output "/* _____OUTPUT_____
for OutputLine: output_line in RagelTree {
	prints( Output OutputLine )
}
send Output "*/
