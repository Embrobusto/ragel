include 'trans.lm'

namespace d
	lex 
		literal `%%{ `}%%

		literal `int `bool `const `char `ptr `printi
				`printb `prints `print_token `printf
				`fwrite `first_token_char `var `byte

		literal `; `< `> `( `) `[ `] `=
				`* `! `{ `} `+ `- `== `!=
				`, `..

		ignore / ( [ \t] | NL )+ /

		token tk_ident /ident/
		token tk_number /digit+/
		token tk_hex_number /'0x' [0-9a-fA-F]+/

		token string
			/ s_literal | d_literal /
	end

	def factor
		[tk_ident]
	|	[tk_ident `[ expr `]]
	|	[tk_number]
	|	[tk_hex_number]
	|	[string]
	|	[`( type `) `( expr `)]
	|	[`( expr `)]

	def print_stmt
		[`printf `( expr `) `;]
	|	[`fwrite `( expr `) `;]

	def op
		[`<]
	|	[`>]
	|	[`=]
	|	[`!]
	|	[`+]
	|	[`-]
	|	[`*]
	|	[`!=]
	|	[`==]
	|	[`,]
	|	[`..]

	def expr_op
		[op factor]

	def expr
		[factor expr_op*]

	def opt_arr
		[`[ expr `]]
	|	[]

	def type
		[`int]
	|	[`bool]
	|	[`char]
	|	[`char `*]
	|	[`const `( `char `) `*]
	|	[`byte]

	def var_decl
		[type tk_ident opt_arr `;]
end

namespace indep

d::expr d_expr( Expr: expr )
{
	return cast<d::expr> Expr
}

d::tk_ident d_ident( Ident: tk_ident )
{
	return cast<d::tk_ident> Ident
}

d::factor d_factor( Factor: factor )
{
	return cast<d::factor> Factor
}

d::tk_ident d_ident( Ident: tk_ident )
{
	return cast<d::tk_ident> Ident
}

d::opt_arr d_opt_arr( OptArr: opt_arr )
{
	return cast<d::opt_arr> OptArr
}

int d_rewrite( Indep: ref<any> )
{
	for Factor: factor in Indep {
		if match Factor "true" {
			Factor = cons factor "1"
		}
		elsif match Factor "false" {
			Factor = cons factor "0"
		}
		elsif match Factor
				['<' type '>' '(' Expr: expr ')']
		{
			Factor = cast<factor> cons d::factor
				"( [d_expr(Expr)] )
		}
		elsif match Factor ['first_token_char'] {
			Factor = cast<factor> cons d::factor
				"ts\[0\]"
		}
	}

	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cast<var_decl> cons d::var_decl
				"int [d_ident(Ident)] [d_opt_arr(OptArr)];
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cast<var_decl> cons d::var_decl
				"const(char) * [d_ident(Ident)];
		}
	}

	for Stmt: print_stmt in Indep {
		if match Stmt ['printi' F: factor ';' ] {
			Stmt = cast<print_stmt> cons d::print_stmt
				"printf( \"%d\", [d_factor(F)] );"
		}
		elsif match Stmt ['printb' I: tk_ident ';' ] {
			Stmt = cast<print_stmt> cons d::print_stmt
				"printf( \"%.*s\", [d_ident(I)]\[0..(pos)\] );"
		}
		elsif match Stmt ['prints' F: factor ';' ] {
			Stmt = cast<print_stmt> cons d::print_stmt
				"printf( \"%.*s\", [d_factor(F)] );"
		}
		elsif match Stmt ['print_token' ';' ] {
			Stmt = cast<print_stmt> cons d::print_stmt
				"printf( \"%.*s\", ts\[0..(te - ts)\] );"
		}
	}
}

end

OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: indep::start = parse indep::start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: indep::comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

send Output
	"/*
	" * @LANG: d
	" * @GENERATED: yes
	" */
	"
	"import std.stdio;
	"import std.string;
	"
	"class [MachineName.word]
	"{

for Section: indep::section in RagelTree {
	if match Section [Decl: var_decl] {
		d_rewrite( Decl )
		send Output [Decl]
	}
}

for Section: indep::section in RagelTree {
	if match Section [section_multiline] {
		for Action: ragel::action_block in Section {
			# Reparse as lang-independent code.
			parse SectionList: indep::section*[$Action]

			# Translate to specific language.
			d_rewrite( SectionList )

			# Reparse back to ragel action block.
			Action = parse ragel::action_block[$SectionList]
		}

		prints( Output '\n' Section '\n' )
	}
}

send Output
	"%% write data;
	"int cs;
	"
	"void init()
	"{

for Section: indep::section in RagelTree {
	if match Section [ExprStmt: expr_stmt] {
		cons SectionList: indep::section* [ExprStmt]
		d_rewrite( ExprStmt )
		send Output [ExprStmt]
	}
}

send Output
	"	%% write init;
	"}

send Output
	"void exec( const(char) data\[\] )
	"{
	"	const(char) *p = data.ptr;
	"	const(char) *pe = data.ptr + data.length;

if NeedsEof {
	send Output
		"	const(char) *eof = pe;
}

send Output
	"	char _s\[\];
	"
	"	%% write exec;
	"}
	"
	"void finish( )
	"{
	"	if ( cs >= [MachineName.word]_first_final )
	"		writefln( \"ACCEPT\" );
	"	else
	"		writefln( \"FAIL\" );
	"}

send Output
	~const char[][] inp = [

NR: int = 0
for InputString: indep::input_string in RagelTree {
	send Output [^InputString ",\n"]
	NR = NR + 1
}

send Output
	"\];
	"
	"int inplen = [NR];
	"
	"}

send Output
	"int main()
	"{
	"	[MachineName.word] m = new [MachineName.word]();
	"	int i;
	"	for ( i = 0; i < m.inplen; i++ ) {
	"		m.init();
	"		m.exec( m.inp\[i\] );
	"		m.finish();
	"	}
	"	return 0;
	"}
	"

send Output "/* _____OUTPUT_____
for OutputLine: indep::output_line in RagelTree {
	prints( Output OutputLine )
}
send Output "*/
