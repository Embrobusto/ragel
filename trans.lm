include '../src/ragel.lm'

lex 
	literal '%%{', '}%%'
	literal 'int', 'bool', 'char', 'ptr', 'printi',
			'printb', 'prints', 'print_token', 'printf',
			'fwrite', 'first_token_char'
	literal ';', '<', '>', '(', ')', '[', ']', '=', '*'

	ignore / ( [ \t] | NL )+ /

	rl INPUT /'_'+ 'INPUT' '_'+/
	rl OUTPUT /'_'+ 'OUTPUT' '_'+/

	token tk_ident /ident/
	token tk_number /digit+/
	token tk_hex_number /'0x' [0-9a-fA-F]+/

	token output
		/ '#ifdef' ' '* OUTPUT any* :>> ( '#endif' ) /

	token input_id
		/ '#ifdef' ' '* INPUT /

	token endif
		/ '#endif' /

	token tk_cpp_comment
		/ cpp_comment /

	token c_comm_open
		/ '/*' /

	token string
		/ s_literal | d_literal /

	token indep_any / any /
end

lex
	token comm_val /'@' [A-Za-z0-9_]+ ': ' [^\n]+ '\n' /
	token comm_term /'*/'/
	token comm_any / any /
end

def comm_item
	[comm_val]
|	[comm_any]

def c_comment
	[c_comm_open comm_item* comm_term]

def input_string
	[string]

def input_list
	[input_list input_string]
| 	[input_string]

def input
	[input_id input_list endif]

def tok
	[tk_ident]
|	[tk_ident '[' tok ']']
|	[tk_number]
|	[tk_hex_number]
|	[input]
|	[output]
|	[tk_cpp_comment]
|	[c_comment]
|	[string]
|	['<' type '>' '(' tok* ')']
|	['(' tok* ')']
|	['printi' tok ';']
|	['printb' tok ';']
|	['prints' tok ';']
|	['print_token' ';']
|	['first_token_char']
|	['printf' '(' tok* ')' ';']
|	['fwrite' '(' tok* ')' ';']
|	[';']
|	['<']
|	['>']
|	['[']
|	[']']
|	['=']
|	['*']
|	[indep_any]

def section_multiline
	['%%{' ragel::ragel_start '}%%']

def type
	['int']
|	['bool']
|	['char']
|	['char' '*']
|	['ptr']

def opt_arr
	['[' tok ']']
|	[]

def var_decl
	[type tk_ident opt_arr ';']

def expr_stmt
	[tk_ident '=' tok* ';']

def stmt
	[var_decl]
|	[expr_stmt]

def section
	[section_multiline]
|	[stmt]
|	[tok]

def start
	[section*]

