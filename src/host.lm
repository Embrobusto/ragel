namespace inline
	lex 
		literal `fpc `fc  `fcurs `ftargs
			`fentry `fhold `fexec `fgoto `fnext
			`fcall `fret `fbreak `fncall `fnret `fnbreak

		token ident /ident/
		token number /digit+/
		token hex_number /'0x' [0-9a-fA-F]+/
		token dec_number /'0x' [0-9a-fA-F]+/

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		literal 
			`{ `} `:: `* `, `( `) `;

		token var_ref
			/ "$" [a-zA-Z_][a-zA-Z_0-9]* /
			{
				if GblActionParams 
				{
					input->push( make_token(
							typeid<var_ref>, input->pull( match_length ) ) )
				}
				else
				{
					# Just pull one char. Don't consume the word because it may
					# be a keyword.
					input->push( make_token(
							typeid<c_any>, input->pull( 1 ) ) )
				}
			}

		token c_any
			/ any /
	end

end


namespace host
	lex 
		literal `%%{

		token close_inc /'}--%%'/
		{
			input->push( make_token( typeid<close_inc>, input->pull( match_length ) ) )
			restoreGlobals()
		}

		token close_imp /'}++%%'/
		{
			input->push( make_token( typeid<close_imp>, input->pull( match_length ) ) )
			restoreGlobals()
		}

		token slr / '%%' [^{] [^\n]* '\n' /
		{
			# Translates single line to multi-line
			input->pull( 2 )
			R: str = input->pull( match_length - 3 )
			input->push( "\n}%%" )
			input->push( R )
			input->push( "%%{" )
		}

		rl NL / '\n' /

		rl s_literal
			/ "'" ([^'\\\n] | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		literal `define `=

		token ident /ident "'"?/
		token number /digit+/
		token hex_number /'0x' [0-9a-fA-F]+/

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		token c_any / any /
	end

	token no_match //

	def tok
		[no_match ident whitespace number] :ImportNum
	|	[no_match ident whitespace string] :ImportStr
	|	[no_match ident] :Else
	|	[`define whitespace ident whitespace? number]  :ImportDefNum
	|	[`define whitespace ident whitespace? string]  :ImportDefStr
	|	[ident whitespace? `= whitespace? number]      :ImportAssignNum
	|	[ident whitespace? `= whitespace? string]      :ImportAssignStr
	|	[`define]              :Def
	|	[`=]                   :Eq
	|	[ident] :Ident
	|	[number] :Number
	|	[hex_number] :HexNumber
	|	[comment] :Comment
	|	[string] :String
	|	[whitespace] :Whitespace
	|	[c_any] :Any
		{
			NM: no_match = make_token( typeid<no_match>, "" )
			I: ident = make_token( typeid<ident>, $lhs.c_any )
			lhs = cons tok [NM I]
		}
end

