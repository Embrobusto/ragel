
reduction TopLevel

	# Pass Through.
	# def tok
	#	[`define ident number] :Def1
	# |	[`define ident string] :Def2
	# |	[ident `= number]      :Ass1
	# |	[ident `= string]      :Ass2
	#	[`define whitespace ident whitespace? number]  :ImportDefNum
	# |	[`define whitespace ident whitespace? string]  :ImportDefStr
	# |	[ident whitespace? `= whitespace? number]      :ImportAssignNum
	# |	[ident whitespace? `= whitespace? string]      :ImportAssignStr
	# |	[`define]              :Def
	# |	[`=]                   :Eq
	# |	[ident] :Ident
	# |	[number] :Number
	# |	[hex_number] :HexNumber
	# |	[comment] :Comment
	# |	[string] :String
	# |	[whitespace] :Whitespace
	# |	[c_any] :Any

	host::tok  :ImportDefNum
	{
		if ( isImport )
		{
			Literal *lit = new Literal( @number,
					false /* $number->neg */, $number->data,
					$number->length, Literal::Number );

			string name( $ident->data, $ident->length );
			import( @ident, name, lit );
		}
		else
		{
			if ( includeDepth == 0 ) {
				id->curItem->data.write( "define ", 7 );
				id->curItem->data.write( $ident->data, $ident->length );
				id->curItem->data.write( " ", 1 );
				id->curItem->data.write( $number->data, $number->length );
			}
		}
	}
	host::tok  :ImportDefStr
	{
		if ( isImport )
		{
			Literal *lit = new Literal( @string, false,
					$string->data, $string->length, Literal::LitString );
			string name( $ident->data, $ident->length );
			import( @ident, name, lit );
		}
		else
		{
			if ( includeDepth == 0 ) {
				id->curItem->data.write( "define ", 7 );
				id->curItem->data.write( $ident->data, $ident->length );
				id->curItem->data.write( " ", 1 );
				id->curItem->data.write( $string->data, $string->length );
			}
		}
	}
	host::tok  :ImportAssignNum
	{
		if ( isImport )
		{
			Literal *lit = new Literal( @number,
					false /*$number->neg */, $number->data,
					$number->length, Literal::Number );
			string name( $ident->data, $ident->length );
			import( @ident, name, lit );
		}
		else
		{
			if ( includeDepth == 0 ) {
				id->curItem->data.write( $ident->data, $ident->length );
				id->curItem->data.write( "=", 1 );
				id->curItem->data.write( $number->data, $number->length );
			}
		}
	}
	host::tok  :ImportAssignStr
	{
		if ( isImport )
		{
			Literal *lit = new Literal( @string, false,
					$string->data, $string->length, Literal::LitString );

			string name( $ident->data, $ident->length );
			import( @ident, name, lit );
		}
		else
		{
			if ( includeDepth == 0 ) {
				id->curItem->data.write( $ident->data, $ident->length );
				id->curItem->data.write( "=", 1 );
				id->curItem->data.write( $string->data, $string->length );
			}
		}
	}
	host::tok  :Def
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( "define", 6 );

	}
	host::tok  :Eq
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( "=", 1 );
	}

	host::tok :Ident
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $ident->data, $ident->length );
	}

	host::tok :Number
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $number->data, $number->length );
	}

	host::tok :HexNumber
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $hex_number->data, $hex_number->length );
	}

	host::tok :Comment
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $comment->data, $comment->length );
	}

	host::tok :String
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $string->data, $string->length );
	}

	host::tok :Whitespace
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $whitespace->data, $whitespace->length );
	}

	host::tok :Any
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $c_any->data, $c_any->length );
	}
	host::tok :Else
	{
		if ( !isImport && includeDepth == 0 )
			id->curItem->data.write( $ident->data, $ident->length );
	}

	host::section :MultiLine
	{
		if ( !isImport && includeDepth == 0 ) {
			InputItem *inputItem = new InputItem;
			inputItem->type = InputItem::EndSection;
			inputItem->loc = @5;
			id->inputItems.append( inputItem );

			if ( section != 0 ) {
				inputItem->section = section;
				section->lastReference = inputItem;
			}

			/* The end section may include a newline on the end, so
			 * we use the last line, which will count the newline. */
			inputItem = new InputItem;
			inputItem->type = InputItem::HostData;
			inputItem->loc = @5;
			if ( inputItem->loc.fileName == 0 )
				inputItem->loc = @1;
						
			id->inputItems.append( inputItem );

			/* Record the parse data and move over the end section. */
			id->curItem = id->curItem->next;
			id->curItem->pd = pd;

			/* Move over the host data. */
			id->curItem = id->curItem->next;
		}
	}

end
