namespace lang_desc
	lex

		ignore /'#' [^\n] '\n'/
		ignore /[ \t\r\n]+/

		literal `true `false `NIL
		token word /[a-zA-Z_][a-zA-Z0-9_]*/
		token number /[0-9]+/
	end

	def boolean
		[`true] | [`false]

	def nil_word
		[word] | [`NIL]

	def num_symbol
		[number] | [word]

	def host_type
		[
			AlphType1: word AlphType2: nil_word
			InternalName: word
			IsSigned: boolean
			IsOrd: boolean
			IsChar: boolean
			sMinVal: num_symbol sMaxVal: num_symbol
			uMinVal: num_symbol uMaxVal: num_symbol
			Size: number
		] :HostType

	def desc
		[host_type*] :Root
end

reduction LangDesc
	lang_desc::host_type :HostType
	{
		std::cout << "loading host type" << std::endl;
	}

	lang_desc::desc :Root
	{
		std::cout << "loading lang descriptor" << std::endl;
	}
end

# File name. The open is expected to succeed. It is tested before the colm
# program is called.
A: list_el<str> = argv->pop_head_el()
global GblFileName: str = A->value

Stream: stream = open( GblFileName, "r" )
reduce LangDesc lang_desc::desc[ Stream ]
