include 'ril.lm'

namespace go_out
	token _IN_ /''/
	token _EX_ /''/

	lex
		token comment /
			'//' any* :> '\n' |
			'/*' any* :>> '*/'
		/

		token id
			/[a-zA-Z_][a-zA-Z_0-9]*/

		token number /
			[0-9]+
		/

		token symbol /
			'!' | '#' | '$' | '%' | '&' | '(' | ')' | '*' |
			'+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' |
			'=' | '>' | '?' | '@' | '[' | ']' | '^' | '|' |
			'~' /

		literal `{ `}

		token string /
				'"' ( [^"\\] | '\\' any ) * '"' |
				"'" ( [^'\\] | '\\' any ) * "'"
			/

		ignore
			/[ \t\v\r\n]+/
	end

	def item
		[comment]
	|	[id]
	|	[number]
	|	[symbol]
	|	[string]
	|	[`{ _IN_ item* _EX_ `} ]

	def go_out
		[_IN_ _EX_ item*]
end

namespace go_gen

	global Parser: parser<go_out::go_out>

	void tok_list( TL: host::tok* )
	{
		for Tok: host::tok in repeat(TL) {
			switch Tok
			case Stmt {
				"{[stmt_list( StmtList )]}"
			}
			case Expr {
				"([expr( Expr )])"
			}
			case Escape {
				Str: str = $Tok
				"[Str.suffix( 1 )]"
			}
			default {
				[Tok]
			}
		}
	}

	void embedded_host( EmbeddedHost: embedded_host )
	{
		switch EmbeddedHost
		case Expr
		{
			"([tok_list( TL )])"
		}
		case Stmt
		{
			"{[tok_list( TL )]}
		}
		case Bare
		{
			[tok_list( TL )]
		}
	}

	void expr_factor( ExprFactor: expr_factor )
	{
		switch ExprFactor
		case [EH: embedded_host]
		{
			send Parser
				[embedded_host(EH)]
		}
		case
			[O:`( TL: expr C: `)]
		{
			[O]
			expr( TL )
			[C]
		}
		case
			[ident O: `[ TL: expr C: `]]
		{
			[ExprFactor.ident O]
			expr( TL )
			[C]
		}
		case
			[`offset `( ident `, expr `)]
		{
			['int(']
			expr( ExprFactor.expr )
			[')']
		}
		case
			['deref' '(' ident ',' expr ')']
		{
			[ ExprFactor.ident '[']
			expr( ExprFactor.expr )
			[']']
		}
		case
				[T: `TRUE]
		{
			T.data = 'true'
			[T]
		}
		case
				[F: `FALSE]
		{
			F.data = '0'
			[F]
		}
		case
				[N: `nil]
		{
			N.data = '0'
			[N]
		}
		case [E1: embedded_host `-> E2: expr_factor]
		{
			embedded_host( E1 )
			expr_factor( E2 )
		}
		case [`cast '(' Type: type ')' expr_factor]
		{
			type( Type )
			['(']
			expr_factor( ExprFactor._expr_factor )
			[')']
		}
		default {
			# Catches cases not specified
			[ExprFactor]
		}
	}

	void lvalue( ExprFactor: lvalue )
	{
		switch ExprFactor
		case [EH: embedded_host]
		{
			[embedded_host(EH)]
		}
		case
			[ident O: `[ TL: expr C: `]]
		{
			[ExprFactor.ident O]
			expr( TL )
			[C]
		}
		case [E1: embedded_host `-> E2: lvalue]
		{
			embedded_host( E1 )
			lvalue( E2 )
		}
		default {
			# Catches cases not specified
			[ExprFactor]
		}
	}

	void expr_factor_op( ExprFactorOp: expr_factor_op )
	{
		switch ExprFactorOp
		case [B: `! expr_factor_op]
		{
			[B]
			expr_factor_op( ExprFactorOp._expr_factor_op )
		}
		case [T: `~ expr_factor_op]
		{
			['^']
			expr_factor_op( ExprFactorOp._expr_factor_op )
		}
		case [expr_factor]
		{
			expr_factor( ExprFactorOp.expr_factor )
		}
	}

	void expr_bitwise( ExprBitwise: expr_bitwise )
	{
		switch ExprBitwise
		case [expr_bitwise A: `& expr_factor_op]
		{
			expr_bitwise( ExprBitwise._expr_bitwise )
			[A]
			expr_factor_op( ExprBitwise.expr_factor_op )
		}
		case [expr_factor_op]
		{
			expr_factor_op( ExprBitwise.expr_factor_op )
		}
	}

	void expr_mult( ExprMult: expr_mult )
	{
		switch ExprMult
		case [expr_mult T: `* expr_bitwise]
		{
			expr_mult( ExprMult._expr_mult )
			[T]
			expr_bitwise( ExprMult.expr_bitwise )
		}
		case [expr_bitwise]
		{
			expr_bitwise( ExprMult.expr_bitwise )
		}
	}

	void expr_add( ExprAdd: expr_add )
	{
		switch ExprAdd
		case [expr_add Op: add_op expr_mult]
		{
			expr_add( ExprAdd._expr_add )
			[Op]
			expr_mult( ExprAdd.expr_mult )
		}
		case [expr_mult]
		{
			expr_mult( ExprAdd.expr_mult )
		}
	}

	void expr_shift( ExprShift: expr_shift )
	{
		switch ExprShift
		case [expr_shift Op: shift_op expr_add]
		{
			expr_shift( ExprShift._expr_shift )
			[Op]
			expr_add( ExprShift.expr_add )
		}
		case [expr_add]
		{
			expr_add( ExprShift.expr_add )
		}
	}

	void expr_test( ExprTest: expr_test )
	{
		switch ExprTest
		case [expr_test Op: test_op expr_shift]
		{
			expr_test( ExprTest._expr_test )
			[Op]
			expr_shift( ExprTest.expr_shift )
		}
		case [expr_shift]
		{
			expr_shift( ExprTest.expr_shift )
		}
	}

	void expr( Expr: expr )
	{
		expr_test( Expr.expr_test )
	}

	void type( Type: type )
	{
		switch Type
		case "s8"
			['int8 ']
		case "s16"
			['int16 ']
		case "s32"
			['int32 ']
		case "s64"
			['int64 ']
		case "s128"
			['long long ']
		default
			send Parser [Type]
	}

	void number( Number: number )
	{
		switch Number
		case [`u `( uint `) ]
			[Number.uint]
		default
			[Number]
	}

	void num_list( NumList: num_list )
	{
		number( NumList.number )
		for CommaNum: comma_num in NumList {
			[', ']
			number( CommaNum.number )
		}
	}

	void stmt( Stmt: stmt )
	{
		switch Stmt
		case [EH: embedded_host]
		{
			[embedded_host(EH)]
		}
		case [A: static_array] {
			"var [A.ident] \[\] [type(A.type)] = \[\] "
				"[type(A.type)] { [num_list(A.num_list)] }
		}
		case [V: static_value] {
			"var [V.ident] [type(V.type)] = [V.number]
		}
		case [
				'if' O: `( IfExpr: expr C: `) IfStmt: stmt
		] {
			# if-statements with only the if clause can go out as an if.
			"if [expr(IfExpr)] {
			"	[stmt(IfStmt)]
			"}
		}
		case [
				'if' O: `( IfExpr: expr C: `) IfStmt: stmt
				ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
		] {
			# If the if-statement has more than just an if clause it goes out as a switch.
			"switch {
			"	case [expr( IfExpr )]:
			"		[stmt( IfStmt )]

			for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
				match ElseIfClause
					['else if (' ElseIfExpr: expr ')' ElseIfStmt: stmt]

				"case [expr(ElseIfExpr)]:
				"	[stmt(ElseIfStmt)]
			}

			if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
				"default:
				"	[stmt(ElseStmt)]
			}
			"}
		}
		case ["while ( TRUE )" WhileStmt: stmt] {
			"for {
			"	[stmt(WhileStmt)]
			"}
		}
		case ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
			"for [expr(WhileExpr)] {
			"	[stmt(WhileStmt)]
			"}
		}
		case ['switch' '(' SwitchExpr: expr ')' '{' StmtList: stmt* '}'] {
			"switch [expr(SwitchExpr)] {
			"	[stmt_list(StmtList)]
			"}
		}
		case [ExprExpr: expr Semi: `;] {
			[expr(ExprExpr) Semi]
		}
		case [L: `{ TL: stmt* R: `}] {
			[L stmt_list(TL) R]
		}
		case [D: declaration]
		{
			"var  [D.ident] [type(D.type)]"

			if match D.opt_init ['=' Expr: expr] {
				send Parser
					"  = [expr(Expr)]"
			}
			['\n']
		}
		case [export_stmt]
		{
			"#define  [Stmt.export_stmt.ident] [number(Stmt.export_stmt.number)]
		}
		case ['fallthrough' ';']
		{
			"fallthrough
		}
		case [Index: index_stmt]
		{
			"var [Index.ident] int"

			if match Index.opt_init ['=' Expr: expr] {
				" = [expr(Expr)]"
			}

			['\n']
		}
		case [case_block]
		{
			"case [expr( Stmt.case_block.expr )]:
			"[stmt_list( Stmt.case_block._repeat_stmt )]
			"break;
		}
		case [default_block]
		{
			"default:
			"[stmt_list( Stmt.default_block._repeat_stmt )]
			"break;
		}
		case [case_label]
		{
			"case [expr( Stmt.case_label.expr )]:
		}
		case [label_stmt]
		{
			"[Stmt.label_stmt.ident]:
			"[stmt_list( Stmt.label_stmt._repeat_stmt )]
		}
		case [entry_loop]
		{
			[stmt_list( Stmt.entry_loop._repeat_stmt )]
		}
		case [AS: assign_stmt]
		{
			"[lvalue(AS.LValue) AS.assign_op expr(AS.expr)];
		}
		default {
			# catches unspecified cases
			[Stmt]
		}
	}

	void stmt_list( StmtList: stmt* )
	{
		for Stmt: stmt in repeat( StmtList )
			stmt( Stmt )
	}

	void trans( Output: stream, Start: start )
	{
		Parser = new parser<go_out::go_out>()

		stds->push( Parser->gets() )
		stmt_list( Start._repeat_stmt )
		stds->pop()

		GO: go_out::go_out = Parser->finish()

		if GO {
			send Output
				[GO]
		}
		else {
			send stderr
				"failed to parse output: [Parser->error]
		}

	}
end

void trans( Output: stream, Start: start )
{
	go_gen::trans( Output, Start )
}

include 'rlhc-main.lm'
