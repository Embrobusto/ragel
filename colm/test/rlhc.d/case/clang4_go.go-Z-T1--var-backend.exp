package main
import "fmt"

var pos  int ;
var line  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _clang_key_offsets [] int16  = [] int16  { 0, 0, 3, 6, 7, 9, 12, 13, 15, 21, 22, 42, 62, 82, 103, 124, 143, 162, 182, 0  }
var _clang_trans_keys [] byte  = [] byte  { 10, 34, 92, 10, 39, 92, 10, 10, 33, 10, 33, 47, 10, 48, 57, 48, 57, 65, 70, 97, 102, 10, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0 }
var _clang_single_lengths [] int8  = [] int8  { 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0  }
var _clang_range_lengths [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0  }
var _clang_index_offsets [] int16  = [] int16  { 0, 0, 4, 8, 10, 13, 17, 19, 21, 25, 27, 41, 55, 69, 84, 99, 112, 125, 139, 0  }
var _clang_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _clang_trans_offsets [] int16  = [] int16  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 0  }
var _clang_trans_lengths [] int8  = [] int8  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _clang_cond_keys [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _clang_cond_targs [] int8  = [] int8  { 1, 12, 9, 1, 2, 12, 3, 2, 2, 2, 4, 5, 4, 4, 5, 10, 4, 10, 6, 15, 0, 18, 18, 18, 0, 1, 1, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0  }
var _clang_cond_actions [] int8  = [] int8  { 2, 0, 0, 1, 2, 0, 0, 1, 2, 1, 3, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 4, 4, 4, 0, 2, 1, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0  }
var _clang_eof_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0  }
var _clang_nfa_targs [] int8  = [] int8  { 0, 0  }
var _clang_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _clang_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _clang_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var clang_start  int  = 10
var clang_first_final  int  = 10
var clang_error  int  = 0
var clang_en_main  int  = 10
func prepare() {
	pos = 0;
	line = 1;
	
	{
		cs = int(clang_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _klen int 
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		var  _trans uint 
		var  _cond  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if p == eof  {
							{
								if _have == 0  {
									{
										switch _clang_eof_actions[cs]  {
											case 22 :
											{fmt.Print( "ident(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											case 10 :
											{fmt.Print( "literal(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											case 18 :
											{fmt.Print( "float(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											case 14 :
											{fmt.Print( "int(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											case 26 :
											{fmt.Print( "hex(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											case 6 :
											{fmt.Print( "symbol(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
											
											break;
											
										}
									}
									
								}
							}
							
							
						}
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int(_clang_key_offsets[cs] );
								_trans = uint(_clang_index_offsets[cs]);
								_have = 0;
								_klen = int(_clang_single_lengths[cs]);
								if _klen > 0  {
									{
										var  _lower int
										var  _mid int
										var  _upper int
										_lower = _keys;
										_upper = _keys + _klen - 1;
										for _upper >= _lower && _have == 0  {
											{
												_mid = _lower + ((_upper-_lower) >> 1);
												switch {
													case ( data[p ]) < _clang_trans_keys[_mid ]:
													_upper = _mid - 1;
													
													case ( data[p ]) > _clang_trans_keys[_mid ]:
													_lower = _mid + 1;
													
													default:
													{
														_trans += uint((_mid - _keys));
														_have = 1;
													}
													
												}
											}
											
										}
										if _have == 0  {
											{
												_keys += _klen;
												_trans += uint(_klen);
											}
											
										}
									}
									
									
								}
								if _have == 0  {
									{
										_klen = int(_clang_range_lengths[cs]);
										if _klen > 0  {
											{
												var  _lower int
												var  _mid int
												var  _upper int
												_lower = _keys;
												_upper = _keys + (_klen<<1) - 2;
												for _have == 0 && _lower <= _upper  {
													{
														_mid = _lower + (((_upper-_lower) >> 1) & ^1);
														switch {
															case ( data[p ]) < _clang_trans_keys[_mid ]:
															_upper = _mid - 2;
															
															case ( data[p ]) > _clang_trans_keys[_mid + 1 ]:
															_lower = _mid + 2;
															
															default:
															{
																_trans += uint(((_mid - _keys)>>1));
																_have = 1;
															}
															
														}
													}
													
												}
												if _have == 0  {
													_trans += uint(_klen);
													
												}
											}
											
										}
									}
									
									
								}
								_ckeys = int(_clang_trans_offsets[_trans] );
								_klen = int(_clang_trans_lengths[_trans]);
								_cond = uint(_clang_trans_offsets[_trans]);
								_have = 0;
								_cpc = 0;
								{
									var  _lower int
									var  _mid int
									var  _upper int
									_lower = _ckeys;
									_upper = _ckeys + _klen - 1;
									for _have == 0 && _lower <= _upper  {
										{
											_mid = _lower + ((_upper-_lower) >> 1);
											switch {
												case _cpc < int(_clang_cond_keys[_mid ]):
												_upper = _mid - 1;
												
												case _cpc > int(_clang_cond_keys[_mid ]):
												_lower = _mid + 1;
												
												default:
												{
													_cond += uint((_mid - _ckeys));
													_have = 1;
												}
												
											}
										}
										
									}
									if _have == 0  {
										{
											cs = 0;
											_cont = 0;
										}
										
									}
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_clang_cond_targs[_cond]);
								switch _clang_cond_actions[_cond]  {
									case 1 :
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 5 :
									{blen = 0;
									}
									
									break;
									case 3 :
									{line = line + 1;
									}
									
									break;
									case 22 :
									{fmt.Print( "ident(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 10 :
									{fmt.Print( "literal(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 18 :
									{fmt.Print( "float(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 14 :
									{fmt.Print( "int(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 26 :
									{fmt.Print( "hex(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 6 :
									{fmt.Print( "symbol(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									
									break;
									case 2 :
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									{line = line + 1;
									}
									
									break;
									case 4 :
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 25 :
									{fmt.Print( "ident(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 23 :
									{fmt.Print( "ident(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 13 :
									{fmt.Print( "literal(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 11 :
									{fmt.Print( "literal(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 21 :
									{fmt.Print( "float(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 19 :
									{fmt.Print( "float(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 17 :
									{fmt.Print( "int(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 15 :
									{fmt.Print( "int(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 29 :
									{fmt.Print( "hex(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 27 :
									{fmt.Print( "hex(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 9 :
									{fmt.Print( "symbol(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									
									break;
									case 7 :
									{fmt.Print( "symbol(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{line = line + 1;
									}
									
									break;
									case 24 :
									{fmt.Print( "ident(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 12 :
									{fmt.Print( "literal(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 20 :
									{fmt.Print( "float(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 16 :
									{fmt.Print( "int(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 28 :
									{fmt.Print( "hex(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									case 8 :
									{fmt.Print( "symbol(" );fmt.Print( line );fmt.Print( "," );fmt.Print( blen );fmt.Print( "): " );fmt.Print( string ( buffer[:blen] ) );fmt.Print( "\n" );}
									{blen = 0;
									}
									{buffer[blen] = (( data[p ]));
										blen += 1;
										buffer[blen] = 0;
									}
									
									break;
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= clang_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
	"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
