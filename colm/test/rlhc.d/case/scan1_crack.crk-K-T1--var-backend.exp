import crack.io cout;
import crack.lang Buffer;

int
ts;
int
te;
int act;
int token;





const array[int16 ] _scanner_key_offsets = [ 0, 0, 4, 5, 6, 7, 8, 14, 21, 22, 23, 0 ,  ];
const array[byte ] _scanner_trans_keys = [ 46, 100, 48, 57, 49, 120, 120, 120, 46, 49, 50, 100, 48, 57, 10, 97, 98, 99, 100, 48, 57, 98, 100, 46, 100, 48, 57, 0,  ];
const array[int16 ] _scanner_single_lengths = [ 0, 2, 1, 1, 1, 1, 4, 5, 1, 1, 2, 0 ,  ];
const array[int16 ] _scanner_range_lengths = [ 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0 ,  ];
const array[int16 ] _scanner_index_offsets = [ 0, 0, 4, 6, 8, 10, 12, 18, 25, 27, 29, 0 ,  ];
const array[int16 ] _scanner_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _scanner_trans_offsets = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 ,  ];
const array[int16 ] _scanner_trans_lengths = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _scanner_cond_keys = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _scanner_cond_targs = [ 7, 1, 1, 7, 9, 0, 4, 7, 5, 7, 7, 7, 7, 10, 10, 1, 1, 0, 7, 7, 8, 2, 6, 1, 0, 8, 7, 3, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 0 ,  ];
const array[int16 ] _scanner_cond_actions = [ 2, 0, 0, 1, 3, 0, 0, 4, 0, 4, 5, 4, 2, 6, 7, 0, 0, 0, 10, 11, 0, 0, 0, 0, 0, 0, 12, 0, 13, 2, 0, 0, 1, 1, 4, 4, 4, 12, 13, 1, 0 ,  ];
const array[int16 ] _scanner_to_state_actions = [ 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0 ,  ];
const array[int16 ] _scanner_from_state_actions = [ 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0 ,  ];
const array[int16 ] _scanner_eof_trans_indexed = [ 0, 8, 0, 10, 10, 10, 0, 0, 14, 15, 8, 0 ,  ];
const array[int16 ] _scanner_eof_trans_direct = [ 0, 34, 0, 35, 36, 37, 0, 0, 38, 39, 40, 0 ,  ];
const array[int16 ] _scanner_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _scanner_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _scanner_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _scanner_nfa_pop_trans = [ 0, 0 ,  ];
const int  scanner_start  = 7;
const int  scanner_first_final  = 7;
const int  scanner_error  = 0;
const int  scanner_en_main  = 7;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( scanner_start );
		ts = 0;
		te = 0;
		act = 0;
		
	}
	if ( 1 ) {
		int _klen;
		int _keys = 0;
		int _ckeys = 0;
		int _cpc;
		uint32 _trans;
		uint32 _cond = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _scanner_eof_trans_direct[cs]> 0  )
					{
						_trans = uint32  ( _scanner_eof_trans_direct[cs] )- 1;
						_cond = uint32  ( _scanner_trans_offsets[_trans] );
						_have = 1;
						
					}
					
					if ( _have == 0  )
					{
					
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					if ( _scanner_from_state_actions[cs] == 9  ) {
						if ( 1 ) {
							if ( 1 ) {
								ts = p;
								
							}
							
						}
						
					}
					;
					_keys = _scanner_key_offsets[cs];
					_trans = uint32  ( _scanner_index_offsets[cs] );
					_have = 0;
					_klen = int ( _scanner_single_lengths[cs] );
					if ( _klen > 0  )
					{
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( (data[p ])< _scanner_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( (data[p ])> _scanner_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += uint32  ( (_mid - _keys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += uint32  ( _klen );
							
						}
						
						
					}
					
					if ( _have == 0  )
					{
						_klen = int ( _scanner_range_lengths[cs] );
						if ( _klen > 0  )
						{
							int _lower = 0;
							int _mid = 0;
							int _upper = 0;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( (data[p ])< _scanner_trans_keys[_mid ] )
								_upper = _mid - 2;
								
								else if ( (data[p ])> _scanner_trans_keys[_mid + 1 ] )
								_lower = _mid + 2;
								
								else
								{
									_trans += uint32  ( ((_mid - _keys)>>1) );
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							_trans += uint32  ( _klen );
							
							
						}
						
						
					}
					
					_ckeys = _scanner_trans_offsets[_trans];
					_klen = int ( _scanner_trans_lengths[_trans] );
					_cond = uint32  ( _scanner_trans_offsets[_trans] );
					_have = 0;
					_cpc = 0;
					if ( 1 ) {
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < int ( _scanner_cond_keys[_mid ] ) )
							_upper = _mid - 1;
							
							else if ( _cpc > int ( _scanner_cond_keys[_mid ] ) )
							_lower = _mid + 1;
							
							else
							{
								_cond += uint32  ( (_mid - _ckeys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
							
						}
						
						
					}
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _scanner_cond_targs[_cond] );
					if ( _scanner_cond_actions[_cond] == 3  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 11  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								if ( 1 ) {
									cout.format( "on last     " );
									if ( p + 1 == te )
									{
										cout.format( "yes" );
										
									} 
									cout.format( "\n" );
									
								}
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 5  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								if ( 1 ) {
									cout.format( "on lag      " );
									if ( p + 1 == te )
									{
										cout.format( "yes" );
										
									} 
									cout.format( "\n" );
									
								}
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 2  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 10  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 12  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p;
								p = p - 1;
								if ( 1 ) {
									cout.format( "on next     " );
									if ( p + 1 == te )
									{
										cout.format( "yes" );
										
									} 
									cout.format( "\n" );
									
								}
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 13  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p;
								p = p - 1;
								if ( 1 ) {
									cout.format( "on lag      " );
									if ( p + 1 == te )
									{
										cout.format( "yes" );
										
									} 
									cout.format( "\n" );
									
								}
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 4  ) {
						if ( 1 ) {
							if ( 1 ) {
								p = ((te))-1;
								if ( 1 ) {
									cout.format( "on lag      " );
									if ( p + 1 == te )
									{
										cout.format( "yes" );
										
									} 
									cout.format( "\n" );
									
								}
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 1  ) {
						if ( 1 ) {
							if ( 1 ) {
								if ( act  == 0  ) {
									if ( 1 ) {
										if ( 1 ) {
											cs = 0;
											
										}
										
									}
									
								}
								else if ( act  == 4  ) {
									p = ((te))-1;
									if ( 1 ) {
										cout.format( "lm switch1  " );
										if ( p + 1 == te )
										{
											cout.format( "yes" );
											
										} 
										cout.format( "\n" );
										
									}
									
								}
								else if ( act  == 5  ) {
									p = ((te))-1;
									if ( 1 ) {
										cout.format( "lm switch2  " );
										if ( p + 1 == te )
										{
											cout.format( "yes" );
											
										} 
										cout.format( "\n" );
										
									}
									
								}
								;
								
							}
							
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 6  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 4;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_cond] == 7  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 5;
								
							}
							
						}
						
					}
					;
					if ( _scanner_to_state_actions[cs] == 8  ) {
						if ( 1 ) {
							if ( 1 ) {
								ts = 0;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 0;
								
							}
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= scanner_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "abbc1d1d2\n" );
}

main();
