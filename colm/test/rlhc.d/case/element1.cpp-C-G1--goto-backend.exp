#include <iostream>
using namespace std;

struct LangEl
{
	int key;
	const char *name;
};

struct Fsm
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute(  LangEl *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
	
};



static const char  _Fsm_eof_actions [] = { 0, 0, 0, 2, 0 ,  };
static const char  _Fsm_nfa_targs [] = { 0, 0 ,  };
static const char  _Fsm_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _Fsm_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Fsm_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Fsm_start  = 1;
static const int  Fsm_first_final  = 3;
static const int  Fsm_error  = 0;
static const int  Fsm_en_main  = 1;
int Fsm::init( )
{

	{
		cs = ( int ) Fsm_start;
	}
	return 0;
}

int Fsm::execute( LangEl *data, int len )
{
	LangEl *p = data;
	LangEl *pe = data + len;
	LangEl *eof_marker = pe;
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		switch ( cs  ) {
			case 1:
			if ( (p->key) == 1  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			switch ( (p->key) ) {
				case 2:
				{
					goto ctr0;
				}
				case 3:
				{
					goto ctr2;
				}
				
			}
			{
				goto ctr1;
			}
			case 3:
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr0: cs = 2;
		goto f0;
		ctr2: cs = 3;
		goto f0;
		
		f0:
		{
			cout << p->name << endl;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		if ( p == (eof_marker) )
		{
			switch ( _Fsm_eof_actions[cs] ) {
				case 2:
				{
					cout << "accept" << endl;
				}
				
				break;
				
			}
		}
		
		
		_out: {}
	}
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

int Fsm::finish( )
{
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

int main( )
{
	static Fsm fsm;
	static LangEl lel[] = { 
		{1, "one"}, 
		{2, "two-a"}, 
		{2, "two-b"}, 
		{2, "two-c"}, 
		{3, "three"}
	};
	
	fsm.init();
	fsm.execute( lel, 5 );
	fsm.finish();
	return 0;
}

