host( "working/erract4.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	#include <stdio.h>
	#include <Foundation/Foundation.h>
	
	#define IDENT_BUFLEN 256
	
	@@interface ErrAct : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation ErrAct
	
	
	
}@
array s8 _ErrAct_key_offsets( 0, 11 ) = { 0, 2, 3, 5, 7, 9, 11, 0 };

array char _ErrAct_trans_keys( 0, 111 ) = { 10, 104, 10, 10, 101, 10, 108, 10, 108, 10, 111, 10, 0 };

array s8 _ErrAct_single_lengths( 0, 2 ) = { 2, 1, 2, 2, 2, 2, 1, 0 };

array s8 _ErrAct_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_index_offsets( 0, 17 ) = { 0, 3, 5, 8, 11, 14, 17, 0 };

array s8 _ErrAct_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _ErrAct_trans_offsets( 0, 18 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 };

array s8 _ErrAct_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _ErrAct_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_cond_targs( 0, 6 ) = { 1, 2, 1, 1, 1, 1, 3, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 0, 1, 0 };

array s8 _ErrAct_cond_actions( 0, 3 ) = { 2, 0, 1, 3, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 1, 0 };

array s8 _ErrAct_eof_actions( 0, 1 ) = { 0, 0, 1, 1, 1, 1, 1, 0 };

array s8 _ErrAct_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ErrAct_start = 0;
value int ErrAct_first_final = 0;
value int ErrAct_error = -1;

value int ErrAct_en_main = 0;

host( "working/erract4.rl", 49 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)ErrAct_start;
	}
	host( "working/erract4.rl", 53 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const char *)_data len:(int)_len;
	{
		const char *p = _data;
		const char *pe = _data + _len;
		const char *eof = pe;
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _ErrAct_eof_actions[cs] ) {
							case 1 {
								host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _ErrAct_trans_keys, _ErrAct_key_offsets[cs] );
					_trans = cast(uint)_ErrAct_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_ErrAct_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _ErrAct_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _ErrAct_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_ErrAct_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _ErrAct_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _ErrAct_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _ErrAct_cond_keys, _ErrAct_trans_offsets[_trans] );
					_klen = cast(int)_ErrAct_trans_lengths[_trans];
					_cond = cast(uint)_ErrAct_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _ErrAct_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _ErrAct_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = -1;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_ErrAct_cond_targs[_cond];
					
					switch ( _ErrAct_cond_actions[_cond] ) {
						case 1 {
							host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
						}
						case 3 {
							host( "working/erract4.rl", 43 ) ${printf("newline\n");}$
						}
						case 2 {
							host( "working/erract4.rl", 43 ) ${printf("newline\n");}$
							host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
						}
					}
					
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/erract4.rl", 62 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == ErrAct_error )
		return -1;
		else if ( cs >= ErrAct_first_final )
		return 1;
		return 0;
	}
	
	@@end
	
	#include <stdio.h>
	#include <string.h>
	#define BUFSIZE 2048
	
	ErrAct *fsm;
	char buf[BUFSIZE];
	
	void test( char *buf )
	{
		int len = strlen(buf);
		fsm = [[ErrAct alloc] init];
		
		[fsm initFsm];
		[fsm executeWithData:buf len:len];
		if ( [fsm finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test(
		"hello\n"
		"hello\n"
		"hello\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"hello there\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"he"	);
		
		test( "" );
		
		return 0;
	}
	
}@