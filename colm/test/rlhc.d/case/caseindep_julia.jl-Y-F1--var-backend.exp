const _indep_trans_keys = UInt8[1, 0, 2, 3, 9, 9, 8, 8, 10, 10, 10, 10, 11, 11, 0, 0, 5, 9, 4, 8, 6, 10, 6, 10, 7, 11, 1, 0, 0 , ]
const _indep_char_class = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 1, 1, 1, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 1, 1, 1, 10, 1, 1, 11, 0 , ]
const _indep_index_offsets = Int8[0, 0, 2, 3, 4, 5, 6, 7, 8, 13, 18, 23, 28, 33, 0 , ]
const _indep_indicies = Int8[0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 9, 10, 1, 1, 1, 10, 11, 1, 1, 1, 11, 12, 1, 1, 1, 12, 7, 1, 1, 1, 7, 0 , ]
const _indep_index_defaults = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _indep_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _indep_cond_targs = Int8[2, 0, 8, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 0 , ]
const _indep_cond_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _indep_nfa_targs = Int8[0, 0 , ]
const _indep_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _indep_nfa_push_actions = Int8[0, 0 , ]
const _indep_nfa_pop_trans = Int8[0, 0 , ]
const indep_start  = 1
const indep_first_final  = 13
const indep_error  = 0
const indep_en_main  = 1
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	
	cs = convert(Int, indep_start )
	_trans = 0;
	_have = 0;
	_cont = 1;
	_keys = 0;
	_inds = 0;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = (cs<<1)
				_inds = _indep_index_offsets[1+(cs)]
				if (data[1+(p )])<= 111 && (data[1+(p )])>= 10 
					_ic = convert(Int, _indep_char_class[1+(convert(Int, (data[1+(p )]) )- 10)] );
					if _ic <= convert(Int, _indep_trans_keys[1+(_keys+1 )] )&& _ic >= convert(Int, _indep_trans_keys[1+(_keys )] )
						_trans = convert(UInt, _indep_indicies[1+(_inds + convert(Int, (_ic - convert(Int, _indep_trans_keys[1+(_keys )] )) ))] )
						
					else
						_trans = convert(UInt, _indep_index_defaults[1+(cs)] )
						
					end
					
				else
					_trans = convert(UInt, _indep_index_defaults[1+(cs)] )
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _indep_cond_targs[1+(_trans)] )
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= indep_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "1hello\n" );
m( "1HELLO\n" );
m( "1HeLLo\n" );
m( "2hello\n" );
m( "2HELLO\n" );
m( "2HeLLo\n" );
m( "3hello\n" );
m( "3HELLO\n" );
m( "3HeLLo\n" );
m( "4hello\n" );
m( "4HELLO\n" );
m( "4HeLLo\n" );
m( "5hello\n" );
m( "5HELLO\n" );
m( "5HeLLo\n" );
m( "6hello\n" );
m( "6HELLO\n" );
m( "6HeLLo\n" );
