const _scanner_key_offsets = Int16[0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0 , ]
const _scanner_trans_keys = UInt8[10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0 , ]
const _scanner_single_lengths = Int8[0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0 , ]
const _scanner_range_lengths = Int8[0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0 , ]
const _scanner_index_offsets = Int16[0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0 , ]
const _scanner_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _scanner_trans_offsets = Int16[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0 , ]
const _scanner_trans_lengths = Int8[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _scanner_cond_keys = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _scanner_cond_targs = Int8[12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 , ]
const _scanner_cond_actions = Int8[1, 2, 0, 0, 0, 1, 3, 0, 0, 0, 5, 4, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 13, 0, 0, 14, 0, 0, 0, 11, 13, 11, 0, 11, 0, 11, 0, 15, 0, 17, 16, 18, 16, 19, 20, 16, 21, 16, 22, 23, 16, 24, 25, 0, 16, 27, 26, 28, 0, 29, 16, 0, 31, 31, 0, 31, 31, 29, 30, 31, 31, 31, 31, 0, 30, 0, 0, 32, 16, 29, 0, 35, 35, 0, 35, 35, 0, 34, 33, 29, 0, 37, 37, 0, 37, 37, 34, 36, 39, 39, 39, 39, 0, 0, 0, 38, 29, 0, 35, 35, 0, 35, 35, 13, 33, 40, 16, 41, 16, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 42, 43, 16, 44, 45, 16, 1, 1, 1, 1, 4, 1, 1, 4, 4, 4, 8, 15, 16, 16, 16, 16, 16, 16, 26, 16, 30, 30, 16, 33, 36, 38, 33, 16, 16, 42, 42, 16, 16, 0 , ]
const _scanner_to_state_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _scanner_from_state_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _scanner_eof_trans_indexed = Int8[0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0 , ]
const _scanner_eof_trans_direct = Int16[0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0 , ]
const _scanner_nfa_targs = Int8[0, 0 , ]
const _scanner_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _scanner_nfa_push_actions = Int8[0, 0 , ]
const _scanner_nfa_pop_trans = Int8[0, 0 , ]
const scanner_start  = 12
const scanner_first_final  = 12
const scanner_error  = 0
const scanner_en_main  = 12
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	ts = 0;
	te = 0;
	act = 0;
	token = 0;
	
	cs = convert(Int, scanner_start )
	ts = 0
	te = 0
	act = 0
	_klen= 0
	;
	_keys = 0;
	_ckeys = 0;
	_cpc= 0
	;
	_trans= 0
	;
	_cond = 0;
	_have = 0;
	_cont = 1;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if p == eof 
				if _scanner_eof_trans_direct[1+(cs)]> 0 
					_trans = convert(UInt, _scanner_eof_trans_direct[1+(cs)] )- 1
					_cond = convert(UInt, _scanner_trans_offsets[1+(_trans)] )
					_have = 1
					
				end
				if _have == 0 
					
				end
				
			end
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				if _scanner_from_state_actions[1+(cs)] == 10 
					{
						ts = p
						
					}
					
				end
				_keys = _scanner_key_offsets[1+(cs)]
				_trans = convert(UInt, _scanner_index_offsets[1+(cs)] )
				_have = 0
				_klen = convert(Int, _scanner_single_lengths[1+(cs)] )
				if _klen > 0 
					_lower = 0;
					_mid = 0;
					_upper = 0;
					_lower = _keys
					_upper = _keys + _klen - 1
					while _upper >= _lower && _have == 0 
						_mid = _lower + ((_upper-_lower)>> 1)
						if (data[1+(p )])< _scanner_trans_keys[1+(_mid )]
							_upper = _mid - 1
							
						elseif (data[1+(p )])> _scanner_trans_keys[1+(_mid )]
							_lower = _mid + 1
							
						else
							_trans += convert(UInt, (_mid - _keys) )
							_have = 1
							
						end
						
					end
					if _have == 0 
						_keys += _klen
						_trans += convert(UInt, _klen )
						
					end
					
				end
				if _have == 0 
					_klen = convert(Int, _scanner_range_lengths[1+(cs)] )
					if _klen > 0 
						_lower = 0;
						_mid = 0;
						_upper = 0;
						_lower = _keys
						_upper = _keys + (_klen<<1)- 2
						while _have == 0 && _lower <= _upper 
							_mid = _lower + (((_upper-_lower)>> 1)& ~1)
							if (data[1+(p )])< _scanner_trans_keys[1+(_mid )]
								_upper = _mid - 2
								
							elseif (data[1+(p )])> _scanner_trans_keys[1+(_mid + 1 )]
								_lower = _mid + 2
								
							else
								_trans += convert(UInt, ((_mid - _keys)>>1) )
								_have = 1
								
							end
							
						end
						if _have == 0 
							_trans += convert(UInt, _klen )
							
						end
						
					end
					
				end
				_ckeys = _scanner_trans_offsets[1+(_trans)]
				_klen = convert(Int, _scanner_trans_lengths[1+(_trans)] )
				_cond = convert(UInt, _scanner_trans_offsets[1+(_trans)] )
				_have = 0
				_cpc = 0
				_lower = 0;
				_mid = 0;
				_upper = 0;
				_lower = _ckeys
				_upper = _ckeys + _klen - 1
				while _have == 0 && _lower <= _upper 
					_mid = _lower + ((_upper-_lower)>> 1)
					if _cpc < convert(Int, _scanner_cond_keys[1+(_mid )] )
						_upper = _mid - 1
						
					elseif _cpc > convert(Int, _scanner_cond_keys[1+(_mid )] )
						_lower = _mid + 1
						
					else
						_cond += convert(UInt, (_mid - _ckeys) )
						_have = 1
						
					end
					
				end
				if _have == 0 
					cs = 0
					_cont = 0
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _scanner_cond_targs[1+(_cond)] )
				if _scanner_cond_actions[1+(_cond)] == 12 
					{
						te = p+1
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 3 
					{
						te = p+1
						token = 193;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 2 
					{
						te = p+1
						token = 192;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 31 
					{
						te = p+1
						token = 194;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 35 
					{
						te = p+1
						token = 218;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 37 
					{
						te = p+1
						token = 219;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 39 
					{
						te = p+1
						token = 220;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 40 
					{
						te = p+1
						token = 197;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 41 
					{
						te = p+1
						token = 223;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 17 
					{
						te = p+1
						token = 224;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 19 
					{
						te = p+1
						token = 225;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 45 
					{
						te = p+1
						token = 226;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 21 
					{
						te = p+1
						token = 227;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 32 
					{
						te = p+1
						token = 228;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 18 
					{
						te = p+1
						token = 229;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 23 
					{
						te = p+1
						token = 230;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 25 
					{
						te = p+1
						token = 231;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 20 
					{
						te = p+1
						token = 232;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 43 
					{
						te = p+1
						token = 233;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 44 
					{
						te = p+1
						token = 234;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 22 
					{
						te = p+1
						token = 212;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 24 
					{
						te = p+1
						token = 213;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 27 
					{
						te = p+1
						token = 214;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 28 
					{
						te = p+1
						token = 215;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 5 
					{
						te = p+1
						token = 240;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 11 
					{
						te = p+1
						token = convert( Int, ( data[ts+1] ) ) 
						;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 6 
					{
						te = p+1
						token = 242;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 7 
					{
						te = p+1
						token = 242;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 42 
					{
						te = p
						p = p - 1
						token = 195;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 30 
					{
						te = p
						p = p - 1
						token = 194;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 33 
					{
						te = p
						p = p - 1
						token = 218;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 36 
					{
						te = p
						p = p - 1
						token = 219;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 38 
					{
						te = p
						p = p - 1
						token = 220;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 26 
					{
						te = p
						p = p - 1
						token = 211;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 16 
					{
						te = p
						p = p - 1
						token = convert( Int, ( data[ts+1] ) ) 
						;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 15 
					{
						te = p
						p = p - 1
						token = 241;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 8 
					{
						p = ((te))-1
						token = 218;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 4 
					{
						p = ((te))-1
						token = convert( Int, ( data[ts+1] ) ) 
						;
						print( "<" );
						print( token );
						print( "> " );
						print( data[(ts+1) : (te)] )
						print( "\n" );
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 1 
					{
						if act  == 0 
							{
								cs = 0
								
							}
							
						elseif act  == 3 
							p = ((te))-1
							token = 195;
							print( "<" );
							print( token );
							print( "> " );
							print( data[(ts+1) : (te)] )
							print( "\n" );
							
						elseif act  == 4 
							p = ((te))-1
							token = 194;
							print( "<" );
							print( token );
							print( "> " );
							print( data[(ts+1) : (te)] )
							print( "\n" );
							
						elseif act  == 5 
							p = ((te))-1
							token = 218;
							print( "<" );
							print( token );
							print( "> " );
							print( data[(ts+1) : (te)] )
							print( "\n" );
							
						elseif act  == 6 
							p = ((te))-1
							token = 219;
							print( "<" );
							print( token );
							print( "> " );
							print( data[(ts+1) : (te)] )
							print( "\n" );
							
						end
						
					}
					
					
				elseif _scanner_cond_actions[1+(_cond)] == 14 
					{
						te = p+1
						
					}
					{
						act = 3
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 29 
					{
						te = p+1
						
					}
					{
						act = 4
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 13 
					{
						te = p+1
						
					}
					{
						act = 5
						
					}
					
				elseif _scanner_cond_actions[1+(_cond)] == 34 
					{
						te = p+1
						
					}
					{
						act = 6
						
					}
					
				end
				if _scanner_to_state_actions[1+(cs)] == 9 
					{
						ts = 0
						
					}
					{
						act = 0
						
					}
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= scanner_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22" );
m( "'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/" );
m( "'\n'\n" );
