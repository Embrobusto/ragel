#include <string.h>
#include <stdio.h>

int i ;
int j ;
int k ;





static const char  _foo_trans_keys [] = { 1, 0, 2, 2, 2, 2, 2, 2, 3, 4, 3, 4, 3, 4, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0 ,  };
static const char  _foo_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 ,  };
static const char  _foo_indicies [] = { 0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 ,  };
static const char  _foo_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0 ,  };
static const char  _foo_cond_targs [] = { 2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0 ,  };
static const char  _foo_cond_actions [] = { 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 15;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) foo_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		int _trans = 0;
		unsigned int _cond = 0;
		const char  *_keys;
		const char  *_inds;
		int _cpc;
		int _nbreak;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _foo_trans_keys + (cs<<1);
		_inds = _foo_indicies + _foo_index_offsets[cs];
		if ( ((*( p  ))
		)<= 99 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _foo_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _foo_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _foo_index_defaults[cs];
		}
		
		
		_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
		_cpc = 0;
		switch ( _foo_trans_cond_spaces[_trans] ) {
			case 1 :
			if ( (j != 0) )
			_cpc += 1;
			
			
			break;
			case 4 :
			if ( (j != 0) )
			_cpc += 1;
			
			if ( (k != 0) )
			_cpc += 2;
			
			
			break;
			case 5 :
			if ( (i != 0) )
			_cpc += 1;
			
			if ( (j != 0) )
			_cpc += 2;
			
			if ( (k != 0) )
			_cpc += 4;
			
			
			break;
			
		}
		_cond += ( unsigned int  ) _cpc;
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _foo_cond_targs[_cond];
		if ( _foo_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_nbreak = 0;
		switch ( _foo_cond_actions[_cond] ) {
			case 8 :
			{
				printf( "%s", "  one\n" );
				
			}
			
			break;
			case 4 :
			{
				printf( "%s", "  two\n" );
				
			}
			
			break;
			case 6 :
			{
				printf( "%s", "  three\n" );
				
			}
			
			break;
			case 1 :
			{
				if ( (((*( p  ))
				)) == 48 )
				{
					i = 0;
					
				} 
				else {
					i = 1;
					
				}
				
			}
			
			break;
			case 2 :
			{
				if ( (((*( p  ))
				)) == 48 )
				{
					j = 0;
					
				} 
				else {
					j = 1;
					
				}
				
			}
			
			break;
			case 3 :
			{
				if ( (((*( p  ))
				)) == 48 )
				{
					k = 0;
					
				} 
				else {
					k = 1;
					
				}
				
			}
			
			break;
			case 5 :
			{
				{
					p += 1;
					_nbreak = 1;
					
				}
				
			}
			
			break;
			case 9 :
			{
				printf( "%s", "  one\n" );
				
			}
			{
				printf( "%s", "  two\n" );
				
			}
			
			break;
			case 10 :
			{
				printf( "%s", "  one\n" );
				
			}
			{
				printf( "%s", "  three\n" );
				
			}
			
			break;
			case 7 :
			{
				printf( "%s", "  two\n" );
				
			}
			{
				printf( "%s", "  three\n" );
				
			}
			
			break;
			case 11 :
			{
				printf( "%s", "  one\n" );
				
			}
			{
				printf( "%s", "  two\n" );
				
			}
			{
				printf( "%s", "  three\n" );
				
			}
			
			break;
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= foo_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"000abc\n",
	"100abc\n",
	"010abc\n",
	"110abc\n",
	"001abc\n",
	"101abc\n",
	"011abc\n",
	"111abc\n",
};

int inplen = 8;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

