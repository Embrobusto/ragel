class next2_java
{
	int target ;
	int last ;
	
	
	
	
	
	private static byte  _next2_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 0 ,  };
	private static char  _next2_trans_keys [] = { 1, 0, 15, 15, 13, 13, 8, 8, 13, 13, 11, 11, 6, 6, 5, 5, 9, 9, 8, 8, 6, 6, 12, 12, 14, 14, 9, 9, 12, 12, 7, 7, 10, 10, 6, 6, 6, 6, 0, 4, 1, 0, 1, 0, 1, 0, 1, 0, 0,  };
	private static byte  _next2_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 1, 1, 7, 1, 1, 1, 1, 1, 8, 9, 1, 1, 10, 11, 12, 13, 1, 14, 15, 0 ,  };
	private static byte  _next2_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 23, 23, 23, 0 ,  };
	private static byte  _next2_indicies [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19, 20, 21, 0 ,  };
	private static byte  _next2_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _next2_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _next2_cond_targs [] = { 19, 0, 3, 4, 5, 6, 7, 20, 9, 10, 21, 12, 13, 22, 15, 16, 17, 18, 23, 19, 19, 1, 0 ,  };
	private static byte  _next2_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 5, 7, 9, 11, 0 ,  };
	private static byte  _next2_nfa_targs [] = { 0, 0 ,  };
	private static byte  _next2_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _next2_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _next2_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  next2_start  = 19;
	private static int  next2_first_final  = 19;
	private static int  next2_error  = 0;
	private static int  next2_en_unused  = 2;
	private static int  next2_en_one  = 8;
	private static int  next2_en_two  = 11;
	private static int  next2_en_three  = 14;
	private static int  next2_en_main  = 19;
	int cs;
	
	void init()
	{
		{
			cs = (int)next2_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _trans = 0;
			int _have = 0;
			int _cont = 1;
			int _acts;
			int _nacts;
			int _keys;
			int _inds;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = (cs<<1) ;
						_inds = _next2_index_offsets[cs] ;
						if ( ( data[p ]) <= 120 && ( data[p ]) >= 10  )
						{
							int _ic = (int)_next2_char_class[(int)( data[p ]) - 10];
							if ( _ic <= (int)_next2_trans_keys[_keys+1 ]&& _ic >= (int)_next2_trans_keys[_keys ] )
							_trans = (int )_next2_indicies[_inds + (int)( _ic - (int)_next2_trans_keys[_keys ])  ];
							
							else
							_trans = (int )_next2_index_defaults[cs];
							
							
						}
						
						else
						{
							_trans = (int )_next2_index_defaults[cs];
							
						}
						
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_next2_cond_targs[_trans];
						if ( _next2_cond_actions[_trans] != 0  )
						{
							_acts = _next2_cond_actions[_trans] ;
							_nacts = (int )_next2_actions[_acts ];
							_acts += 1;
							while ( _nacts > 0  )
							{
								switch ( _next2_actions[_acts ] ) {
									case 0 :
									{
										System.out.print( "one\n" );
										target = 19;
										{
											cs = (target);
											
										}
										
									}
									
									break;
									case 1 :
									{
										System.out.print( "two\n" );
										target = 19;
										{
											cs = (target);
											
										}
										
									}
									
									break;
									case 2 :
									{
										System.out.print( "three\n" );
										target = 19;
										{
											cs = (target);
											
										}
										
									}
									
									break;
									case 3 :
									{
										target = 8;
										{
											cs = (target);
											
										}
										last = 1;
										
									}
									
									break;
									case 4 :
									{
										target = 11;
										{
											cs = (target);
											
										}
										last = 2;
										
									}
									
									break;
									case 5 :
									{
										if ( last == 2 )
										{
											target = 14;
											{
												cs = (target);
												
											}
											
										} 
										last = 3;
										
									}
									
									break;
									
								}
								_nacts -= 1;
								_acts += 1;
								
							}
							
							
						}
						
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= next2_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"1one3x2two3three\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		next2_java machine = new next2_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
