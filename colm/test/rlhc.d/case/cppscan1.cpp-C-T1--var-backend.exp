#include "cppscan1.h"

#ifdef PERF_TEST

/* Calibrated to 1s on yoho. */
#define perf_iters ( 158428ll * S )

int _perf_dummy = 0;
#define perf_printf(...) ( _perf_dummy += 1 )
#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )

#else

#define perf_printf(...) printf( __VA_ARGS__ )
#define perf_loop

#endif



static const short  _Scanner_key_offsets [] = { 0, 0, 3, 6, 8, 11, 12, 16, 18, 24, 25, 26, 59, 92, 125, 158, 191, 224, 257, 290, 323, 356, 389, 423, 456, 488, 521, 554, 592, 629, 662, 699, 732, 765, 796, 829, 862, 893, 926, 959, 992, 1027, 1060, 1096, 1132, 1165, 1198, 1235, 1271, 1304, 1343, 1379, 1412, 1445, 1478, 1511, 1544, 1577, 1610, 1643, 1676, 1709, 1742, 0 ,  };
static const char  _Scanner_trans_keys [] = { 10, 34, 92, 10, 39, 92, 10, 42, 10, 42, 47, 10, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 10, 10, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 62, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 76, 94, 95, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 69, 76, 85, 94, 95, 101, 108, 117, 120, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 69, 70, 76, 94, 95, 101, 102, 108, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 69, 76, 85, 94, 95, 101, 108, 117, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 94, 95, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 94, 95, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 70, 76, 94, 95, 102, 108, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 85, 94, 95, 108, 117, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 85, 94, 95, 108, 117, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 69, 76, 85, 94, 95, 101, 108, 117, 124, 35, 44, 48, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 85, 94, 95, 108, 117, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 58, 61, 76, 85, 94, 95, 108, 117, 124, 35, 44, 48, 57, 59, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 85, 94, 95, 108, 117, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0, 10, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 0 ,  };
static const char  _Scanner_single_lengths [] = { 0, 3, 3, 2, 3, 1, 2, 0, 0, 1, 1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 19, 18, 19, 19, 24, 23, 19, 23, 19, 19, 17, 19, 19, 17, 19, 19, 19, 21, 19, 22, 22, 19, 19, 23, 22, 19, 21, 22, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0 ,  };
static const char  _Scanner_range_lengths [] = { 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0 ,  };
static const short  _Scanner_index_offsets [] = { 0, 0, 4, 8, 11, 15, 17, 21, 23, 27, 29, 31, 58, 85, 112, 139, 166, 193, 220, 247, 274, 301, 328, 356, 383, 409, 436, 463, 495, 526, 553, 584, 611, 638, 663, 690, 717, 742, 769, 796, 823, 852, 879, 909, 939, 966, 993, 1024, 1054, 1081, 1112, 1142, 1169, 1196, 1223, 1250, 1277, 1304, 1331, 1358, 1385, 1412, 1439, 0 ,  };
static const char  _Scanner_trans_cond_spaces [] = {};
static const short  _Scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 0 ,  };
static const char  _Scanner_trans_lengths [] = {};
static const char  _Scanner_cond_keys [] = {};
static const char  _Scanner_cond_targs [] = { 0, 13, 10, 1, 0, 18, 9, 2, 3, 4, 3, 3, 4, 11, 3, 11, 5, 7, 7, 40, 0, 40, 0, 49, 49, 49, 0, 2, 2, 1, 1, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 62, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 61, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 17, 2, 19, 20, 22, 24, 26, 27, 29, 60, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 59, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 21, 22, 24, 26, 27, 29, 58, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 23, 24, 26, 27, 29, 55, 56, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 25, 20, 22, 53, 26, 29, 31, 36, 34, 33, 37, 14, 28, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 3, 20, 22, 24, 5, 27, 29, 52, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 28, 26, 29, 31, 6, 42, 42, 34, 33, 6, 42, 42, 8, 37, 14, 46, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 6, 41, 41, 34, 33, 6, 41, 41, 37, 14, 28, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 45, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 28, 26, 29, 31, 6, 42, 42, 34, 33, 6, 42, 42, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 32, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 34, 33, 37, 14, 33, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 35, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 34, 33, 37, 14, 33, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 38, 36, 34, 33, 39, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 41, 41, 34, 33, 41, 41, 37, 14, 40, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 43, 43, 34, 33, 43, 43, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 44, 44, 34, 33, 44, 44, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 28, 26, 29, 31, 6, 47, 47, 34, 33, 6, 47, 47, 37, 14, 46, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 48, 48, 34, 33, 48, 48, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 50, 50, 34, 33, 50, 50, 37, 14, 49, 14, 49, 33, 14, 49, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 51, 51, 34, 33, 51, 51, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 54, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 57, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 11, 11, 12, 1, 15, 16, 2, 19, 20, 22, 24, 26, 27, 29, 31, 36, 34, 33, 37, 14, 30, 14, 33, 14, 33, 14, 11, 0 ,  };
static const short  _Scanner_cond_actions [] = { 0, 1, 1, 1, 0, 1, 1, 1, 3, 2, 2, 3, 2, 2, 2, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 4, 1, 4, 1, 5, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 10, 11, 12, 12, 12, 1, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 22, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 21, 28, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 27, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 10, 11, 12, 12, 12, 12, 12, 12, 1, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 34, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 33, 10, 11, 12, 12, 12, 12, 12, 12, 12, 1, 12, 13, 12, 12, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 39, 10, 11, 12, 12, 12, 12, 12, 1, 12, 12, 44, 13, 12, 12, 12, 12, 12, 12, 12, 1, 12, 12, 12, 12, 12, 9, 47, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 46, 53, 54, 55, 55, 55, 55, 55, 56, 55, 55, 55, 57, 55, 55, 58, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 52, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 1, 64, 63, 63, 1, 1, 1, 63, 63, 1, 1, 1, 1, 63, 63, 1, 63, 63, 63, 63, 63, 60, 67, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 1, 1, 1, 69, 69, 1, 1, 1, 69, 69, 1, 69, 69, 69, 69, 69, 66, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 1, 64, 63, 63, 1, 1, 1, 63, 63, 1, 1, 1, 63, 63, 1, 63, 63, 63, 63, 63, 60, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 73, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 72, 79, 80, 81, 81, 81, 81, 81, 81, 81, 81, 81, 82, 81, 81, 81, 1, 81, 81, 1, 81, 1, 81, 1, 81, 78, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 85, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 84, 79, 80, 81, 1, 81, 81, 1, 81, 81, 81, 81, 82, 81, 81, 81, 1, 81, 81, 1, 81, 1, 81, 1, 81, 78, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 1, 12, 12, 12, 1, 12, 12, 12, 12, 12, 12, 12, 9, 91, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 90, 97, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 96, 67, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 1, 1, 69, 69, 1, 1, 69, 69, 1, 69, 69, 69, 69, 69, 66, 67, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 66, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 63, 63, 1, 1, 63, 63, 1, 1, 63, 63, 63, 63, 63, 63, 63, 63, 60, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 63, 63, 1, 1, 63, 63, 1, 1, 63, 63, 63, 63, 63, 63, 63, 63, 60, 61, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 60, 103, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 102, 109, 110, 111, 111, 111, 111, 111, 111, 111, 111, 1, 112, 111, 111, 1, 1, 1, 111, 111, 1, 1, 1, 111, 111, 1, 111, 111, 111, 111, 111, 108, 109, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111, 111, 1, 1, 111, 111, 1, 1, 111, 111, 111, 111, 111, 111, 111, 111, 108, 109, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 108, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 117, 117, 1, 1, 117, 117, 1, 1, 117, 117, 1, 117, 1, 117, 117, 1, 117, 117, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 117, 117, 117, 1, 1, 117, 117, 1, 1, 117, 117, 117, 117, 117, 117, 117, 117, 114, 115, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 114, 121, 122, 123, 123, 123, 123, 123, 123, 123, 123, 123, 124, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 120, 127, 128, 129, 129, 129, 129, 129, 129, 129, 129, 44, 130, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 126, 133, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 132, 139, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 138, 145, 146, 147, 147, 147, 147, 147, 1, 147, 147, 147, 148, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 144, 151, 152, 153, 153, 153, 153, 153, 153, 153, 153, 153, 154, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 150, 157, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 156, 163, 164, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 162, 169, 170, 171, 171, 171, 171, 171, 171, 171, 171, 171, 172, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 168, 175, 176, 177, 177, 177, 177, 177, 177, 177, 177, 177, 178, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 174, 181, 182, 183, 183, 183, 183, 183, 183, 183, 183, 183, 184, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 180, 0 ,  };
static const short  _Scanner_eof_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 20, 26, 8, 8, 32, 8, 38, 8, 45, 51, 59, 65, 8, 59, 8, 71, 77, 8, 83, 77, 8, 89, 95, 65, 65, 59, 59, 59, 101, 107, 107, 107, 113, 113, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173, 179, 0 ,  };
static const char  _Scanner_nfa_targs [] = { 0, 0 ,  };
static const char  _Scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Scanner_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Scanner_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Scanner_start  = 11;
static const int  Scanner_first_final  = 11;
static const int  Scanner_error  = 0;
static const int  Scanner_en_main  = 11;
void Scanner::init( )
{
}

int Scanner::execute( const char *data, int len )
{
	perf_loop
	{
		Scanner *fsm = this;
		
		/* A count of the number of characters in 
		* a token. Used for % sequences. */
		count = 0;
		line = 1;
		col = 1;
		
		
		{
			fsm->cs = ( int ) Scanner_start;
		}
		const char *p = data;
		const char *pe = data + len;
		const char *eof = pe;
		
		
		{
			int _klen;
			const char  *_keys;
			const char  *_ckeys;
			int _cpc;
			unsigned int _trans;
			unsigned int _cond = 0;
			unsigned int _have = 0;
			unsigned int _cont = 1;
			while ( _cont == 1  )
			{
			
				if ( fsm->cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( p == eof  )
					{
						if ( _have == 0  )
						{
							switch ( _Scanner_eof_actions[fsm->cs] ) {
								case 26 :
								{
									fsm->token( TK_Slit ); 
								}
								
								break;
								case 14 :
								{
									fsm->token( TK_Dlit ); 
								}
								
								break;
								case 77 :
								{
									fsm->token( TK_Id ); 
								}
								
								break;
								case 59 :
								{
									fsm->token( TK_IntegerDecimal ); 
								}
								
								break;
								case 107 :
								{
									fsm->token( TK_IntegerOctal ); 
								}
								
								break;
								case 113 :
								{
									fsm->token( TK_IntegerHex ); 
								}
								
								break;
								case 65 :
								{
									fsm->token( TK_Float ); 
								}
								
								break;
								case 8 :
								{
									fsm->token( fsm->tokBuf.data[0] ); 
								}
								
								break;
								case 101 :
								{
									fsm->token( TK_NameSep );
								}
								
								break;
								case 71 :
								{
									fsm->token( TK_EqualsEquals );
								}
								
								break;
								case 179 :
								{
									fsm->token( TK_NotEquals );
								}
								
								break;
								case 20 :
								{
									fsm->token( TK_AndAnd );
								}
								
								break;
								case 95 :
								{
									fsm->token( TK_OrOr );
								}
								
								break;
								case 161 :
								{
									fsm->token( TK_MultAssign );
								}
								
								break;
								case 173 :
								{
									fsm->token( TK_PercentAssign );
								}
								
								break;
								case 155 :
								{
									fsm->token( TK_PlusAssign );
								}
								
								break;
								case 137 :
								{
									fsm->token( TK_MinusAssign );
								}
								
								break;
								case 167 :
								{
									fsm->token( TK_AmpAssign );
								}
								
								break;
								case 83 :
								{
									fsm->token( TK_CaretAssign );
								}
								
								break;
								case 89 :
								{
									fsm->token( TK_BarAssign );
								}
								
								break;
								case 32 :
								{
									fsm->token( TK_PlusPlus );
								}
								
								break;
								case 38 :
								{
									fsm->token( TK_MinusMinus );
								}
								
								break;
								case 143 :
								{
									fsm->token( TK_Arrow );
								}
								
								break;
								case 149 :
								{
									fsm->token( TK_ArrowStar );
								}
								
								break;
								case 45 :
								{
									fsm->token( TK_DotStar );
								}
								
								break;
								case 119 :
								{
									fsm->token( TK_DivAssign );
								}
								
								break;
								case 125 :
								{
									fsm->token('.'); fsm->buf('.'); fsm->token('.');
								}
								
								break;
								case 131 :
								{
									fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
								}
								
								break;
								case 51 :
								{
									fsm->buf('/'); fsm->token( '/' ); 
								}
								
								break;
								
							}
						}
						
					}
					
					
					if ( _have == 0  )
					_cont = 0;
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _Scanner_trans_keys + _Scanner_key_offsets[fsm->cs];
						_trans = ( unsigned int  ) _Scanner_index_offsets[fsm->cs];
						_have = 0;
						_klen = ( int ) _Scanner_single_lengths[fsm->cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower)>> 1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 1;
								
								else if ( ((*( p  ))
								)> (*( _mid  ))
								)
								_lower = _mid + 1;
								
								else
								{
									_trans += ( unsigned int  ) (_mid - _keys);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += ( unsigned int  ) _klen;
							}
							
						}
						
						
						if ( _have == 0  )
						{
							_klen = ( int ) _Scanner_range_lengths[fsm->cs];
							if ( _klen > 0  )
							{
								const char  *_lower;
								const char  *_mid;
								const char  *_upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1)- 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower)>> 1)& ~1);
									if ( ((*( p  ))
									)< (*( _mid  ))
									)
									_upper = _mid - 2;
									
									else if ( ((*( p  ))
									)> (*( _mid + 1  ))
									)
									_lower = _mid + 2;
									
									else
									{
										_trans += ( unsigned int  ) ((_mid - _keys)>>1);
										_have = 1;
									}
									
								}
								
								if ( _have == 0  )
								_trans += ( unsigned int  ) _klen;
								
							}
							
						}
						
						
						_ckeys = _Scanner_cond_keys + _Scanner_trans_offsets[_trans];
						_klen = ( int ) _Scanner_trans_lengths[_trans];
						_cond = ( unsigned int  ) _Scanner_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower)>> 1);
								if ( _cpc < ( int ) (*( _mid  ))
								)
								_upper = _mid - 1;
								
								else if ( _cpc > ( int ) (*( _mid  ))
								)
								_lower = _mid + 1;
								
								else
								{
									_cond += ( unsigned int  ) (_mid - _ckeys);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							{
								fsm->cs = 0;
								_cont = 0;
							}
							
						}
					}
					
					if ( _cont == 1  )
					{
						fsm->cs = ( int ) _Scanner_cond_targs[_cond];
						switch ( _Scanner_cond_actions[_cond] ) {
							case 44 :
							{
								fsm->col += 1; 
							}
							
							break;
							case 3 :
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 2 :
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 4 :
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 1 :
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 7 :
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 58 :
							{
								fsm->buf('/');fsm->buf((((*( p  ))
								)));
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 56 :
							{
								fsm->pass('/'); fsm->pass('*');
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 57 :
							{
								fsm->pass('/'); fsm->pass('/');
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 5 :
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 29 :
							{
								fsm->token( TK_Slit ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 27 :
							{
								fsm->token( TK_Slit ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 31 :
							{
								fsm->token( TK_Slit ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 28 :
							{
								fsm->token( TK_Slit ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 17 :
							{
								fsm->token( TK_Dlit ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 15 :
							{
								fsm->token( TK_Dlit ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 19 :
							{
								fsm->token( TK_Dlit ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 16 :
							{
								fsm->token( TK_Dlit ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 80 :
							{
								fsm->token( TK_Id ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 78 :
							{
								fsm->token( TK_Id ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 82 :
							{
								fsm->token( TK_Id ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 79 :
							{
								fsm->token( TK_Id ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 62 :
							{
								fsm->token( TK_IntegerDecimal ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 60 :
							{
								fsm->token( TK_IntegerDecimal ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 64 :
							{
								fsm->token( TK_IntegerDecimal ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 61 :
							{
								fsm->token( TK_IntegerDecimal ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 110 :
							{
								fsm->token( TK_IntegerOctal ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 108 :
							{
								fsm->token( TK_IntegerOctal ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 112 :
							{
								fsm->token( TK_IntegerOctal ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 109 :
							{
								fsm->token( TK_IntegerOctal ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 116 :
							{
								fsm->token( TK_IntegerHex ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 114 :
							{
								fsm->token( TK_IntegerHex ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 118 :
							{
								fsm->token( TK_IntegerHex ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 115 :
							{
								fsm->token( TK_IntegerHex ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 68 :
							{
								fsm->token( TK_Float ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 66 :
							{
								fsm->token( TK_Float ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 70 :
							{
								fsm->token( TK_Float ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 67 :
							{
								fsm->token( TK_Float ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 11 :
							{
								fsm->token( fsm->tokBuf.data[0] ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 9 :
							{
								fsm->token( fsm->tokBuf.data[0] ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 13 :
							{
								fsm->token( fsm->tokBuf.data[0] ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 10 :
							{
								fsm->token( fsm->tokBuf.data[0] ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 6 :
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 104 :
							{
								fsm->token( TK_NameSep );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 102 :
							{
								fsm->token( TK_NameSep );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 106 :
							{
								fsm->token( TK_NameSep );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 103 :
							{
								fsm->token( TK_NameSep );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 74 :
							{
								fsm->token( TK_EqualsEquals );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 72 :
							{
								fsm->token( TK_EqualsEquals );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 76 :
							{
								fsm->token( TK_EqualsEquals );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 73 :
							{
								fsm->token( TK_EqualsEquals );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 182 :
							{
								fsm->token( TK_NotEquals );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 180 :
							{
								fsm->token( TK_NotEquals );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 184 :
							{
								fsm->token( TK_NotEquals );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 181 :
							{
								fsm->token( TK_NotEquals );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 23 :
							{
								fsm->token( TK_AndAnd );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 21 :
							{
								fsm->token( TK_AndAnd );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 25 :
							{
								fsm->token( TK_AndAnd );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 22 :
							{
								fsm->token( TK_AndAnd );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 98 :
							{
								fsm->token( TK_OrOr );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 96 :
							{
								fsm->token( TK_OrOr );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 100 :
							{
								fsm->token( TK_OrOr );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 97 :
							{
								fsm->token( TK_OrOr );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 164 :
							{
								fsm->token( TK_MultAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 162 :
							{
								fsm->token( TK_MultAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 166 :
							{
								fsm->token( TK_MultAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 163 :
							{
								fsm->token( TK_MultAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 176 :
							{
								fsm->token( TK_PercentAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 174 :
							{
								fsm->token( TK_PercentAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 178 :
							{
								fsm->token( TK_PercentAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 175 :
							{
								fsm->token( TK_PercentAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 158 :
							{
								fsm->token( TK_PlusAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 156 :
							{
								fsm->token( TK_PlusAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 160 :
							{
								fsm->token( TK_PlusAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 157 :
							{
								fsm->token( TK_PlusAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 140 :
							{
								fsm->token( TK_MinusAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 138 :
							{
								fsm->token( TK_MinusAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 142 :
							{
								fsm->token( TK_MinusAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 139 :
							{
								fsm->token( TK_MinusAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 170 :
							{
								fsm->token( TK_AmpAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 168 :
							{
								fsm->token( TK_AmpAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 172 :
							{
								fsm->token( TK_AmpAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 169 :
							{
								fsm->token( TK_AmpAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 86 :
							{
								fsm->token( TK_CaretAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 84 :
							{
								fsm->token( TK_CaretAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 88 :
							{
								fsm->token( TK_CaretAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 85 :
							{
								fsm->token( TK_CaretAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 92 :
							{
								fsm->token( TK_BarAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 90 :
							{
								fsm->token( TK_BarAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 94 :
							{
								fsm->token( TK_BarAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 91 :
							{
								fsm->token( TK_BarAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 35 :
							{
								fsm->token( TK_PlusPlus );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 33 :
							{
								fsm->token( TK_PlusPlus );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 37 :
							{
								fsm->token( TK_PlusPlus );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 34 :
							{
								fsm->token( TK_PlusPlus );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 41 :
							{
								fsm->token( TK_MinusMinus );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 39 :
							{
								fsm->token( TK_MinusMinus );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 43 :
							{
								fsm->token( TK_MinusMinus );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 40 :
							{
								fsm->token( TK_MinusMinus );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 146 :
							{
								fsm->token( TK_Arrow );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 144 :
							{
								fsm->token( TK_Arrow );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 148 :
							{
								fsm->token( TK_Arrow );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 145 :
							{
								fsm->token( TK_Arrow );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 152 :
							{
								fsm->token( TK_ArrowStar );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 150 :
							{
								fsm->token( TK_ArrowStar );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 154 :
							{
								fsm->token( TK_ArrowStar );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 151 :
							{
								fsm->token( TK_ArrowStar );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 48 :
							{
								fsm->token( TK_DotStar );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 46 :
							{
								fsm->token( TK_DotStar );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 50 :
							{
								fsm->token( TK_DotStar );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 47 :
							{
								fsm->token( TK_DotStar );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 122 :
							{
								fsm->token( TK_DivAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 120 :
							{
								fsm->token( TK_DivAssign );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 124 :
							{
								fsm->token( TK_DivAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 121 :
							{
								fsm->token( TK_DivAssign );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 128 :
							{
								fsm->token('.'); fsm->buf('.'); fsm->token('.');
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 126 :
							{
								fsm->token('.'); fsm->buf('.'); fsm->token('.');
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 130 :
							{
								fsm->token('.'); fsm->buf('.'); fsm->token('.');
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 127 :
							{
								fsm->token('.'); fsm->buf('.'); fsm->token('.');
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 134 :
							{
								fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 132 :
							{
								fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 136 :
							{
								fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 133 :
							{
								fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 54 :
							{
								fsm->buf('/'); fsm->token( '/' ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->line += 1; fsm->col = 1; 
							}
							
							break;
							case 52 :
							{
								fsm->buf('/'); fsm->token( '/' ); 
							}
							{
								fsm->pass((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 53 :
							{
								fsm->buf('/'); fsm->token( '/' ); 
							}
							{
								fsm->nonTokBuf.append(0);
								#ifndef PERF_TEST
								cout << fsm->nonTokBuf.data;
								#endif
								fsm->nonTokBuf.clear();
								
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 30 :
							{
								fsm->token( TK_Slit ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 18 :
							{
								fsm->token( TK_Dlit ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 81 :
							{
								fsm->token( TK_Id ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 63 :
							{
								fsm->token( TK_IntegerDecimal ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 111 :
							{
								fsm->token( TK_IntegerOctal ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 117 :
							{
								fsm->token( TK_IntegerHex ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 69 :
							{
								fsm->token( TK_Float ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 12 :
							{
								fsm->token( fsm->tokBuf.data[0] ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 105 :
							{
								fsm->token( TK_NameSep );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 75 :
							{
								fsm->token( TK_EqualsEquals );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 183 :
							{
								fsm->token( TK_NotEquals );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 24 :
							{
								fsm->token( TK_AndAnd );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 99 :
							{
								fsm->token( TK_OrOr );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 165 :
							{
								fsm->token( TK_MultAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 177 :
							{
								fsm->token( TK_PercentAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 159 :
							{
								fsm->token( TK_PlusAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 141 :
							{
								fsm->token( TK_MinusAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 171 :
							{
								fsm->token( TK_AmpAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 87 :
							{
								fsm->token( TK_CaretAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 93 :
							{
								fsm->token( TK_BarAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 36 :
							{
								fsm->token( TK_PlusPlus );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 42 :
							{
								fsm->token( TK_MinusMinus );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 147 :
							{
								fsm->token( TK_Arrow );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 153 :
							{
								fsm->token( TK_ArrowStar );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 49 :
							{
								fsm->token( TK_DotStar );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 123 :
							{
								fsm->token( TK_DivAssign );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 129 :
							{
								fsm->token('.'); fsm->buf('.'); fsm->token('.');
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 135 :
							{
								fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							case 55 :
							{
								fsm->buf('/'); fsm->token( '/' ); 
							}
							{
								fsm->tokStart = fsm->col; 
							}
							{
								fsm->buf((((*( p  ))
								))); 
							}
							{
								fsm->col += 1; 
							}
							
							break;
							
						}
						if ( fsm->cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
					}
				}
				
			}
			
		}
	}
	
	if ( cs == Scanner_error )
	return -1;
	if ( cs >= Scanner_first_final )
	return 1;
	return 0;
}

int Scanner::finish( )
{
	if ( cs == Scanner_error )
	return -1;
	if ( cs >= Scanner_first_final )
	return 1;
	return 0;
}

void Scanner::token( int id )
{
	/* Leader. */
	if ( nonTokBuf.length > 0 ) {
		nonTokBuf.append(0);
		#ifndef PERF_TEST
		cout << nonTokBuf.data;
		#endif
		nonTokBuf.clear();
	}
	
	/* Token data. */
	tokBuf.append(0);
	#ifndef PERF_TEST
	cout << '<' << id << '>' << tokBuf.data;
	#endif
	tokBuf.clear();
}

void Buffer::empty()
{
	if ( data != 0 ) {
		free( data );
		
		data = 0;
		length = 0;
		allocated = 0;
	}
}

void Buffer::upAllocate( int len )
{
	if ( data == 0 )
	data = (char*) malloc( len );
	else
	data = (char*) realloc( data, len );
	allocated = len;
}

void test( const char *buf )
{
	Scanner scanner(cout);
	scanner.execute( buf, strlen(buf) );
	
	/* The last token is ignored (because there is no next token). Send
	* trailing null to force the last token into whitespace. */
	char eof = 0;
	if ( scanner.execute( &eof, 1 ) <= 0 ) {
		#ifndef PERF_TEST
		cerr << "cppscan: scan failed" << endl;
		#endif
		return;
	}
	#ifndef PERF_TEST
	cout.flush();
	#endif
}

int main()
{
	test( 
	"/*\n"
	" *  Copyright \n"
	" */\n"
	"\n"
	"/* Construct an fsmmachine from a graph. */\n"
	"RedFsmAp::RedFsmAp( FsmAp *graph, bool complete )\n"
	":\n"
	"	graph(graph),\n"
	"{\n"
	"	assert( sizeof(RedTransAp) <= sizeof(TransAp) );\n"
	"\n"
	"	reduceMachine();\n"
	"}\n"
	"\n"
	"{\n"
	"	/* Get the transition that we want to extend. */\n"
	"	RedTransAp *extendTrans = list[pos].value;\n"
	"\n"
	"	/* Look ahead in the transition list. */\n"
	"	for ( int next = pos + 1; next < list.length(); pos++, next++ ) {\n"
	"		if ( ! keyOps->eq( list[pos].highKey, nextKey ) )\n"
	"			break;\n"
	"	}\n"
	"	return false;\n"
	"}\n"
	"\n" );
	
	test( 
	"->*\n"
	".*\n"
	"/*\"*/\n"
	"\"/*\"\n"
	"L'\"'\n"
	"L\"'\"\n" );
	
	return 0;
}

