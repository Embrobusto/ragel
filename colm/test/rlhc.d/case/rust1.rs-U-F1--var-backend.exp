static _atoi_trans_keys: [u8 ; 12] = [ 1, 0, 0, 3, 3, 3, 1, 3, 1, 0, 0 , 0 ];
static _atoi_char_class: [i8 ; 15] = [ 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 , 0 ];
static _atoi_index_offsets: [i8 ; 7] = [ 0, 0, 4, 5, 8, 0 , 0 ];
static _atoi_indicies: [i8 ; 10] = [ 0, 1, 1, 2, 2, 3, 1, 2, 0 , 0 ];
static _atoi_index_defaults: [i8 ; 7] = [ 0, 1, 1, 1, 1, 0 , 0 ];
static _atoi_trans_cond_spaces: [i8 ; 6] = [ -1, -1, -1, -1, 0 , 0 ];
static _atoi_cond_targs: [i8 ; 6] = [ 2, 0, 3, 4, 0 , 0 ];
static _atoi_cond_actions: [i8 ; 6] = [ 0, 0, 0, 1, 0 , 0 ];
static _atoi_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _atoi_nfa_offsets: [i8 ; 7] = [ 0, 0, 0, 0, 0, 0 , 0 ];
static _atoi_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _atoi_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static atoi_start : i32 = 1;
static atoi_first_final : i32 = 4;
static atoi_error : i32 = 0;
static atoi_en_main : i32 = 1;
fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p = 0;
	let mut pe = s.len();
	let mut cs: i32 = 0;
	
	
	{
		cs = ( atoi_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _atoi_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 57 && ( data[(p ) as usize]
							) >= 45  ) {
								{
									let mut _ic  = ( _atoi_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 45) as usize] ) as i32;
									if ( _ic <= ( _atoi_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _atoi_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _atoi_indicies[(_inds + ( ( _ic - ( _atoi_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _atoi_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _atoi_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _atoi_cond_targs[(_trans) as usize] ) as i32;
							match ( _atoi_cond_actions[(_trans) as usize] ) {
								1  => {
									{println!( "match" );
									}
									
								}
								
								_ => {}
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
}

fn main()
{
	m( "-99.".to_string() );
	m( "100.".to_string() );
	m( "100x.".to_string() );
	m( "1000.".to_string() );
}

