class cond7_java
{
	int i ;
	int c ;
	
	
	
	
	
	private static byte  _foo_key_offsets [] = { 0, 0, 2, 4, 7, 0 ,  };
	private static char  _foo_trans_keys [] = { 48, 57, 48, 57, 10, 48, 57, 0,  };
	private static byte  _foo_single_lengths [] = { 0, 0, 0, 1, 0, 0 ,  };
	private static byte  _foo_range_lengths [] = { 0, 1, 1, 1, 0, 0 ,  };
	private static byte  _foo_index_offsets [] = { 0, 0, 2, 4, 7, 0 ,  };
	private static byte  _foo_trans_cond_spaces [] = { -1, -1, 0, -1, 0, 0, -1, -1, 0 ,  };
	private static byte  _foo_trans_offsets [] = { 0, 1, 2, 4, 5, 6, 7, 8, 0 ,  };
	private static byte  _foo_trans_lengths [] = { 1, 1, 2, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _foo_cond_keys [] = { 0, 0, 0, 1, 0, 0, 1, 0, 0, 0 ,  };
	private static byte  _foo_cond_targs [] = { 2, 0, 3, 2, 0, 4, 3, 0, 0, 0 ,  };
	private static byte  _foo_cond_actions [] = { 1, 0, 1, 2, 0, 0, 2, 0, 0, 0 ,  };
	private static byte  _foo_nfa_targs [] = { 0, 0 ,  };
	private static byte  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _foo_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _foo_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  foo_start  = 1;
	private static int  foo_first_final  = 4;
	private static int  foo_error  = 0;
	private static int  foo_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)foo_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = _foo_key_offsets[cs] ;
					_trans = (int )_foo_index_offsets[cs];
					_klen = (int)_foo_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _foo_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _foo_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_foo_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _foo_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _foo_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _foo_trans_offsets[_trans] ;
					_klen = (int)_foo_trans_lengths[_trans];
					_cond = (int )_foo_trans_offsets[_trans];
					_cpc = 0;
					switch ( _foo_trans_cond_spaces[_trans]  ) {
						case 0 :
						if ( (i > 0) )
						_cpc += 1;
						
						
						break;
						
					}
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_foo_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_foo_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_foo_cond_targs[_cond];
					if ( _foo_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					switch ( _foo_cond_actions[_cond]  ) {
						case 2 :
						{
							i = i - 1;
							c = ( int ) ( (( data[p ])) )
							;
							System.out.print( "item: " );
							System.out.print( c );
							System.out.print( "\n" );
							
						}
						
						break;
						case 1 :
						{
							i = ( int ) ( (( data[p ])) - 48 )
							;
							System.out.print( "count: " );
							System.out.print( i );
							System.out.print( "\n" );
							
						}
						
						break;
						
					}
					
					case 4:
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= foo_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"00\n",
		"019\n",
		"190\n",
		"1719\n",
		"1040000\n",
		"104000a\n",
		"104000\n",
	};
	
	static final int inplen = 7;
	
	public static void main (String[] args)
	{
		cond7_java machine = new cond7_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
