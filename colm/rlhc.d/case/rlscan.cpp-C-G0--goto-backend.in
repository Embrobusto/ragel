host( "working/rlscan.rl", 1 ) @{/*
	* Lexes Ragel input files.
	*
	* @@LANG: c++
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*
	* Test works with split code gen.
	*/
	
	#include <iostream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	
	#ifdef PERF_TEST
	
	/* Calibrated to 1s on yoho. */
	#define perf_iters ( 240984ll * S )
	
	int _perf_dummy = 0;
	#define perf_cout(...) ( _perf_dummy += 1 )
	#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )
	
	#else
	
	#define perf_cout(...) __VA_ARGS__
	#define perf_loop
	
	#endif
	
	using namespace std;
	
	void escapeXML( const char *data )
	{
		while ( *data != 0 ) {
			switch ( *data ) {
				case '<': perf_cout( cout << "&lt;" ); break;
				case '>': perf_cout( cout << "&gt;" ); break;
				case '&': perf_cout( cout << "&amp;" ); break;
				default: perf_cout( cout << *data ); break;
			}
			data += 1;
		}
	}
	
	void escapeXML( char c )
	{
		switch ( c ) {
			case '<': perf_cout( cout << "&lt;" ); break;
			case '>': perf_cout( cout << "&gt;" ); break;
			case '&': perf_cout( cout << "&amp;" ); break;
			default: perf_cout( cout << c ); break;
		}
	}
	
	void escapeXML( const char *data, int len )
	{
		for ( const char *end = data + len; data != end; data++  ) {
			switch ( *data ) {
				case '<': perf_cout( cout << "&lt;" ); break;
				case '>': perf_cout( cout << "&gt;" ); break;
				case '&': perf_cout( cout << "&amp;" ); break;
				default: perf_cout( cout << *data ); break;
			}
		}
	}
	
	inline void write( const char *data )
	{
		perf_cout( cout << data );
	}
	
	inline void write( char c )
	{
		perf_cout( cout << c );
	}
	
	inline void write( const char *data, int len )
	{
		perf_cout( cout.write( data, len ) );
	}
	
	
	
	
}@
array s8 _RagelScan_actions( 0, 39 ) = { 0, 1, 0, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 2, 0, 1, 0 };

array s8 _RagelScan_to_state_actions( 0, 3 ) = { 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _RagelScan_from_state_actions( 0, 5 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _RagelScan_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _RagelScan_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _RagelScan_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _RagelScan_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int RagelScan_start = 24;
value int RagelScan_error = 0;

value int RagelScan_en_c_comment = 6;
value int RagelScan_en_ilscan = 31;
value int RagelScan_en_rlscan = 35;
value int RagelScan_en_main = 24;

host( "working/rlscan.rl", 261 ) @{
	
	void test( const char *data )
	{
		std::ios::sync_with_stdio(false);
		
		int cs, act;
		perf_loop
		{
			int len = strlen( data );
			const char *ts, *te;
			int stack[1], top;
			memset( stack, 0, sizeof(stack) );
			
			bool single_line = false;
			int inline_depth = 0;
			
		}@
		{
			cs = cast(int)RagelScan_start;
			top = 0;
			ts = nil;
			te = nil;
		}
		host( "working/rlscan.rl", 278 ) @{
			
			/* Read in a block. */
			const char *p = data;
			const char *pe = data + len;
			const char *eof = pe;
			
		}@
		{
			index s8 _acts;
			uint _nacts;
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			_resume:
			_acts = offset( _RagelScan_actions, _RagelScan_from_state_actions[cs] );
			_nacts = cast(uint)deref( _RagelScan_actions, _acts ); _acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _RagelScan_actions, _acts ) ) {
					case 3{
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			switch ( cs ) {
				case 24:
				switch( ( deref( data, p )) ) {
					case 0: {
						goto ctr62;
					}
					case 34: {
						goto ctr63;
					}
					case 37: {
						goto ctr64;
					}
					case 39: {
						goto ctr65;
					}
					case 47: {
						goto ctr66;
					}
				}
				{
					goto ctr61;
				}
				case 25:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr3;
					}
					case 92: {
						goto ctr4;
					}
				}
				{
					goto ctr2;
				}
				case 1:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr3;
					}
					case 92: {
						goto ctr4;
					}
				}
				{
					goto ctr2;
				}
				case 2:
				{
					goto ctr2;
				}
				case 26:
				if ( ( deref( data, p )) == 37 ) {
					goto ctr70;
				}
				{
					goto ctr75;
				}
				case 27:
				if ( ( deref( data, p )) == 123 ) {
					goto ctr73;
				}
				{
					goto ctr72;
				}
				case 28:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr8;
					}
					case 92: {
						goto ctr9;
					}
				}
				{
					goto ctr7;
				}
				case 3:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr8;
					}
					case 92: {
						goto ctr9;
					}
				}
				{
					goto ctr7;
				}
				case 4:
				{
					goto ctr7;
				}
				case 29:
				switch( ( deref( data, p )) ) {
					case 42: {
						goto ctr76;
					}
					case 47: {
						goto ctr12;
					}
				}
				{
					goto ctr75;
				}
				case 5:
				if ( ( deref( data, p )) == 10 ) {
					goto ctr13;
				}
				{
					goto ctr12;
				}
				case 6:
				switch( ( deref( data, p )) ) {
					case 0: {
						goto ctr15;
					}
					case 42: {
						goto ctr16;
					}
				}
				{
					goto ctr14;
				}
				case 0:
				goto _out;
				case 7:
				switch( ( deref( data, p )) ) {
					case 0: {
						goto ctr15;
					}
					case 42: {
						goto ctr16;
					}
					case 47: {
						goto ctr17;
					}
				}
				{
					goto ctr14;
				}
				case 30:
				{
					goto ctr15;
				}
				case 31:
				switch( ( deref( data, p )) ) {
					case 0: {
						goto ctr15;
					}
					case 34: {
						goto ctr78;
					}
					case 39: {
						goto ctr79;
					}
					case 47: {
						goto ctr80;
					}
					case 123: {
						goto ctr81;
					}
					case 125: {
						goto ctr82;
					}
				}
				{
					goto ctr77;
				}
				case 32:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr21;
					}
					case 92: {
						goto ctr22;
					}
				}
				{
					goto ctr20;
				}
				case 8:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr21;
					}
					case 92: {
						goto ctr22;
					}
				}
				{
					goto ctr20;
				}
				case 9:
				{
					goto ctr20;
				}
				case 33:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr26;
					}
					case 92: {
						goto ctr27;
					}
				}
				{
					goto ctr25;
				}
				case 10:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr26;
					}
					case 92: {
						goto ctr27;
					}
				}
				{
					goto ctr25;
				}
				case 11:
				{
					goto ctr25;
				}
				case 34:
				switch( ( deref( data, p )) ) {
					case 42: {
						goto ctr87;
					}
					case 47: {
						goto ctr30;
					}
				}
				{
					goto ctr86;
				}
				case 12:
				if ( ( deref( data, p )) == 10 ) {
					goto ctr31;
				}
				{
					goto ctr30;
				}
				case 35:
				switch( ( deref( data, p )) ) {
					case 0: {
						goto ctr15;
					}
					case 10: {
						goto ctr89;
					}
					case 34: {
						goto ctr91;
					}
					case 35: {
						goto ctr92;
					}
					case 39: {
						goto ctr93;
					}
					case 47: {
						goto ctr94;
					}
					case 48: {
						goto ctr95;
					}
					case 91: {
						goto ctr98;
					}
					case 95: {
						goto ctr97;
					}
					case 123: {
						goto ctr99;
					}
					case 125: {
						goto ctr100;
					}
				}
				if ( ( deref( data, p )) < 65 ) {
					if ( ( deref( data, p )) < 49 ) {
						if ( 33 <= ( deref( data, p )) && ( deref( data, p )) <= 46 ) {
							goto ctr90;
						}
					} else if ( ( deref( data, p )) > 57 ) {
						{
							goto ctr90;
						}
					} else {
						goto ctr96;
					}
				} else if ( ( deref( data, p )) > 90 ) {
					if ( ( deref( data, p )) < 97 ) {
						if ( 92 <= ( deref( data, p )) ) {
							goto ctr90;
						}
					} else if ( ( deref( data, p )) > 122 ) {
						if ( 124 <= ( deref( data, p )) && ( deref( data, p )) <= 126 ) {
							goto ctr90;
						}
					} else {
						goto ctr97;
					}
				} else {
					goto ctr97;
				}
				{
					goto ctr88;
				}
				case 36:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr35;
					}
					case 92: {
						goto ctr36;
					}
				}
				{
					goto ctr34;
				}
				case 13:
				switch( ( deref( data, p )) ) {
					case 34: {
						goto ctr35;
					}
					case 92: {
						goto ctr36;
					}
				}
				{
					goto ctr34;
				}
				case 14:
				{
					goto ctr34;
				}
				case 37:
				if ( ( deref( data, p )) == 10 ) {
					goto ctr40;
				}
				{
					goto ctr39;
				}
				case 15:
				if ( ( deref( data, p )) == 10 ) {
					goto ctr40;
				}
				{
					goto ctr39;
				}
				case 38:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr43;
					}
					case 92: {
						goto ctr44;
					}
				}
				{
					goto ctr42;
				}
				case 16:
				switch( ( deref( data, p )) ) {
					case 39: {
						goto ctr43;
					}
					case 92: {
						goto ctr44;
					}
				}
				{
					goto ctr42;
				}
				case 17:
				{
					goto ctr42;
				}
				case 39:
				switch( ( deref( data, p )) ) {
					case 47: {
						goto ctr48;
					}
					case 92: {
						goto ctr49;
					}
				}
				{
					goto ctr47;
				}
				case 18:
				switch( ( deref( data, p )) ) {
					case 47: {
						goto ctr48;
					}
					case 92: {
						goto ctr49;
					}
				}
				{
					goto ctr47;
				}
				case 19:
				{
					goto ctr47;
				}
				case 40:
				if ( ( deref( data, p )) == 120 ) {
					goto ctr108;
				}
				if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
					goto ctr96;
				}
				{
					goto ctr109;
				}
				case 41:
				if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
					goto ctr96;
				}
				{
					goto ctr109;
				}
				case 20:
				if ( ( deref( data, p )) < 65 ) {
					if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
						goto ctr53;
					}
				} else if ( ( deref( data, p )) > 70 ) {
					if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 102 ) {
						goto ctr53;
					}
				} else {
					goto ctr53;
				}
				{
					goto ctr52;
				}
				case 42:
				if ( ( deref( data, p )) < 65 ) {
					if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
						goto ctr53;
					}
				} else if ( ( deref( data, p )) > 70 ) {
					if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 102 ) {
						goto ctr53;
					}
				} else {
					goto ctr53;
				}
				{
					goto ctr111;
				}
				case 43:
				if ( ( deref( data, p )) == 95 ) {
					goto ctr97;
				}
				if ( ( deref( data, p )) < 65 ) {
					if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
						goto ctr97;
					}
				} else if ( ( deref( data, p )) > 90 ) {
					if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 122 ) {
						goto ctr97;
					}
				} else {
					goto ctr97;
				}
				{
					goto ctr113;
				}
				case 44:
				switch( ( deref( data, p )) ) {
					case 92: {
						goto ctr56;
					}
					case 93: {
						goto ctr57;
					}
				}
				{
					goto ctr55;
				}
				case 21:
				switch( ( deref( data, p )) ) {
					case 92: {
						goto ctr56;
					}
					case 93: {
						goto ctr57;
					}
				}
				{
					goto ctr55;
				}
				case 22:
				{
					goto ctr55;
				}
				case 45:
				if ( ( deref( data, p )) == 37 ) {
					goto ctr116;
				}
				{
					goto ctr115;
				}
				case 23:
				if ( ( deref( data, p )) == 37 ) {
					goto ctr60;
				}
				{
					goto ctr59;
				}
			}
			
			ctr15: cs = 0; goto _again;
			ctr2: cs = 1; goto _again;
			ctr4: cs = 2; goto _again;
			ctr7: cs = 3; goto _again;
			ctr9: cs = 4; goto _again;
			ctr12: cs = 5; goto _again;
			ctr14: cs = 6; goto f5;
			ctr16: cs = 7; goto f5;
			ctr20: cs = 8; goto _again;
			ctr22: cs = 9; goto _again;
			ctr25: cs = 10; goto _again;
			ctr27: cs = 11; goto _again;
			ctr30: cs = 12; goto _again;
			ctr34: cs = 13; goto _again;
			ctr36: cs = 14; goto _again;
			ctr39: cs = 15; goto _again;
			ctr42: cs = 16; goto _again;
			ctr44: cs = 17; goto _again;
			ctr47: cs = 18; goto _again;
			ctr49: cs = 19; goto _again;
			ctr108: cs = 20; goto _again;
			ctr55: cs = 21; goto _again;
			ctr56: cs = 22; goto _again;
			ctr116: cs = 23; goto _again;
			ctr11: cs = 24; goto f0;
			ctr3: cs = 24; goto f1;
			ctr8: cs = 24; goto f2;
			ctr13: cs = 24; goto f3;
			ctr61: cs = 24; goto f20;
			ctr62: cs = 24; goto f21;
			ctr75: cs = 24; goto f23;
			ctr72: cs = 24; goto f24;
			ctr73: cs = 24; goto f25;
			ctr76: cs = 24; goto f26;
			ctr63: cs = 25; goto f22;
			ctr64: cs = 26; goto _again;
			ctr70: cs = 27; goto _again;
			ctr65: cs = 28; goto f22;
			ctr66: cs = 29; goto f22;
			ctr17: cs = 30; goto f6;
			ctr29: cs = 31; goto f7;
			ctr21: cs = 31; goto f8;
			ctr26: cs = 31; goto f9;
			ctr31: cs = 31; goto f10;
			ctr77: cs = 31; goto f27;
			ctr81: cs = 31; goto f28;
			ctr82: cs = 31; goto f29;
			ctr86: cs = 31; goto f30;
			ctr87: cs = 31; goto f31;
			ctr78: cs = 32; goto f22;
			ctr79: cs = 33; goto f22;
			ctr80: cs = 34; goto f22;
			ctr59: cs = 35; goto f11;
			ctr35: cs = 35; goto f12;
			ctr40: cs = 35; goto f13;
			ctr43: cs = 35; goto f14;
			ctr48: cs = 35; goto f15;
			ctr52: cs = 35; goto f16;
			ctr57: cs = 35; goto f17;
			ctr60: cs = 35; goto f18;
			ctr88: cs = 35; goto f32;
			ctr89: cs = 35; goto f33;
			ctr90: cs = 35; goto f34;
			ctr99: cs = 35; goto f35;
			ctr115: cs = 35; goto f36;
			ctr109: cs = 35; goto f37;
			ctr111: cs = 35; goto f38;
			ctr113: cs = 35; goto f39;
			ctr91: cs = 36; goto f22;
			ctr92: cs = 37; goto f22;
			ctr93: cs = 38; goto f22;
			ctr94: cs = 39; goto f22;
			ctr95: cs = 40; goto f22;
			ctr96: cs = 41; goto _again;
			ctr53: cs = 42; goto _again;
			ctr97: cs = 43; goto _again;
			ctr98: cs = 44; goto f22;
			ctr100: cs = 45; goto f22;
			
			f5: _acts = offset( _RagelScan_actions, 1 ); goto execFuncs;
			f22: _acts = offset( _RagelScan_actions, 7 ); goto execFuncs;
			f9: _acts = offset( _RagelScan_actions, 9 ); goto execFuncs;
			f8: _acts = offset( _RagelScan_actions, 11 ); goto execFuncs;
			f31: _acts = offset( _RagelScan_actions, 13 ); goto execFuncs;
			f10: _acts = offset( _RagelScan_actions, 15 ); goto execFuncs;
			f28: _acts = offset( _RagelScan_actions, 17 ); goto execFuncs;
			f29: _acts = offset( _RagelScan_actions, 19 ); goto execFuncs;
			f27: _acts = offset( _RagelScan_actions, 21 ); goto execFuncs;
			f30: _acts = offset( _RagelScan_actions, 23 ); goto execFuncs;
			f7: _acts = offset( _RagelScan_actions, 25 ); goto execFuncs;
			f18: _acts = offset( _RagelScan_actions, 27 ); goto execFuncs;
			f33: _acts = offset( _RagelScan_actions, 29 ); goto execFuncs;
			f13: _acts = offset( _RagelScan_actions, 31 ); goto execFuncs;
			f14: _acts = offset( _RagelScan_actions, 33 ); goto execFuncs;
			f12: _acts = offset( _RagelScan_actions, 35 ); goto execFuncs;
			f17: _acts = offset( _RagelScan_actions, 37 ); goto execFuncs;
			f15: _acts = offset( _RagelScan_actions, 39 ); goto execFuncs;
			f35: _acts = offset( _RagelScan_actions, 41 ); goto execFuncs;
			f34: _acts = offset( _RagelScan_actions, 43 ); goto execFuncs;
			f32: _acts = offset( _RagelScan_actions, 45 ); goto execFuncs;
			f39: _acts = offset( _RagelScan_actions, 47 ); goto execFuncs;
			f37: _acts = offset( _RagelScan_actions, 49 ); goto execFuncs;
			f38: _acts = offset( _RagelScan_actions, 51 ); goto execFuncs;
			f36: _acts = offset( _RagelScan_actions, 53 ); goto execFuncs;
			f16: _acts = offset( _RagelScan_actions, 55 ); goto execFuncs;
			f11: _acts = offset( _RagelScan_actions, 57 ); goto execFuncs;
			f2: _acts = offset( _RagelScan_actions, 59 ); goto execFuncs;
			f1: _acts = offset( _RagelScan_actions, 61 ); goto execFuncs;
			f26: _acts = offset( _RagelScan_actions, 63 ); goto execFuncs;
			f3: _acts = offset( _RagelScan_actions, 65 ); goto execFuncs;
			f25: _acts = offset( _RagelScan_actions, 67 ); goto execFuncs;
			f20: _acts = offset( _RagelScan_actions, 69 ); goto execFuncs;
			f21: _acts = offset( _RagelScan_actions, 71 ); goto execFuncs;
			f24: _acts = offset( _RagelScan_actions, 73 ); goto execFuncs;
			f23: _acts = offset( _RagelScan_actions, 75 ); goto execFuncs;
			f0: _acts = offset( _RagelScan_actions, 77 ); goto execFuncs;
			f6: _acts = offset( _RagelScan_actions, 79 ); goto execFuncs;
			
			execFuncs:
			_nacts = cast(uint)deref( _RagelScan_actions, _acts );
			_acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _RagelScan_actions, _acts ) ) {
					case 0{
						host( "working/rlscan.rl", 97 ) ${ escapeXML( ={( deref( data, p ))}= ); }$
					}
					case 1{
						host( "working/rlscan.rl", 98 ) ${ ${top-= 1;cs = stack[top];goto _again;}$ }$
					}
					case 4{
						host( "NONE", 1 ) ${${te = p+1;}$}$
					}
					case 5{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 6{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 7{
						host( "working/rlscan.rl", 112 ) ${${te = p+1;host( "working/rlscan.rl", 112 ) ${
									write( "/*" );
									${stack[top] = cs; top += 1;cs = 6; goto _again;}$}$}$}$
					}
					case 8{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 9{
						host( "working/rlscan.rl", 118 ) ${${te = p+1;host( "working/rlscan.rl", 118 ) ${
									write( '{' );
										inline_depth += 1; 
									}$}$}$
						}
						case 10{
							host( "working/rlscan.rl", 123 ) ${${te = p+1;host( "working/rlscan.rl", 123 ) ${
										write( '}' );
									/* If dropping down to the last } then return 
								* to ragel code. */
								if ( --inline_depth == 0 ) {
									write( "</inline>\n" );
									${cs = 35; goto _again;}$}
							}$}$}$
				}
				case 11{
					host( "working/rlscan.rl", 133 ) ${${te = p+1;host( "working/rlscan.rl", 133 ) ${ escapeXML( *ts ); }$}$}$
				}
				case 12{
					host( "working/rlscan.rl", 133 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 133 ) ${ escapeXML( *ts ); }$}$}$
				}
				case 13{
					host( "working/rlscan.rl", 133 ) ${${p = ((te))-1;
							host( "working/rlscan.rl", 133 ) ${ escapeXML( *ts ); }$}$}$
				}
				case 14{
					host( "working/rlscan.rl", 141 ) ${${te = p+1;host( "working/rlscan.rl", 141 ) ${
								if ( !single_line ) {
									write( "</section>\n" );
									${cs = 24; goto _again;}$}
							}$}$}$
				}
				case 15{
					host( "working/rlscan.rl", 148 ) ${${te = p+1;host( "working/rlscan.rl", 148 ) ${
								if ( single_line ) {
									write( "</section>\n" );
									${cs = 24; goto _again;}$}
							}$}$}$
				}
				case 16{
					host( "working/rlscan.rl", 177 ) ${${te = p+1;}$}$
				}
				case 17{
					host( "working/rlscan.rl", 180 ) ${${te = p+1;host( "working/rlscan.rl", 180 ) ${
								write( "<single_lit>" );
								escapeXML( ts, te-ts );
								write( "</single_lit>\n" );
							}$}$}$
				}
				case 18{
					host( "working/rlscan.rl", 187 ) ${${te = p+1;host( "working/rlscan.rl", 187 ) ${
								write( "<double_lit>" );
								escapeXML( ts, te-ts );
								write( "</double_lit>\n" );
							}$}$}$
				}
				case 19{
					host( "working/rlscan.rl", 194 ) ${${te = p+1;host( "working/rlscan.rl", 194 ) ${
								write( "<or_lit>" );
								escapeXML( ts, te-ts );
								write( "</or_lit>\n" );
							}$}$}$
				}
				case 20{
					host( "working/rlscan.rl", 201 ) ${${te = p+1;host( "working/rlscan.rl", 201 ) ${
								write( "<re_lit>" );
								escapeXML( ts, te-ts );
								write( "</re_lit>\n" );
							}$}$}$
				}
				case 21{
					host( "working/rlscan.rl", 208 ) ${${te = p+1;host( "working/rlscan.rl", 208 ) ${
								inline_depth = 1;
								write( "<inline>{" );
									${cs = 31; goto _again;}$}$}$}$
					}
					case 22{
						host( "working/rlscan.rl", 214 ) ${${te = p+1;host( "working/rlscan.rl", 214 ) ${
									write( "<symbol>" );
									escapeXML( ={( deref( data, p ))}= );
									write( "</symbol>\n" );
								}$}$}$
					}
					case 23{
						host( "working/rlscan.rl", 220 ) ${${te = p+1;}$}$
					}
					case 24{
						host( "working/rlscan.rl", 156 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 156 ) ${
									write( "<word>" );
									write( ts, te-ts );
									write( "</word>\n" );
								}$}$}$
					}
					case 25{
						host( "working/rlscan.rl", 163 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 163 ) ${
									write( "<int>" );
									write( ts, te-ts );
									write( "</int>\n" );
								}$}$}$
					}
					case 26{
						host( "working/rlscan.rl", 170 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 170 ) ${
									write( "<hex>" );
									write( ts, te-ts );
									write( "</hex>\n" );
								}$}$}$
					}
					case 27{
						host( "working/rlscan.rl", 214 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 214 ) ${
									write( "<symbol>" );
									escapeXML( ={( deref( data, p ))}= );
									write( "</symbol>\n" );
								}$}$}$
					}
					case 28{
						host( "working/rlscan.rl", 163 ) ${${p = ((te))-1;
								host( "working/rlscan.rl", 163 ) ${
									write( "<int>" );
									write( ts, te-ts );
									write( "</int>\n" );
								}$}$}$
					}
					case 29{
						host( "working/rlscan.rl", 214 ) ${${p = ((te))-1;
								host( "working/rlscan.rl", 214 ) ${
									write( "<symbol>" );
									escapeXML( ={( deref( data, p ))}= );
									write( "</symbol>\n" );
								}$}$}$
					}
					case 30{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 31{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 32{
						host( "working/rlscan.rl", 232 ) ${${te = p+1;host( "working/rlscan.rl", 232 ) ${
									escapeXML( ts, te-ts );
									${stack[top] = cs; top += 1;cs = 6; goto _again;}$}$}$}$
					}
					case 33{
						host( "working/rlscan.rl", 100 ) ${${te = p+1;host( "working/rlscan.rl", 100 ) ${
									escapeXML( ts, te-ts );
								}$}$}$
					}
					case 34{
						host( "working/rlscan.rl", 239 ) ${${te = p+1;host( "working/rlscan.rl", 239 ) ${ 
									write( "<section>\n" );
									single_line = false;
									${cs = 35; goto _again;}$}$}$}$
					}
					case 35{
						host( "working/rlscan.rl", 251 ) ${${te = p+1;host( "working/rlscan.rl", 251 ) ${ 
									escapeXML( *ts );
								}$}$}$
					}
					case 36{
						host( "working/rlscan.rl", 256 ) ${${te = p+1;}$}$
					}
					case 37{
						host( "working/rlscan.rl", 245 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 245 ) ${
									write( "<section>\n" ); 
									single_line = true; 
									${cs = 35; goto _again;}$}$}$}$
					}
					case 38{
						host( "working/rlscan.rl", 251 ) ${${te = p;p = p - 1;host( "working/rlscan.rl", 251 ) ${ 
									escapeXML( *ts );
								}$}$}$
					}
					case 39{
						host( "working/rlscan.rl", 251 ) ${${p = ((te))-1;
								host( "working/rlscan.rl", 251 ) ${ 
									escapeXML( *ts );
								}$}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			goto _again;
			
			_again:
			_acts = offset( _RagelScan_actions, _RagelScan_to_state_actions[cs] );
			_nacts = cast(uint)deref( _RagelScan_actions, _acts ); _acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _RagelScan_actions, _acts ) ) {
					case 2{
						host( "NONE", 1 ) ${${ts = nil;}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			if ( cs == 0 )
			goto _out;
			p += 1;
			if ( p != pe )
			goto _resume;
			_test_eof: {}
			if ( p == eof )
			{
				switch ( cs ) {
					case 25: goto ctr75;
					case 1: goto ctr11;
					case 2: goto ctr11;
					case 26: goto ctr75;
					case 27: goto ctr72;
					case 28: goto ctr75;
					case 3: goto ctr11;
					case 4: goto ctr11;
					case 29: goto ctr75;
					case 5: goto ctr11;
					case 32: goto ctr86;
					case 8: goto ctr29;
					case 9: goto ctr29;
					case 33: goto ctr86;
					case 10: goto ctr29;
					case 11: goto ctr29;
					case 34: goto ctr86;
					case 12: goto ctr29;
					case 36: goto ctr115;
					case 13: goto ctr59;
					case 14: goto ctr59;
					case 37: goto ctr115;
					case 15: goto ctr59;
					case 38: goto ctr115;
					case 16: goto ctr59;
					case 17: goto ctr59;
					case 39: goto ctr115;
					case 18: goto ctr59;
					case 19: goto ctr59;
					case 40: goto ctr109;
					case 41: goto ctr109;
					case 20: goto ctr52;
					case 42: goto ctr111;
					case 43: goto ctr113;
					case 44: goto ctr115;
					case 21: goto ctr59;
					case 22: goto ctr59;
					case 45: goto ctr115;
					case 23: goto ctr59;
				}
			}
			
			_out: {}
		}
		host( "working/rlscan.rl", 285 ) @{
		}
		
		if ( cs == RagelScan_error ) {
			/* Machine failed before finding a token. */
			perf_cout( cerr << "PARSE ERROR" << endl );
			exit(1);
		}
	}
	
	#define BUFSIZE 2048
	
	int main()
	{
		std::ios::sync_with_stdio(false);
		
		test(
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
		);
		
		return 0;
	}
}@