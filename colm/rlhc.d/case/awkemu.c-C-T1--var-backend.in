host( "working/awkemu.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	/*
	* Emulate the basic parser of the awk program. Breaks lines up into
	* words and prints the words.
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	#define LINEBUF 2048
	static char lineBuf[LINEBUF];
	static char blineBuf[LINEBUF];
	static int lineLen;
	static int blineLen;
	static int words;
	
	void finishLine();
	
	struct awkemu
	{
		int cs;
	};
	
	
	
	void finishLine()
	{
		int i;
		char *pword = blineBuf;
		lineBuf[lineLen] = 0;
		printf("endline(%i): %s\n", words, lineBuf );
		for ( i = 0; i < words; i++ ) {
			printf("  word: %s\n", pword );
			pword += strlen(pword) + 1;
		}
	}
	
}@
array s8 _awkemu_key_offsets( 0, 6 ) = { 0, 3, 6, 0 };

array char _awkemu_trans_keys( 0, 32 ) = { 9, 10, 32, 9, 10, 32, 9, 10, 32, 0 };

array s8 _awkemu_single_lengths( 0, 3 ) = { 3, 3, 3, 0 };

array s8 _awkemu_range_lengths( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _awkemu_index_offsets( 0, 8 ) = { 0, 4, 8, 0 };

array s8 _awkemu_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _awkemu_trans_offsets( 0, 11 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 };

array s8 _awkemu_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _awkemu_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _awkemu_cond_targs( 0, 2 ) = { 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 0 };

array s8 _awkemu_cond_actions( 0, 8 ) = { 2, 3, 2, 1, 4, 5, 4, 1, 7, 8, 7, 6, 0 };

array s8 _awkemu_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _awkemu_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _awkemu_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _awkemu_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int awkemu_start = 2;
value int awkemu_first_final = 2;
value int awkemu_error = -1;

value int awkemu_en_main = 2;

host( "working/awkemu.rl", 101 ) @{
	
	void awkemu_init( struct awkemu *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)awkemu_start;
	}
	host( "working/awkemu.rl", 105 ) @{
	}
	
	void awkemu_execute( struct awkemu *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _awkemu_trans_keys, _awkemu_key_offsets[host( "-", 1 ) ={ fsm->cs}=] );
					_trans = cast(uint)_awkemu_index_offsets[host( "-", 1 ) ={ fsm->cs}=];
					_have = 0;
					
					_klen = cast(int)_awkemu_single_lengths[host( "-", 1 ) ={ fsm->cs}=];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _awkemu_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _awkemu_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_awkemu_range_lengths[host( "-", 1 ) ={ fsm->cs}=];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _awkemu_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _awkemu_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _awkemu_cond_keys, _awkemu_trans_offsets[_trans] );
					_klen = cast(int)_awkemu_trans_lengths[_trans];
					_cond = cast(uint)_awkemu_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _awkemu_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _awkemu_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							host( "-", 1 ) ={ fsm->cs}= = -1;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					host( "-", 1 ) ={ fsm->cs}= = cast(int)_awkemu_cond_targs[_cond];
					
					switch ( _awkemu_cond_actions[_cond] ) {
						case 4 {
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 5 {
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 7 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 8 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 1 {
							host( "working/awkemu.rl", 41 ) ${
								blineBuf[blineLen++] = ={( deref( data, p ))}=;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 2 {
							host( "working/awkemu.rl", 47 ) ${
								blineBuf[blineLen++] = 0;
								words += 1;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 3 {
							host( "working/awkemu.rl", 47 ) ${
								blineBuf[blineLen++] = 0;
								words += 1;
							}$
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 6 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 41 ) ${
								blineBuf[blineLen++] = ={( deref( data, p ))}=;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
					}
					
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/awkemu.rl", 112 ) @{
	}
	
	int awkemu_finish( struct awkemu *fsm )
	{
		if ( fsm->cs == awkemu_error ) 
		return -1;
		if ( fsm->cs >= awkemu_first_final ) 
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#define BUFSIZE 2048
	
	struct awkemu fsm;
	char buf[BUFSIZE];
	
	void test( char *buf )
	{
		int len = strlen( buf );
		awkemu_init( &fsm );
		awkemu_execute( &fsm, buf, len );
		if ( awkemu_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "" );
		test( "one line with no newline" );
		test( "one line\n" );
		return 0;
	}
	
}@