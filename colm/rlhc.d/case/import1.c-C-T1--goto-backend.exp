#include <stdio.h>

char *foo = "foo";

char b = 98;
char a = 97;
char r = 114;

#define SP 32
#define NL '\n'



static const char  _tmp_key_offsets [] = { 0, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 0 ,  };
static const char  _tmp_trans_keys [] = { 97, 114, 32, 98, 102, 97, 114, 10, 111, 111, 111, 111, 98, 102, 0 ,  };
static const char  _tmp_single_lengths [] = { 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0 ,  };
static const char  _tmp_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_index_offsets [] = { 0, 0, 2, 4, 6, 9, 11, 13, 15, 17, 19, 21, 23, 0 ,  };
static const char  _tmp_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _tmp_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 ,  };
static const char  _tmp_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _tmp_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_cond_targs [] = { 2, 0, 3, 0, 4, 0, 5, 8, 0, 6, 0, 7, 0, 12, 0, 9, 0, 7, 0, 11, 0, 3, 0, 1, 10, 0, 0 ,  };
static const char  _tmp_cond_actions [] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_nfa_targs [] = { 0, 0 ,  };
static const char  _tmp_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tmp_nfa_pop_trans [] = { 0, 0 ,  };
static const int  tmp_start  = 12;
static const int  tmp_first_final  = 12;
static const int  tmp_error  = 0;
static const int  tmp_en_main  = 12;
int cs;

void exec_str( char *p, int len )
{
	char *pe = p + len;
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _tmp_trans_keys + _tmp_key_offsets[cs];
		_trans = ( unsigned int  ) _tmp_index_offsets[cs];
		_klen = ( int ) _tmp_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _tmp_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _tmp_cond_keys + _tmp_trans_offsets[_trans];
		_klen = ( int ) _tmp_trans_lengths[_trans];
		_cond = ( unsigned int  ) _tmp_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _tmp_cond_targs[_cond];
		if ( _tmp_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _tmp_cond_actions[_cond] ) {
			case 2 :
			{
				printf("foo\n"); 
			}
			
			break;
			case 1 :
			{
				printf("bar\n");
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

void exec_c( char c )
{
	exec_str( &c, 1 );
}

int main()
{

	{
		cs = ( int ) tmp_start;
	}
	exec_str( foo, 3 );
	exec_c( SP );
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( NL );
	
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( SP );
	exec_str( foo, 3 );
	exec_c( NL );
	
	if ( cs < tmp_first_final )
	printf("FAIL\n");
	else
	printf("ACCEPT\n");
	
	return 0;
}

