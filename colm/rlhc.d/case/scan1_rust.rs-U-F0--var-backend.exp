static mut ts : i32
= 0;
static mut te : i32
= 0;
static mut act : i32 = 0;
static mut token : i32 = 0;





static _scanner_actions: [i8 ; 32] = [ 0, 1, 2, 1, 3, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 2, 0, 1, 2, 3, 4, 2, 3, 5, 0 , 0 ];
static _scanner_trans_keys: [u8 ; 24] = [ 1, 0, 2, 9, 4, 4, 10, 10, 10, 10, 10, 10, 2, 9, 0, 9, 7, 7, 9, 9, 2, 9, 0 , 0 ];
static _scanner_char_class: [i8 ; 113] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 5, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0 , 0 ];
static _scanner_index_offsets: [i8 ; 13] = [ 0, 0, 8, 9, 10, 11, 12, 20, 30, 31, 32, 0 , 0 ];
static _scanner_indicies: [i8 ; 42] = [ 1, 2, 2, 2, 0, 0, 0, 2, 3, 6, 7, 8, 1, 2, 9, 10, 4, 4, 4, 2, 11, 4, 4, 2, 2, 2, 12, 13, 14, 15, 13, 18, 1, 2, 2, 2, 0, 0, 0, 2, 0 , 0 ];
static _scanner_index_defaults: [i8 ; 13] = [ 0, 0, 4, 5, 5, 5, 4, 4, 16, 17, 0, 0 , 0 ];
static _scanner_trans_cond_spaces: [i8 ; 21] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _scanner_cond_targs: [i8 ; 21] = [ 7, 7, 1, 9, 0, 7, 4, 5, 7, 10, 10, 7, 7, 8, 2, 6, 7, 7, 3, 0 , 0 ];
static _scanner_cond_actions: [i8 ; 21] = [ 19, 9, 0, 3, 0, 17, 0, 0, 7, 24, 27, 11, 5, 0, 0, 0, 13, 15, 0, 0 , 0 ];
static _scanner_to_state_actions: [i8 ; 13] = [ 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0 , 0 ];
static _scanner_from_state_actions: [i8 ; 13] = [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 , 0 ];
static _scanner_eof_trans: [i8 ; 13] = [ 0, 1, 0, 6, 6, 6, 0, 0, 17, 18, 1, 0 , 0 ];
static _scanner_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_offsets: [i8 ; 13] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static scanner_start : i32 = 7;
static scanner_first_final : i32 = 7;
static scanner_error : i32 = 0;
static scanner_en_main : i32 = 7;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( scanner_start ) as i32;
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _scanner_eof_trans[(cs) as usize]> 0  ) {
								{
									_trans = ( _scanner_eof_trans[(cs) as usize] ) as u32- 1;
									_have = 1;
								}
								
							}
							if ( _have == 0  ) {
								{
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_acts = ( _scanner_from_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _scanner_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _scanner_actions[(_acts ) as usize]
								) {
									2  => {
										{{ts = p;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _scanner_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 120 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _scanner_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _scanner_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _scanner_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _scanner_indicies[(_inds + ( ( _ic - ( _scanner_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _scanner_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _scanner_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _scanner_cond_targs[(_trans) as usize] ) as i32;
							if ( _scanner_cond_actions[(_trans) as usize]!= 0  ) {
								{
									_acts = ( _scanner_cond_actions[(_trans) as usize] ) as i32;
									_nacts = ( _scanner_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _scanner_actions[(_acts ) as usize]
										) {
											3  => {
												{{te = p+1;
													}}
												
											}
											4  => {
												{{act = 4;
													}}
												
											}
											5  => {
												{{act = 5;
													}}
												
											}
											6  => {
												{{te = p+1;
														{print!( "{}", "on last     " );
															if ( p + 1 == te )
															{
																print!( "{}", "yes" );
																
															} 
															print!( "{}", "\n" );
														}
													}}
												
											}
											7  => {
												{{te = p+1;
														{print!( "{}", "on lag      " );
															if ( p + 1 == te )
															{
																print!( "{}", "yes" );
																
															} 
															print!( "{}", "\n" );
														}
													}}
												
											}
											8  => {
												{{te = p+1;
													}}
												
											}
											9  => {
												{{te = p+1;
													}}
												
											}
											10  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "on next     " );
															if ( p + 1 == te )
															{
																print!( "{}", "yes" );
																
															} 
															print!( "{}", "\n" );
														}
													}}
												
											}
											11  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "on lag      " );
															if ( p + 1 == te )
															{
																print!( "{}", "yes" );
																
															} 
															print!( "{}", "\n" );
														}
													}}
												
											}
											12  => {
												{{p = ((te))-1;
														{print!( "{}", "on lag      " );
															if ( p + 1 == te )
															{
																print!( "{}", "yes" );
																
															} 
															print!( "{}", "\n" );
														}
													}}
												
											}
											13  => {
												{{match ( act  ) {
															0  => {
																{{cs = 0;
																	}}
																
															}
															4  => {
																p = ((te))-1;
																{print!( "{}", "lm switch1  " );
																	if ( p + 1 == te )
																	{
																		print!( "{}", "yes" );
																		
																	} 
																	print!( "{}", "\n" );
																}
																
															}
															5  => {
																p = ((te))-1;
																{print!( "{}", "lm switch2  " );
																	if ( p + 1 == te )
																	{
																		print!( "{}", "yes" );
																		
																	} 
																	print!( "{}", "\n" );
																}
																
															}
															
															_ => {}
														}
													}
												}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							_acts = ( _scanner_to_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _scanner_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _scanner_actions[(_acts ) as usize]
								) {
									0  => {
										{{ts = 0;
											}}
										
									}
									1  => {
										{{act = 0;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= scanner_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "abbc1d1d2\n".to_string() ); }
}

