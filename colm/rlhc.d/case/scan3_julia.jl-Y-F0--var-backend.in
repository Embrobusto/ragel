host( "working/scan3_julia.rl", 1 ) @{//
	// @@LANG: julia
	// @@GENERATED: true
	//
	
	
	
	
	
	
}@
array s8 _scanner_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 6, 2, 2, 3, 2, 2, 4, 2, 2, 5, 0 };

array u8 _scanner_trans_keys( 0, 1 ) = { 1, 0, 0, 1, 1, 0, 0 };

array s8 _scanner_char_class( 0, 1 ) = { 0, 1, 0 };

array s8 _scanner_index_offsets( 0, 2 ) = { 0, 0, 2, 0 };

array s8 _scanner_indicies( 0, 2 ) = { 0, 2, 0 };

array s8 _scanner_index_defaults( 0, 4 ) = { 0, 1, 4, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 2 ) = { 2, 0, 2, 1, 2, 0 };

array s8 _scanner_cond_actions( 0, 13 ) = { 7, 0, 10, 5, 13, 0 };

array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };

array s8 _scanner_from_state_actions( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_eof_trans( 0, 4 ) = { 0, 0, 4, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 1;
value int scanner_first_final = 1;
value int scanner_error = 0;

value int scanner_en_main = 1;

host( "working/scan3_julia.rl", 25 ) @{
	
	function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	ts = 0;
	te = 0;
	act = 0;
	token = 0;
	
}@
{
	cs = cast(int)scanner_start;
	ts = nil;
	te = nil;
	act = 0;
}
host( "working/scan3_julia.rl", 38 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index u8 _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _scanner_eof_trans[cs] > 0 ) {
					_trans = cast(uint)_scanner_eof_trans[cs] - 1;
					_have = 1;
				}
				if ( _have == 0 ) {
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
				_nacts = cast(uint)deref( _scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _scanner_actions, _acts ) ) {
						case 1 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _scanner_trans_keys, (cs<<1) );
				_inds = offset( _scanner_indicies, _scanner_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 98 && ( deref( data, p )) >= 97 )
				{
					int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
					if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
					_trans = cast(uint)deref( _scanner_indicies, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_scanner_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_scanner_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_scanner_cond_targs[_trans];
				
				if ( _scanner_cond_actions[_trans] != 0 ) {
					_acts = offset( _scanner_actions, _scanner_cond_actions[_trans] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _scanner_actions, _acts ) )
						{
							case 2 {
								host( "NONE", 1 ) ${${te = p+1;}$}$
							}
							case 3 {
								host( "working/scan3_julia.rl", 13 ) ${${act = 1;}$}$
							}
							case 4 {
								host( "working/scan3_julia.rl", 15 ) ${${act = 2;}$}$
							}
							case 5 {
								host( "working/scan3_julia.rl", 17 ) ${${act = 3;}$}$
							}
							case 6 {
								host( "NONE", 1 ) ${${switch( act ) {
											case 1 {
												p = ((te))-1;
												host( "working/scan3_julia.rl", 13 ) ${print( "pat1\n" );
												}$ }
											case 2 {
												p = ((te))-1;
												host( "working/scan3_julia.rl", 15 ) ${print( "pat2\n" );
												}$ }
											case 3 {
												p = ((te))-1;
												host( "working/scan3_julia.rl", 17 ) ${print( "pat3\n" );
												}$ }
										}}$
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
				_nacts = cast(uint)deref( _scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _scanner_actions, _acts ) ) {
						case 0 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/scan3_julia.rl", 39 ) @{
	
	if ( cs >= scanner_first_final )
	println( "ACCEPT" );
	else
	println( "FAIL" );
	end
	end
	
	m( "ab89" );
}@