host( "working/call2.rl", 1 ) @{/*
	* @@LANG: c++
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	int num = 0;
	
	struct CallTest
	{
		int cs, top, stack[32];
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		void init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		void execute( const char *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
	};
	
	
	
}@
array s8 _CallTest_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _CallTest_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _CallTest_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _CallTest_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int CallTest_start = 1;
value int CallTest_first_final = 23;
value int CallTest_error = 0;

value int CallTest_en_even = 13;
value int CallTest_en_odd = 18;
value int CallTest_en_fail = 22;
value int CallTest_en_main = 1;

host( "working/call2.rl", 59 ) @{
	
	void CallTest::init( )
	{
		num = 0;
	}@
	{
		cs = cast(int)CallTest_start;
		top = 0;
	}
	host( "working/call2.rl", 64 ) @{
	}
	
	void CallTest::execute( const char *data, int len )
	{
		const char *p = data;
		const char *pe = data+len;
		
	}@
	{
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			if ( ( deref( data, p )) == 79 ) {
				goto ctr2;
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr0;
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( ( deref( data, p )) == 32 ) {
				goto ctr3;
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr0;
			}
			{
				goto ctr1;
			}
			case 3:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr4;
			}
			{
				goto ctr1;
			}
			case 23:
			{
				goto ctr1;
			}
			case 4:
			if ( ( deref( data, p )) == 65 ) {
				goto ctr5;
			}
			{
				goto ctr1;
			}
			case 5:
			if ( ( deref( data, p )) == 32 ) {
				goto ctr6;
			}
			{
				goto ctr1;
			}
			case 6:
			switch( ( deref( data, p )) ) {
				case 101: {
					goto ctr7;
				}
				case 111: {
					goto ctr8;
				}
			}
			{
				goto ctr1;
			}
			case 7:
			if ( ( deref( data, p )) == 114 ) {
				goto ctr9;
			}
			{
				goto ctr1;
			}
			case 8:
			if ( ( deref( data, p )) == 114 ) {
				goto ctr10;
			}
			{
				goto ctr1;
			}
			case 9:
			if ( ( deref( data, p )) == 111 ) {
				goto ctr11;
			}
			{
				goto ctr1;
			}
			case 10:
			if ( ( deref( data, p )) == 114 ) {
				goto ctr12;
			}
			{
				goto ctr1;
			}
			case 11:
			if ( 49 <= ( deref( data, p )) && ( deref( data, p )) <= 50 ) {
				goto ctr13;
			}
			{
				goto ctr1;
			}
			case 12:
			if ( ( deref( data, p )) == 107 ) {
				goto ctr13;
			}
			{
				goto ctr1;
			}
			case 13:
			if ( ( deref( data, p )) == 101 ) {
				goto ctr14;
			}
			{
				goto ctr1;
			}
			case 14:
			if ( ( deref( data, p )) == 118 ) {
				goto ctr15;
			}
			{
				goto ctr1;
			}
			case 15:
			if ( ( deref( data, p )) == 101 ) {
				goto ctr16;
			}
			{
				goto ctr1;
			}
			case 16:
			if ( ( deref( data, p )) == 110 ) {
				goto ctr17;
			}
			{
				goto ctr1;
			}
			case 17:
			{
				goto ctr18;
			}
			case 24:
			{
				goto ctr1;
			}
			case 18:
			if ( ( deref( data, p )) == 111 ) {
				goto ctr19;
			}
			{
				goto ctr1;
			}
			case 19:
			if ( ( deref( data, p )) == 100 ) {
				goto ctr20;
			}
			{
				goto ctr1;
			}
			case 20:
			if ( ( deref( data, p )) == 100 ) {
				goto ctr21;
			}
			{
				goto ctr1;
			}
			case 21:
			{
				goto ctr22;
			}
			case 25:
			{
				goto ctr1;
			}
			case 22:
			{
				goto ctr1;
			}
		}
		
		ctr1: cs = 0; goto _again;
		ctr0: cs = 2; goto f0;
		ctr13: cs = 3; goto _again;
		ctr3: cs = 3; goto f1;
		ctr2: cs = 4; goto _again;
		ctr5: cs = 5; goto _again;
		ctr6: cs = 6; goto _again;
		ctr7: cs = 7; goto _again;
		ctr9: cs = 8; goto _again;
		ctr10: cs = 9; goto _again;
		ctr11: cs = 10; goto _again;
		ctr12: cs = 11; goto _again;
		ctr8: cs = 12; goto _again;
		ctr14: cs = 14; goto _again;
		ctr15: cs = 15; goto _again;
		ctr16: cs = 16; goto _again;
		ctr17: cs = 17; goto _again;
		ctr19: cs = 19; goto _again;
		ctr20: cs = 20; goto _again;
		ctr21: cs = 21; goto _again;
		ctr4: cs = 23; goto _again;
		ctr18: cs = 24; goto f2;
		ctr22: cs = 25; goto f3;
		
		f1:
		host( "working/call2.rl", 36 ) ${
			if ( num & 1 )
			${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={18}=; goto _again;}$
			else
			${stack[top] = cs; top += 1;cs = 13; goto _again;}$}$
		goto _again;
		f2:
		host( "working/call2.rl", 44 ) ${${p = p - 1; }$ ${top-= 1;cs = stack[top];goto _again;}$}$
		goto _again;
		f3:
		host( "working/call2.rl", 45 ) ${${p = p - 1; }$ ${top-= 1;cs = stack[top];goto _again;}$}$
		goto _again;
		f0:
		host( "working/call2.rl", 46 ) ${ num = num * 10 + (={( deref( data, p ))}= - '0'); }$
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/call2.rl", 72 ) @{
	}
	
	int CallTest::finish( )
	{
		if ( this->cs == CallTest_error )
		return -1;
		if ( this->cs >= CallTest_first_final )
		return 1;
		return 0;
	}
	
	#define BUFSIZE 1024
	
	void test( const char *buf )
	{   
		CallTest test;
		
		test.init();
		test.execute( buf, strlen(buf) );
		if ( test.finish() > 0 )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	int main()
	{
		test( "78 even\n" );
		test( "89 odd\n" );
		test( "1 even\n" );
		test( "0 odd\n" );
		test( "OA ok\n" );
		test( "OA error1\n" );
		test( "OA error2\n" );
		return 0;
	}
	
}@