#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_clang_key_offsets 
	private :_clang_key_offsets, :_clang_key_offsets=
end
self._clang_key_offsets = [
0, 0, 3, 6, 7, 9, 12, 13, 15, 21, 22, 42, 62, 82, 103, 124, 143, 162, 182, 0 , 
]

class << self
	attr_accessor :_clang_trans_keys 
	private :_clang_trans_keys, :_clang_trans_keys=
end
self._clang_trans_keys = [
10, 34, 92, 10, 39, 92, 10, 10, 33, 10, 33, 47, 10, 48, 57, 48, 57, 65, 70, 97, 102, 10, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0 , 
]

class << self
	attr_accessor :_clang_single_lengths 
	private :_clang_single_lengths, :_clang_single_lengths=
end
self._clang_single_lengths = [
0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 , 
]

class << self
	attr_accessor :_clang_range_lengths 
	private :_clang_range_lengths, :_clang_range_lengths=
end
self._clang_range_lengths = [
0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 , 
]

class << self
	attr_accessor :_clang_index_offsets 
	private :_clang_index_offsets, :_clang_index_offsets=
end
self._clang_index_offsets = [
0, 0, 4, 8, 10, 13, 17, 19, 21, 25, 27, 41, 55, 69, 84, 99, 112, 125, 139, 0 , 
]

class << self
	attr_accessor :_clang_trans_cond_spaces 
	private :_clang_trans_cond_spaces, :_clang_trans_cond_spaces=
end
self._clang_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_clang_trans_offsets 
	private :_clang_trans_offsets, :_clang_trans_offsets=
end
self._clang_trans_offsets = [
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 0 , 
]

class << self
	attr_accessor :_clang_trans_lengths 
	private :_clang_trans_lengths, :_clang_trans_lengths=
end
self._clang_trans_lengths = [
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_clang_cond_keys 
	private :_clang_cond_keys, :_clang_cond_keys=
end
self._clang_cond_keys = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_clang_cond_targs 
	private :_clang_cond_targs, :_clang_cond_targs=
end
self._clang_cond_targs = [
1, 12, 9, 1, 2, 12, 3, 2, 2, 2, 4, 5, 4, 4, 5, 10, 4, 10, 6, 15, 0, 18, 18, 18, 0, 1, 1, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 , 
]

class << self
	attr_accessor :_clang_cond_actions 
	private :_clang_cond_actions, :_clang_cond_actions=
end
self._clang_cond_actions = [
2, 0, 0, 1, 2, 0, 0, 1, 2, 1, 3, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 4, 4, 4, 0, 2, 1, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0 , 
]

class << self
	attr_accessor :_clang_eof_actions 
	private :_clang_eof_actions, :_clang_eof_actions=
end
self._clang_eof_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 , 
]

class << self
	attr_accessor :_clang_nfa_targs 
	private :_clang_nfa_targs, :_clang_nfa_targs=
end
self._clang_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_offsets 
	private :_clang_nfa_offsets, :_clang_nfa_offsets=
end
self._clang_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_push_actions 
	private :_clang_nfa_push_actions, :_clang_nfa_push_actions=
end
self._clang_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_pop_trans 
	private :_clang_nfa_pop_trans, :_clang_nfa_pop_trans=
end
self._clang_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :clang_start 
end
self.clang_start  = 10;

class << self
	attr_accessor :clang_first_final 
end
self.clang_first_final  = 10;

class << self
	attr_accessor :clang_error 
end
self.clang_error  = 0;

class << self
	attr_accessor :clang_en_main 
end
self.clang_en_main  = 10;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	pos = 1
	line = 1
	pos = 0;
	line = 1;
	begin
		cs = clang_start;
		
	end
	begin
		_klen= 0
		;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		_trans= 0
		;
		_cond = 0;
		_have = 0;
		_cont = 1;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _have == 0  )
									begin
										case  _clang_eof_actions[cs]  
										when -2 then
										begin
										end
										when 22  then
										begin
											begin
												print( "ident(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
										end
										when 10  then
										begin
											begin
												print( "literal(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
										end
										when 18  then
										begin
											begin
												print( "float(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
										end
										when 14  then
										begin
											begin
												print( "int(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
										end
										when 26  then
										begin
											begin
												print( "hex(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
										end
										when 6  then
										begin
											begin
												print( "symbol(" );
												print( line );
												print( "," );
												print( blen );
												print( "): " );
												print( buffer[0..blen-1].pack( "c*" ) );
												print( "\n" );
												
											end
											
											
										end
									end
									
								end
								
							end
							
						end
						
					end
					if ( _have == 0  )
						_cont = 0;
						
					end
					
				end
				
			end
			if ( _cont == 1  )
				begin
					if ( _have == 0  )
						begin
							_keys = _clang_key_offsets[cs] ;
							_trans = _clang_index_offsets[cs];
							_have = 0;
							_klen = _clang_single_lengths[cs];
							if ( _klen > 0  )
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[p ].ord) < _clang_trans_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( ( data[p ].ord) > _clang_trans_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_trans += (_mid - _keys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											_keys += _klen;
											_trans += _klen;
											
										end
										
									end
									
								end
								
							end
							if ( _have == 0  )
								begin
									_klen = _clang_range_lengths[cs];
									if ( _klen > 0  )
										begin
											_lower = 0;
											_mid = 0;
											_upper = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
												begin
													_mid = _lower + (((_upper-_lower) >> 1) & ~1);
													if ( ( data[p ].ord) < _clang_trans_keys[_mid ] )
														_upper = _mid - 2;
														
														elsif ( ( data[p ].ord) > _clang_trans_keys[_mid + 1 ] )
														_lower = _mid + 2;
														
														else
														begin
															_trans += ((_mid - _keys)>>1);
															_have = 1;
															
														end
														
													end
													
												end
												
											end
											if ( _have == 0  )
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								
							end
							_ckeys = _clang_trans_offsets[_trans] ;
							_klen = _clang_trans_lengths[_trans];
							_cond = _clang_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							begin
								_lower = 0;
								_mid = 0;
								_upper = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
									begin
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( _cpc < _clang_cond_keys[_mid ] )
											_upper = _mid - 1;
											
											elsif ( _cpc > _clang_cond_keys[_mid ] )
											_lower = _mid + 1;
											
											else
											begin
												_cond += (_mid - _ckeys);
												_have = 1;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										cs = 0;
										_cont = 0;
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _clang_cond_targs[_cond];
							case  _clang_cond_actions[_cond]  
							when -2 then
							begin
							end
							when 1  then
							begin
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 5  then
							begin
								begin
									blen = 0;
									
								end
								
							end
							when 3  then
							begin
								begin
									line = line + 1;
									
								end
								
							end
							when 22  then
							begin
								begin
									print( "ident(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 10  then
							begin
								begin
									print( "literal(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 18  then
							begin
								begin
									print( "float(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 14  then
							begin
								begin
									print( "int(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 26  then
							begin
								begin
									print( "hex(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 6  then
							begin
								begin
									print( "symbol(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								
							end
							when 2  then
							begin
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 4  then
							begin
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 25  then
							begin
								begin
									print( "ident(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 23  then
							begin
								begin
									print( "ident(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 13  then
							begin
								begin
									print( "literal(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 11  then
							begin
								begin
									print( "literal(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 21  then
							begin
								begin
									print( "float(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 19  then
							begin
								begin
									print( "float(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 17  then
							begin
								begin
									print( "int(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 15  then
							begin
								begin
									print( "int(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 29  then
							begin
								begin
									print( "hex(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 27  then
							begin
								begin
									print( "hex(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 9  then
							begin
								begin
									print( "symbol(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								
							end
							when 7  then
							begin
								begin
									print( "symbol(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									line = line + 1;
									
								end
								
							end
							when 24  then
							begin
								begin
									print( "ident(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 12  then
							begin
								begin
									print( "literal(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 20  then
							begin
								begin
									print( "float(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 16  then
							begin
								begin
									print( "int(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 28  then
							begin
								begin
									print( "hex(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
							end
							when 8  then
							begin
								begin
									print( "symbol(" );
									print( line );
									print( "," );
									print( blen );
									print( "): " );
									print( buffer[0..blen-1].pack( "c*" ) );
									print( "\n" );
									
								end
								begin
									blen = 0;
									
								end
								begin
									buffer[blen] = ( data[p ].ord);
									blen += 1;
									
								end
								
								
							end
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= clang_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
	"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
	]
	
	inplen = 2
	
	inp.each { |str| run_machine(str) }
	
