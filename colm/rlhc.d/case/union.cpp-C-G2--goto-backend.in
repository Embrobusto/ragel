host( "working/union.rl", 1 ) @{/*
	* @@LANG: c++
	* Show off concurrent abilities.
	*/
	
	#include <iostream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	
	using namespace std;
	
	#define BUFSIZE 2048
	
	struct Concurrent
	{
		Concurrent() :
		cur_char(0),
		start_word(0),
		start_comment(0),
		start_literal(0)
		{}
		
		int cur_char;
		int start_word;
		int start_comment;
		int start_literal;
		
		int cs;
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		void init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		void execute( const char *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
	};
	
	
	
}@
value int Concurrent_start = 0;
value int Concurrent_first_final = 0;
value int Concurrent_error = -1;

value int Concurrent_en_main = 0;

array s8 _Concurrent_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Concurrent_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Concurrent_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Concurrent_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/union.rl", 100 ) @{
	
	void Concurrent::init( )
	{
		cur_char = 0;
	}@
	{
		cs = cast(int)Concurrent_start;
	}
	host( "working/union.rl", 105 ) @{
	}
	
	void Concurrent::execute( const char *data, int len )
	{
		const char *p = data;
		const char *pe = data + len;
		const char *eof = pe;
		
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( cs )
		{
			case 0:
			goto st_case_0;
			case 1:
			goto st_case_1;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			case 12:
			goto st_case_12;
			case 13:
			goto st_case_13;
			case 14:
			goto st_case_14;
			case 15:
			goto st_case_15;
			case 16:
			goto st_case_16;
			case 17:
			goto st_case_17;
		}
		goto st_out;
		ctr1:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st0;
		ctr5:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		
		goto st0;
		ctr19:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st0;
		ctr46:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st0;
		st0:
		p+= 1;
		if ( p == pe )
		goto _test_eof0;
		st_case_0:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr1;
			}
			case 39: {
				goto ctr2;
			}
			case 47: {
				goto ctr3;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr1;
		}
		{
			goto ctr0;
		}
		ctr0:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st1;
		ctr4:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st1;
		ctr18:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st1;
		ctr45:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st1;
		st1:
		p+= 1;
		if ( p == pe )
		goto _test_eof1;
		st_case_1:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr5;
			}
			case 39: {
				goto ctr6;
			}
			case 47: {
				goto ctr7;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr5;
		}
		{
			goto ctr4;
		}
		ctr13:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st2;
		ctr8:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st2;
		ctr2:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st2;
		ctr6:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st2;
		ctr20:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st2;
		ctr50:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st2;
		ctr47:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr9;
			}
			case 39: {
				goto ctr10;
			}
			case 47: {
				goto ctr11;
			}
			case 92: {
				goto ctr12;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr9;
		}
		{
			goto ctr8;
		}
		ctr14:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st3;
		ctr9:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		
		goto st3;
		ctr51:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st3;
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr14;
			}
			case 39: {
				goto ctr15;
			}
			case 47: {
				goto ctr16;
			}
			case 92: {
				goto ctr17;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr14;
		}
		{
			goto ctr13;
		}
		ctr15:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st4;
		ctr10:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st4;
		ctr52:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st4;
		st4:
		p+= 1;
		if ( p == pe )
		goto _test_eof4;
		st_case_4:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr19;
			}
			case 39: {
				goto ctr20;
			}
			case 47: {
				goto ctr21;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr19;
		}
		{
			goto ctr18;
		}
		ctr3:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st5;
		ctr7:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st5;
		ctr21:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st5;
		ctr48:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st5;
		st5:
		p+= 1;
		if ( p == pe )
		goto _test_eof5;
		st_case_5:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr5;
			}
			case 39: {
				goto ctr6;
			}
			case 42: {
				goto ctr22;
			}
			case 47: {
				goto ctr7;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr5;
		}
		{
			goto ctr4;
		}
		ctr26:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st6;
		ctr22:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st6;
		ctr40:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st6;
		st6:
		p+= 1;
		if ( p == pe )
		goto _test_eof6;
		st_case_6:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr23;
			}
			case 39: {
				goto ctr24;
			}
			case 42: {
				goto ctr25;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr23;
		}
		{
			goto ctr22;
		}
		ctr27:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st7;
		ctr23:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		
		goto st7;
		ctr41:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st7;
		st7:
		p+= 1;
		if ( p == pe )
		goto _test_eof7;
		st_case_7:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr27;
			}
			case 39: {
				goto ctr28;
			}
			case 42: {
				goto ctr29;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr27;
		}
		{
			goto ctr26;
		}
		ctr35:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st8;
		ctr30:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st8;
		ctr28:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st8;
		ctr24:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st8;
		ctr42:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 72 ) ${
			start_literal = cur_char;
		}$
		
		goto st8;
		st8:
		p+= 1;
		if ( p == pe )
		goto _test_eof8;
		st_case_8:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr31;
			}
			case 39: {
				goto ctr32;
			}
			case 42: {
				goto ctr33;
			}
			case 92: {
				goto ctr34;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr31;
		}
		{
			goto ctr30;
		}
		ctr36:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st9;
		ctr31:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 59 ) ${
			cout << "word: " << start_word << 
			" " << cur_char-1 << endl;
		}$
		
		goto st9;
		st9:
		p+= 1;
		if ( p == pe )
		goto _test_eof9;
		st_case_9:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr36;
			}
			case 39: {
				goto ctr37;
			}
			case 42: {
				goto ctr38;
			}
			case 92: {
				goto ctr39;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr36;
		}
		{
			goto ctr35;
		}
		ctr37:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st10;
		ctr32:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st10;
		st10:
		p+= 1;
		if ( p == pe )
		goto _test_eof10;
		st_case_10:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr41;
			}
			case 39: {
				goto ctr42;
			}
			case 42: {
				goto ctr43;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr41;
		}
		{
			goto ctr40;
		}
		ctr29:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st11;
		ctr25:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st11;
		ctr43:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 75 ) ${
			cout << "literal: " << start_literal <<
			" " << cur_char-1 << endl;
		}$
		
		goto st11;
		st11:
		p+= 1;
		if ( p == pe )
		goto _test_eof11;
		st_case_11:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr23;
			}
			case 39: {
				goto ctr24;
			}
			case 42: {
				goto ctr25;
			}
			case 47: {
				goto ctr44;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr23;
		}
		{
			goto ctr22;
		}
		ctr44:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st12;
		st12:
		p+= 1;
		if ( p == pe )
		goto _test_eof12;
		st_case_12:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr46;
			}
			case 39: {
				goto ctr47;
			}
			case 47: {
				goto ctr48;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr46;
		}
		{
			goto ctr45;
		}
		ctr38:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st13;
		ctr33:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st13;
		st13:
		p+= 1;
		if ( p == pe )
		goto _test_eof13;
		st_case_13:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr31;
			}
			case 39: {
				goto ctr32;
			}
			case 42: {
				goto ctr33;
			}
			case 47: {
				goto ctr49;
			}
			case 92: {
				goto ctr34;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr31;
		}
		{
			goto ctr30;
		}
		ctr49:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st14;
		st14:
		p+= 1;
		if ( p == pe )
		goto _test_eof14;
		st_case_14:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr51;
			}
			case 39: {
				goto ctr52;
			}
			case 47: {
				goto ctr53;
			}
			case 92: {
				goto ctr54;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr51;
		}
		{
			goto ctr50;
		}
		ctr16:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st15;
		ctr11:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st15;
		ctr53:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		host( "working/union.rl", 64 ) ${
			start_comment = cur_char;
		}$
		
		goto st15;
		st15:
		p+= 1;
		if ( p == pe )
		goto _test_eof15;
		st_case_15:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr9;
			}
			case 39: {
				goto ctr10;
			}
			case 42: {
				goto ctr30;
			}
			case 47: {
				goto ctr11;
			}
			case 92: {
				goto ctr12;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr9;
		}
		{
			goto ctr8;
		}
		ctr17:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st16;
		ctr12:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st16;
		ctr54:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 67 ) ${
			cout << "comment: " << start_comment <<
			" " << cur_char-1 << endl;
		}$
		
		goto st16;
		st16:
		p+= 1;
		if ( p == pe )
		goto _test_eof16;
		st_case_16:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr9;
			}
			case 47: {
				goto ctr11;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr9;
		}
		{
			goto ctr8;
		}
		ctr39:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		host( "working/union.rl", 56 ) ${
			start_word = cur_char;
		}$
		
		goto st17;
		ctr34:
		host( "working/union.rl", 52 ) ${
			cur_char += 1;
		}$
		
		goto st17;
		st17:
		p+= 1;
		if ( p == pe )
		goto _test_eof17;
		st_case_17:
		switch( ( deref( data, p )) ) {
			case 32: {
				goto ctr31;
			}
			case 42: {
				goto ctr33;
			}
		}
		if ( 9 <= ( deref( data, p )) && ( deref( data, p )) <= 13 ) {
			goto ctr31;
		}
		{
			goto ctr30;
		}
		st_out:
		_test_eof0: cs = 0; goto _test_eof; 
		_test_eof1: cs = 1; goto _test_eof; 
		_test_eof2: cs = 2; goto _test_eof; 
		_test_eof3: cs = 3; goto _test_eof; 
		_test_eof4: cs = 4; goto _test_eof; 
		_test_eof5: cs = 5; goto _test_eof; 
		_test_eof6: cs = 6; goto _test_eof; 
		_test_eof7: cs = 7; goto _test_eof; 
		_test_eof8: cs = 8; goto _test_eof; 
		_test_eof9: cs = 9; goto _test_eof; 
		_test_eof10: cs = 10; goto _test_eof; 
		_test_eof11: cs = 11; goto _test_eof; 
		_test_eof12: cs = 12; goto _test_eof; 
		_test_eof13: cs = 13; goto _test_eof; 
		_test_eof14: cs = 14; goto _test_eof; 
		_test_eof15: cs = 15; goto _test_eof; 
		_test_eof16: cs = 16; goto _test_eof; 
		_test_eof17: cs = 17; goto _test_eof; 
		
		_test_eof: {}
		if ( p == eof )
		{
			switch ( cs ) {
				case 1: 
				fallthrough;
				case 2: 
				fallthrough;
				case 5: 
				fallthrough;
				case 6: 
				fallthrough;
				case 8: 
				fallthrough;
				case 11: 
				fallthrough;
				case 13: 
				fallthrough;
				case 15: 
				fallthrough;
				case 16: 
				fallthrough;
				case 17: 
				host( "working/union.rl", 59 ) ${
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
				}$
				break;
				case 12: 
				fallthrough;
				case 14: 
				host( "working/union.rl", 59 ) ${
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
				}$	host( "working/union.rl", 67 ) ${
					cout << "comment: " << start_comment <<
					" " << cur_char-1 << endl;
				}$
				break;
				case 4: 
				fallthrough;
				case 10: 
				host( "working/union.rl", 59 ) ${
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
				}$	host( "working/union.rl", 75 ) ${
					cout << "literal: " << start_literal <<
					" " << cur_char-1 << endl;
				}$
				break;
			}
		}
		
	}
	host( "working/union.rl", 114 ) @{
	}
	
	int Concurrent::finish( )
	{
		if ( cs == Concurrent_error )
		return -1;
		if ( cs >= Concurrent_first_final )
		return 1;
		return 0;
	}
	
	void test( const char *buf )
	{
		Concurrent concurrent;
		concurrent.init();
		concurrent.execute( buf, strlen(buf) );
		if ( concurrent.finish() > 0 )
		cout << "ACCEPT" << endl;
		else
		cout << "FAIL" << endl;
	}
	
	int main()
	{
		test( 
		"/* in a comment,\n"
		" * ' and now in a literal string\n"
		" */ \n"
		" \n"
		"the comment has now ended but the literal string lives on\n"
		"\n"
		"' comment closed\n" );
		test( "/* * ' \\' */ \\' '\n" );
		test( "/**/'\\''/*/*/\n" );
		return 0;
	}
	
}@