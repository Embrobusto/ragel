package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var _zlen1_key_offsets [] int8  = [] int8  { 0, 0, 0  }
var _zlen1_trans_keys [] byte  = [] byte  { 0 }
var _zlen1_single_lengths [] int8  = [] int8  { 0, 0, 0  }
var _zlen1_range_lengths [] int8  = [] int8  { 0, 0, 0  }
var _zlen1_index_offsets [] int8  = [] int8  { 0, 0, 0  }
var _zlen1_trans_cond_spaces [] int8  = [] int8  { -1, 0  }
var _zlen1_trans_offsets [] int8  = [] int8  { 0, 0  }
var _zlen1_trans_lengths [] int8  = [] int8  { 1, 0  }
var _zlen1_cond_keys [] int8  = [] int8  { 0, 0  }
var _zlen1_cond_targs [] int8  = [] int8  { 0, 0  }
var _zlen1_cond_actions [] int8  = [] int8  { 0, 0  }
var _zlen1_nfa_targs [] int8  = [] int8  { 0, 0  }
var _zlen1_nfa_offsets [] int8  = [] int8  { 0, 0, 0  }
var _zlen1_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _zlen1_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var zlen1_start  int  = 1
var zlen1_first_final  int  = 1
var zlen1_error  int  = 0
var zlen1_en_main  int  = 1
func prepare() {

	{
		cs = int(zlen1_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _klen int 
		var  _trans  uint   = 0
		var  _cond  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int(_zlen1_key_offsets[cs] );
								_trans = uint(_zlen1_index_offsets[cs]);
								_have = 0;
								_klen = int(_zlen1_single_lengths[cs]);
								if _klen > 0  {
									{
										var  _lower int
										var  _mid int
										var  _upper int
										_lower = _keys;
										_upper = _keys + _klen - 1;
										for _upper >= _lower && _have == 0  {
											{
												_mid = _lower + ((_upper-_lower) >> 1);
												switch {
													case ( data[p ]) < _zlen1_trans_keys[_mid ]:
													_upper = _mid - 1;
													
													case ( data[p ]) > _zlen1_trans_keys[_mid ]:
													_lower = _mid + 1;
													
													default:
													{
														_trans += uint((_mid - _keys));
														_have = 1;
													}
													
												}
											}
											
										}
										if _have == 0  {
											{
												_keys += _klen;
												_trans += uint(_klen);
											}
											
										}
									}
									
									
								}
								if _have == 0  {
									{
										_klen = int(_zlen1_range_lengths[cs]);
										if _klen > 0  {
											{
												var  _lower int
												var  _mid int
												var  _upper int
												_lower = _keys;
												_upper = _keys + (_klen<<1) - 2;
												for _have == 0 && _lower <= _upper  {
													{
														_mid = _lower + (((_upper-_lower) >> 1) & ^1);
														switch {
															case ( data[p ]) < _zlen1_trans_keys[_mid ]:
															_upper = _mid - 2;
															
															case ( data[p ]) > _zlen1_trans_keys[_mid + 1 ]:
															_lower = _mid + 2;
															
															default:
															{
																_trans += uint(((_mid - _keys)>>1));
																_have = 1;
															}
															
														}
													}
													
												}
												if _have == 0  {
													_trans += uint(_klen);
													
												}
											}
											
										}
									}
									
									
								}
								_ckeys = int(_zlen1_trans_offsets[_trans] );
								_klen = int(_zlen1_trans_lengths[_trans]);
								_cond = uint(_zlen1_trans_offsets[_trans]);
								_have = 0;
								_cpc = 0;
								{
									var  _lower int
									var  _mid int
									var  _upper int
									_lower = _ckeys;
									_upper = _ckeys + _klen - 1;
									for _have == 0 && _lower <= _upper  {
										{
											_mid = _lower + ((_upper-_lower) >> 1);
											switch {
												case _cpc < int(_zlen1_cond_keys[_mid ]):
												_upper = _mid - 1;
												
												case _cpc > int(_zlen1_cond_keys[_mid ]):
												_lower = _mid + 1;
												
												default:
												{
													_cond += uint((_mid - _ckeys));
													_have = 1;
												}
												
											}
										}
										
									}
									if _have == 0  {
										{
											cs = 0;
											_cont = 0;
										}
										
									}
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_zlen1_cond_targs[_cond]);
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
							
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= zlen1_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"",
	"x",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
