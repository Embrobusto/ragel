#include <string.h>
#include <stdio.h>

int neg ;
int value ;





static const char  _state_chart_actions [] = { 0, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 ,  };
static const char  _state_chart_nfa_targs [] = { 0, 0 ,  };
static const char  _state_chart_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _state_chart_nfa_push_actions [] = { 0, 0 ,  };
static const char  _state_chart_nfa_pop_trans [] = { 0, 0 ,  };
static const int  state_chart_start  = 3;
static const int  state_chart_first_final  = 3;
static const int  state_chart_error  = 0;
static const int  state_chart_en_main  = 3;
int cs;
int blen;
char buffer[1024];

void init()
{
	value = 0;
	neg = 0;
	
	{
		cs = ( int ) state_chart_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		switch ( cs  ) {
			case 3:
			switch ( ((*( p  ))
			) ) {
				case 43:
				{
					goto ctr3;
				}
				case 45:
				{
					goto ctr4;
				}
				
			}
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 57  )
			{
				goto ctr5;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 1:
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 57  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 2:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr2;
			}
			
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 57  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr3: cs = 1;
		goto f2;
		ctr4: cs = 1;
		goto f3;
		ctr0: cs = 2;
		goto f0;
		ctr5: cs = 2;
		goto f4;
		ctr2: cs = 3;
		goto f1;
		
		f2: _acts = _state_chart_actions + 1 ;
		goto execFuncs;
		f0: _acts = _state_chart_actions + 3 ;
		goto execFuncs;
		f3: _acts = _state_chart_actions + 5 ;
		goto execFuncs;
		f4: _acts = _state_chart_actions + 8 ;
		goto execFuncs;
		f1: _acts = _state_chart_actions + 11 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					neg = 0;
					value = 0;
					
				}
				
				break;
				case 1:
				{
					neg = 1;
					
				}
				
				break;
				case 2:
				{
					value = value * 10 + ( int ) ( (((*( p  ))
					)) - 48 )
					;
					
				}
				
				break;
				case 3:
				{
					if ( neg != 0 )
					{
						value = -1 * value;
						
					} 
					
				}
				
				break;
				case 4:
				{
					printf( "%d", value );
					printf( "%s", "\n" );
					
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
	}
}

void finish( )
{
	if ( cs >= state_chart_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
};

int inplen = 9;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

