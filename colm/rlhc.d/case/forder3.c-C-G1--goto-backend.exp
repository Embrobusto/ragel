#include <stdio.h>
#include <string.h>

struct forder
{
	int cs;
};



static const char  _forder_nfa_targs [] = { 0, 0 ,  };
static const char  _forder_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _forder_nfa_push_actions [] = { 0, 0 ,  };
static const char  _forder_nfa_pop_trans [] = { 0, 0 ,  };
static const int  forder_start  = 1;
static const int  forder_first_final  = 11;
static const int  forder_error  = 0;
static const int  forder_en_main  = 1;
void forder_init( struct forder *fsm )
{

	{
		(fsm->cs) = ( int ) forder_start;
	}
}

void forder_execute( struct forder *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		if ( (fsm->cs) == 0  )
		goto _out;
		
		_resume:
		switch ( (fsm->cs) ) {
			case 1:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr0;
				}
				case 97:
				{
					goto ctr2;
				}
				case 98:
				{
					goto ctr3;
				}
				
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 11:
			{
				goto ctr1;
			}
			case 2:
			if ( ((*( p  ))
			)== 97  )
			{
				goto ctr4;
			}
			
			{
				goto ctr1;
			}
			case 3:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr5;
				}
				case 97:
				{
					goto ctr6;
				}
				case 98:
				{
					goto ctr7;
				}
				
			}
			{
				goto ctr1;
			}
			case 4:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr8;
				}
				case 97:
				{
					goto ctr9;
				}
				case 98:
				{
					goto ctr10;
				}
				
			}
			{
				goto ctr1;
			}
			case 5:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr8;
				}
				case 97:
				{
					goto ctr9;
				}
				
			}
			{
				goto ctr1;
			}
			case 6:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr8;
				}
				case 97:
				{
					goto ctr9;
				}
				case 98:
				{
					goto ctr11;
				}
				
			}
			{
				goto ctr1;
			}
			case 7:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr8;
				}
				case 97:
				{
					goto ctr9;
				}
				case 98:
				{
					goto ctr12;
				}
				
			}
			{
				goto ctr1;
			}
			case 8:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr13;
				}
				case 97:
				{
					goto ctr14;
				}
				case 98:
				{
					goto ctr15;
				}
				
			}
			{
				goto ctr1;
			}
			case 9:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr8;
				}
				case 97:
				{
					goto ctr16;
				}
				
			}
			{
				goto ctr1;
			}
			case 10:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr13;
				}
				case 97:
				{
					goto ctr14;
				}
				
			}
			{
				goto ctr1;
			}
			
		}
		ctr1: (fsm->cs) = 0;
		goto _again;
		ctr6: (fsm->cs) = 2;
		goto _again;
		ctr2: (fsm->cs) = 2;
		goto f1;
		ctr4: (fsm->cs) = 3;
		goto _again;
		ctr10: (fsm->cs) = 4;
		goto _again;
		ctr7: (fsm->cs) = 4;
		goto f4;
		ctr9: (fsm->cs) = 5;
		goto _again;
		ctr15: (fsm->cs) = 6;
		goto _again;
		ctr3: (fsm->cs) = 6;
		goto f2;
		ctr11: (fsm->cs) = 7;
		goto _again;
		ctr12: (fsm->cs) = 8;
		goto _again;
		ctr14: (fsm->cs) = 9;
		goto _again;
		ctr16: (fsm->cs) = 10;
		goto _again;
		ctr0: (fsm->cs) = 11;
		goto f0;
		ctr5: (fsm->cs) = 11;
		goto f3;
		ctr8: (fsm->cs) = 11;
		goto f5;
		ctr13: (fsm->cs) = 11;
		goto f6;
		
		f5:
		{
			printf("accept m1\n");
		}
		
		goto _again;
		f3:
		{
			printf("accept m2\n");
		}
		
		goto _again;
		f1:
		{
			printf("enter m1 aa\n");
		}
		{
			printf("enter m2\n");
		}
		
		goto _again;
		f4:
		{
			printf("leave m1 aa\n");
		}
		{
			printf("through m1 b\n");
		}
		
		goto _again;
		f6:
		{
			printf("accept m1\n");
		}
		{
			printf("accept m2\n");
		}
		
		goto _again;
		f0:
		{
			printf("enter m2\n");
		}
		{
			printf("enter m2\n");
		}
		{
			printf("accept m2\n");
		}
		
		goto _again;
		f2:
		{
			printf("enter m1 aa\n");
		}
		{
			printf("enter m1 aa\n");
		}
		{
			printf("leave m1 aa\n");
		}
		{
			printf("through m1 b\n");
		}
		{
			printf("enter m2\n");
		}
		
		goto _again;
		
		_again:
		if ( (fsm->cs) == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
	}
}

int forder_finish( struct forder *fsm )
{
	if ( fsm->cs == forder_error )
	return -1;
	if ( fsm->cs >= forder_first_final )
	return 1;
	return 0;
}

struct forder fsm;

void test( char *buf )
{
	int len = strlen( buf );
	forder_init( &fsm );
	forder_execute( &fsm, buf, len );
	if ( forder_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test( "aaaaaabbbaa\n" );
	test( "\n" );
	test( "bbbbbbaaaaaaa\n" );
	test( "bbbbbbaaaaaa\n" );
	test( "aaaaa\n" );
	
	return 0;
}

