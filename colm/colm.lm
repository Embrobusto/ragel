# Main region.
lex
	token DEF / 'def' /
	token LEX / 'lex' /
	token END / 'end' /
	token TOKEN / 'token' /
	token IGNORE / 'ignore' /
	token PRINT / 'print' /
	token PARSE / 'parse' /
	token NAMESPACE / 'namespace' /
	token FOR / 'for' /
	token IF / 'if' /
	token ELSIF / 'elsif' /
	token ELSE / 'else' /
	token IN / 'in' /

	token NIL / 'nil' /
	token TRUE / 'true' /
	token FALSE / 'false' /

	token id / 
		( 'a' .. 'z' | 'A' .. 'Z' | '_' ) .
		( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' ) *
	/

	token number / 
		( '0' .. '9' ) .
		( '0' .. '9' ) *
	/

	token lit /
		'\'' . ( ^( '\'' | '\\' ) | '\\' . any )* .  '\''
	/

	token SQOPEN /'['/
	token SQCLOSE /']'/
	token BAR /'|'/
	token FSLASH /'/'/
	token COLON /':'/
	token DOUBLE_COLON /'::'/
	token DOT /'.'/
	token ARROW /'->'/
	token POPEN /'('/
	token PCLOSE /')'/
	token COPEN /'{'/
	token CCLOSE /'}'/
	token STAR /'*'/
	token PLUS /'+'/
	token QUESTION /'?'/
	token EQUALS /'='/

	ignore / 
		( '\n' | '\t' | ' ' ) .
		( '\n' | '\t' | ' ' )* 
	/

	ignore / '#' . ( ^'\n' )* . '\n' /
end

lex
	token lex_id / 
		( 'a' .. 'z' | 'A' .. 'Z' | '_' ) .
		( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' ) *
	/

	token lex_number / ( '0' .. '9' ) . ( '0' .. '9' ) * /
	token lex_lit / '\'' . ( ^( '\'' | '\\' ) | '\\' . any )* .  '\'' /

	token LEX_DOT /'.'/
	token LEX_BAR /'|'/
	token LEX_POPEN /'('/
	token LEX_PCLOSE /')'/
	token LEX_STAR /'*'/
	token LEX_CARET /'^'/
	token LEX_DOTDOT /'..'/
	token LEX_SQOPEN_POS /'['/
	token LEX_SQOPEN_NEG /'[^'/

	ignore / 
		( '\n' | '\t' | ' ' ) .
		( '\n' | '\t' | ' ' )* 
	/

	ignore / '#' . ( ^'\n' )* . '\n' /
end

lex
	token RE_DASH / '-' /
	token RE_CHAR / ^( '\\' | '-' | ']' ) | '\\' . any /
	token RE_SQCLOSE / ']' /
end

def start
	[RootItemList: root_item*]

def root_item
#	[literal_def]
#|	[rl_def]
#|	[token_def]
	[CflDef: cfl_def]
|	[RegionDef: region_def]
#|	[context_def]
|	[NamespaceDef: namespace_def]
#|	[function_def]
#|	[iter_def]
#|	[global_def]
#|	[export_def]
|	[Statement: statement]
#|	[pre_eof]
#|	[precedence]
#|	[typedef]

def namespace_def
	[NAMESPACE Name: id RootItemList: root_item* END]

def cfl_def
	[DEF DefId: id ProdList: prod_list]

def region_def
	[LEX TokenList: token_list END]

def token_list
	[TokenList: token_list TokenDef: token_def]
|	[TokenList: token_list IgnoreDef: ignore_def]
|	[]

def token_def
	[TOKEN Id: id FSLASH Expr: lex_expr FSLASH]

def ignore_def
	[IGNORE FSLASH Expr: lex_expr FSLASH]

def prod_el
	[OptName: opt_prod_name Id: id OptRepeat: opt_prod_repeat]

def opt_prod_name
	[Name: id COLON]
|	[]

def opt_prod_repeat
	[Star: STAR]
|	[]

def prod_el_list
	[ProdElList: prod_el_list ProdEl: prod_el]
|	[]

def prod
	[SQOPEN ProdElList: prod_el_list SQCLOSE]

def prod_list
	[ProdList: prod_list BAR Prod: prod]
|	[Prod: prod]

def statement
	[Print: print_stmt]
|	[Expr: expr_stmt]
|	[VarDef: var_def OptDefInit: opt_def_init]
|	[FOR ForDecl: id COLON TypeRef: type_ref IN IterCall: iter_call BlockOrSingle: block_or_single]
|	[IF IfExpr: code_expr BlockOrSingle: block_or_single ElsifList: elsif_list]

def elsif_list
	[ElsifClause: elsif_clause ElsifList: elsif_list]
|	[OptionalElse: optional_else]

def elsif_clause
	[ELSIF ElsifExpr: code_expr BlockOrSingle: block_or_single]

def optional_else
	[ELSE BlockOrSingle: block_or_single]
|	[]

def iter_call
	[VarRef: var_ref POPEN CodeExprList: code_expr* PCLOSE]
|	[Id: id]

def block_or_single
	[COPEN LangStmtList: lang_stmt_list CCLOSE]
|	[Statement: statement]

def lang_stmt_list
	[StmtList: statement*]

def opt_def_init
	[EQUALS CodeExpr: code_expr]
|	[]

def var_def
	[Id: id COLON TypeRef: type_ref]

def print_stmt
	[PRINT POPEN CodeExprList: code_expr* PCLOSE]

def expr_stmt
	[CodeExpr: code_expr]

def code_expr
	[CodeFactor: code_factor]

def code_factor
	[Number: number]
|	[Lit: lit]
|	[VarRef: var_ref POPEN CodeExprList: code_expr* PCLOSE]
|	[VarRef: var_ref]
|	[Parse: PARSE OptCapture: opt_capture TypeRef: type_ref opt_field_init Accumulate: accumulate]
|	[Nil: NIL]
|	[True: TRUE]
|	[False: FALSE]
|	[POPEN ParenCodeExpr: code_expr PCLOSE]

def type_ref
	[RegionQual: region_qual Id: id OptRepeat: opt_repeat]

def region_qual
	[RegionQual: region_qual Id: id DOUBLE_COLON]
|	[]

def opt_repeat
	[Star: STAR]
|	[Plus: PLUS]
|	[Question: QUESTION]
|	[]

def opt_capture
	[Id: id COLON]
|	[]

def opt_field_init
	[]

def accumulate 
	[SQOPEN Id: id SQCLOSE]

def var_ref
	[Qual: qual Id: id]

def qual
	[Qual: qual Id: id Dot: DOT]
|	[Qual: qual Id: id Arrow: ARROW]
|	[]

def lex_expr
	[Expr: lex_expr LEX_BAR Term: lex_term]
|	[Term: lex_term]

def lex_term
	[Term: lex_term LEX_DOT FactorRep: lex_factor_rep]
|	[FactorRep: lex_factor_rep]

def lex_factor_rep
	[FactorRep: lex_factor_rep LEX_STAR]
|	[FactorNeg: lex_factor_neg]

def lex_factor_neg
	[LEX_CARET FactorNeg: lex_factor_neg]
|	[Factor: lex_factor]

def lex_factor
	[Literal: lex_lit]
|	[LEX_POPEN Expr: lex_expr LEX_PCLOSE]
|	[Low: lex_lit LEX_DOTDOT High: lex_lit]
|	[LEX_SQOPEN_POS PosData: reg_or_data RE_SQCLOSE]
|	[LEX_SQOPEN_NEG NegData: reg_or_data RE_SQCLOSE]

def reg_or_data
	[Data: reg_or_data Char: reg_or_char]
|	[]

def reg_or_char
	[Char: RE_CHAR]
|	[Low: RE_CHAR RE_DASH High: RE_CHAR]
