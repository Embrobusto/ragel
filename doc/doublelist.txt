
***********************************************************************
                         AAPL Documentation
                         ------------------

                            Double List
                            -----------

                             March 2002
                          Adrian Thurston
***********************************************************************


                              CONTENTS

1. Overview
  1.1 Introduction
  1.2 Quick Usage Examples

2. Double List Flavours
  2.1 DList
  2.2 DListMel
  2.3 DListVal

3. Common Double List
  3.1  Constructors & Destructors
  3.2  abandon
  3.3  empty
  3.4  addAfter
  3.5  addBefore
  3.6  append
  3.7  prepend
  3.8  detach
  3.9  detachFirst
  3.10 detachLast
  3.11 Data Members


                            1. DOUBLE LIST
                            **************

1.1 Introduction
================

Any structure can become an element that goes in a DList by inheriting
from the DListEl template class. Structures can be elements in more that
one DList by inheriting from distinct DListEl classes.  Like AvlMel,
DListMel is able to resolve ambiguities in which DListEl data memebers
to access when doing list operations.


1.2 Quick Usage Examples
========================

Example 1. This demonstates use of the DListVal by-value double list type.
-----------------------------------
#include <iostream>
#include "dlistval.h"

int main()
{
    DListVal<int> list;
    list.append( 1 );
    list.append( 2 );
    DListVal<int>::Iterator it;
    for ( it = list.last(); it != list.sfirst(); it-- )
        cout << *it << endl;
    return 0;
}
-----------------------------------

Example 2. This demonstates use of the DList by-structure double list type.
-----------------------------------
#include <iostream>
#include "dlist.h"

struct ListEl : public DListEl<ListEl>
{
    int data;
};

int main()
{
    DList<ListEl> list;
    list.append( new ListEl );
    list.tail->data = 1;
    list.append( new ListEl );
    list.tail->data = 2;

    DList<ListEl>::Iterator it;
    for ( it = list.first(); it != list.slast(); it++ )
        cout << it->data << endl;
    return 0;
}
-----------------------------------



                        3. COMMON DOUBLE LIST
                        *********************
