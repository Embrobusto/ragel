package main
import "fmt"

var neg  int ;
var value  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _state_chart_key_offsets [] int8  = [] int8  { 0, 0, 2, 5, 0  }
var _state_chart_trans_keys [] byte  = [] byte  { 48, 57, 10, 48, 57, 43, 45, 48, 57, 0 }
var _state_chart_single_lengths [] int8  = [] int8  { 0, 0, 1, 2, 0  }
var _state_chart_range_lengths [] int8  = [] int8  { 0, 1, 1, 1, 0  }
var _state_chart_index_offsets [] int8  = [] int8  { 0, 0, 2, 5, 0  }
var _state_chart_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _state_chart_trans_offsets [] int8  = [] int8  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 0  }
var _state_chart_trans_lengths [] int8  = [] int8  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _state_chart_cond_keys [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _state_chart_cond_targs [] int8  = [] int8  { 2, 0, 3, 2, 0, 1, 1, 2, 0, 0  }
var _state_chart_cond_actions [] int8  = [] int8  { 1, 0, 2, 1, 0, 3, 4, 5, 0, 0  }
var _state_chart_nfa_targs [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0  }
var _state_chart_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var state_chart_start  int  = 3
var state_chart_first_final  int  = 3
var state_chart_error  int  = 0
var state_chart_en_main  int  = 3
func prepare() {
	value = 0;
	neg = 0;
	
	{
		cs = int(state_chart_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _klen int 
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		var  _trans  uint   = 0
		var  _cond  uint   = 0
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int(_state_chart_key_offsets[cs] );
		_trans = uint(_state_chart_index_offsets[cs]);
		_klen = int(_state_chart_single_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + _klen - 1;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + ((_upper-_lower) >> 1);
						switch {
							case ( data[p ]) < _state_chart_trans_keys[_mid ]:
							_upper = _mid - 1;
							
							case ( data[p ]) > _state_chart_trans_keys[_mid ]:
							_lower = _mid + 1;
							
							default:
							{
								_trans += uint((_mid - _keys));
								goto _match;
							}
							
						}
					}
					
				}
				_keys += _klen;
				_trans += uint(_klen);
			}
			
			
		}
		_klen = int(_state_chart_range_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + (_klen<<1) - 2;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + (((_upper-_lower) >> 1) & ^1);
						switch {
							case ( data[p ]) < _state_chart_trans_keys[_mid ]:
							_upper = _mid - 2;
							
							case ( data[p ]) > _state_chart_trans_keys[_mid + 1 ]:
							_lower = _mid + 2;
							
							default:
							{
								_trans += uint(((_mid - _keys)>>1));
								goto _match;
							}
							
						}
					}
					
				}
				_trans += uint(_klen);
			}
			
			
		}
		
		_match :
		_ckeys = int(_state_chart_trans_offsets[_trans] );
		_klen = int(_state_chart_trans_lengths[_trans]);
		_cond = uint(_state_chart_trans_offsets[_trans]);
		_cpc = 0;
		{
			var  _lower int
			var  _mid int
			var  _upper int
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			for {
				{
					if _upper < _lower  {
						break;
						
						
					}
					_mid = _lower + ((_upper-_lower) >> 1);
					switch {
						case _cpc < int(_state_chart_cond_keys[_mid ]):
						_upper = _mid - 1;
						
						case _cpc > int(_state_chart_cond_keys[_mid ]):
						_lower = _mid + 1;
						
						default:
						{
							_cond += uint((_mid - _ckeys));
							goto _match_cond;
						}
						
					}
				}
				
			}
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = int(_state_chart_cond_targs[_cond]);
		if _state_chart_cond_actions[_cond] == 0  {
			goto _again;
			
			
		}
		switch _state_chart_cond_actions[_cond]  {
			case 3 :
			{neg = 0;
				value = 0;
			}
			
			break;
			case 1 :
			{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
				;
			}
			
			break;
			case 4 :
			{neg = 0;
				value = 0;
			}
			{neg = 1;
			}
			
			break;
			case 5 :
			{neg = 0;
				value = 0;
			}
			{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
				;
			}
			
			break;
			case 2 :
			{if ( neg != 0 ) {
					value = -1 * value;
					
				}
			}
			{fmt.Print( value );fmt.Print( "\n" );}
			
			break;
			
		}
		
		_again :
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= state_chart_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
