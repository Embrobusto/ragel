import crack.io cout;
import crack.lang Buffer;

int i;
int j;
int k;





const array[int16 ] _foo_key_offsets = [ 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0 ,  ];
const array[byte ] _foo_trans_keys = [ 48, 49, 48, 49, 48, 49, 97, 98, 97, 98, 97, 98, 99, 10, 99, 99, 99, 99, 99, 99, 0,  ];
const array[int16 ] _foo_single_lengths = [ 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 ,  ];
const array[int16 ] _foo_range_lengths = [ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _foo_index_offsets = [ 0, 0, 2, 4, 6, 9, 12, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0 ,  ];
const array[int16 ] _foo_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _foo_trans_offsets = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 ,  ];
const array[int16 ] _foo_trans_lengths = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _foo_cond_keys = [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _foo_cond_targs = [ 2, 0, 3, 0, 4, 0, 5, 7, 0, 6, 11, 7, 12, 9, 13, 10, 14, 0, 6, 7, 9, 10, 0, 8, 0, 15, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0 ,  ];
const array[int16 ] _foo_cond_actions = [ 1, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 0, 0 ,  ];
const array[int16 ] _foo_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _foo_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _foo_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _foo_nfa_pop_trans = [ 0, 0 ,  ];
const int  foo_start  = 1;
const int  foo_first_final  = 15;
const int  foo_error  = 0;
const int  foo_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( foo_start );
		
	}
	if ( 1 ) {
		int _klen;
		int _keys = 0;
		int _ckeys = 0;
		int _cpc;
		uint32 _trans;
		uint32 _cond = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _foo_key_offsets[cs];
					_trans = uint32  ( _foo_index_offsets[cs] );
					_have = 0;
					_klen = int ( _foo_single_lengths[cs] );
					if ( _klen > 0  )
					{
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( (data[p ])< _foo_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( (data[p ])> _foo_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += uint32  ( (_mid - _keys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += uint32  ( _klen );
							
						}
						
						
					}
					
					if ( _have == 0  )
					{
						_klen = int ( _foo_range_lengths[cs] );
						if ( _klen > 0  )
						{
							int _lower = 0;
							int _mid = 0;
							int _upper = 0;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( (data[p ])< _foo_trans_keys[_mid ] )
								_upper = _mid - 2;
								
								else if ( (data[p ])> _foo_trans_keys[_mid + 1 ] )
								_lower = _mid + 2;
								
								else
								{
									_trans += uint32  ( ((_mid - _keys)>>1) );
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							_trans += uint32  ( _klen );
							
							
						}
						
						
					}
					
					_ckeys = _foo_trans_offsets[_trans];
					_klen = int ( _foo_trans_lengths[_trans] );
					_cond = uint32  ( _foo_trans_offsets[_trans] );
					_have = 0;
					_cpc = 0;
					if ( _foo_trans_cond_spaces[_trans] == 0  ) {
						if ( (i != 0) )
						_cpc += 1;
						
						
					}
					else if ( _foo_trans_cond_spaces[_trans] == 1  ) {
						if ( (j != 0) )
						_cpc += 1;
						
						
					}
					else if ( _foo_trans_cond_spaces[_trans] == 2  ) {
						if ( (k != 0) )
						_cpc += 1;
						
						
					}
					else if ( _foo_trans_cond_spaces[_trans] == 3  ) {
						if ( (i != 0) )
						_cpc += 1;
						
						if ( (j != 0) )
						_cpc += 2;
						
						
					}
					else if ( _foo_trans_cond_spaces[_trans] == 4  ) {
						if ( (j != 0) )
						_cpc += 1;
						
						if ( (k != 0) )
						_cpc += 2;
						
						
					}
					else if ( _foo_trans_cond_spaces[_trans] == 5  ) {
						if ( (i != 0) )
						_cpc += 1;
						
						if ( (j != 0) )
						_cpc += 2;
						
						if ( (k != 0) )
						_cpc += 4;
						
						
					}
					;
					if ( 1 ) {
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < int ( _foo_cond_keys[_mid ] ) )
							_upper = _mid - 1;
							
							else if ( _cpc > int ( _foo_cond_keys[_mid ] ) )
							_lower = _mid + 1;
							
							else
							{
								_cond += uint32  ( (_mid - _ckeys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
							
						}
						
						
					}
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _foo_cond_targs[_cond] );
					if ( _foo_cond_actions[_cond] == 8  ) {
						if ( 1 ) {
							cout.format( "  one\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 4  ) {
						if ( 1 ) {
							cout.format( "  two\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 6  ) {
						if ( 1 ) {
							cout.format( "  three\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 1  ) {
						if ( 1 ) {
							if ( ((data[p ])) == 48 )
							{
								i = 0;
								
							} 
							else {
								i = 1;
								
							}
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 2  ) {
						if ( 1 ) {
							if ( ((data[p ])) == 48 )
							{
								j = 0;
								
							} 
							else {
								j = 1;
								
							}
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 3  ) {
						if ( 1 ) {
							if ( ((data[p ])) == 48 )
							{
								k = 0;
								
							} 
							else {
								k = 1;
								
							}
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 5  ) {
						if ( 1 ) {
							if ( 1 ) {
								p+= 1;
								_cont = 0;
								
							}
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 9  ) {
						if ( 1 ) {
							cout.format( "  one\n" );
							
						}
						if ( 1 ) {
							cout.format( "  two\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 10  ) {
						if ( 1 ) {
							cout.format( "  one\n" );
							
						}
						if ( 1 ) {
							cout.format( "  three\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 7  ) {
						if ( 1 ) {
							cout.format( "  two\n" );
							
						}
						if ( 1 ) {
							cout.format( "  three\n" );
							
						}
						
					}
					else if ( _foo_cond_actions[_cond] == 11  ) {
						if ( 1 ) {
							cout.format( "  one\n" );
							
						}
						if ( 1 ) {
							cout.format( "  two\n" );
							
						}
						if ( 1 ) {
							cout.format( "  three\n" );
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= foo_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "000abc\n" );
	m( "100abc\n" );
	m( "010abc\n" );
	m( "110abc\n" );
	m( "001abc\n" );
	m( "101abc\n" );
	m( "011abc\n" );
	m( "111abc\n" );
}

main();
