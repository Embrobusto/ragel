class rangei_java
{






	private static char  _rangei_trans_keys [] = { 1, 0, 1, 2, 1, 2, 0, 3, 1, 5, 1, 4, 0, 5, 1, 0, 0,  };
	private static byte  _rangei_char_class [] = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 5, 5, 5, 0 ,  };
	private static byte  _rangei_index_offsets [] = { 0, 0, 2, 4, 8, 13, 17, 23, 0 ,  };
	private static byte  _rangei_indicies [] = { 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 1, 4, 4, 5, 1, 5, 5, 6, 6, 6, 6, 6, 6, 0 ,  };
	private static byte  _rangei_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _rangei_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _rangei_cond_targs [] = { 2, 0, 3, 4, 5, 6, 7, 0 ,  };
	private static byte  _rangei_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_nfa_targs [] = { 0, 0 ,  };
	private static byte  _rangei_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _rangei_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  rangei_start  = 1;
	private static int  rangei_first_final  = 7;
	private static int  rangei_error  = 0;
	private static int  rangei_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)rangei_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _trans = 0;
			int _keys;
			int _inds;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 3;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = (cs<<1) ;
					_inds = _rangei_index_offsets[cs] ;
					if ( ( data[p ]) <= 125 && ( data[p ]) >= 60  )
					{
						int _ic = (int)_rangei_char_class[(int)( data[p ]) - 60];
						if ( _ic <= (int)_rangei_trans_keys[_keys+1 ]&& _ic >= (int)_rangei_trans_keys[_keys ] )
						_trans = (int)_rangei_indicies[_inds + (int)( _ic - (int)_rangei_trans_keys[_keys ])  ];
						
						else
						_trans = (int)_rangei_index_defaults[cs];
						
						
					}
					
					else
					{
						_trans = (int)_rangei_index_defaults[cs];
						
					}
					
					{
						_goto_targ = 2;
						if (true)
						continue _goto;
					}
					
					case 2:
					cs = (int)_rangei_cond_targs[_trans];
					if ( cs == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					p+= 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 3:
					{
					
					}
					
					case 4:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= rangei_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"AaBbAa",
		"Aa`bAa",
		"AaB@Aa",
		"AaBbMa",
		"AaBbma",
	};
	
	static final int inplen = 5;
	
	public static void main (String[] args)
	{
		rangei_java machine = new rangei_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
