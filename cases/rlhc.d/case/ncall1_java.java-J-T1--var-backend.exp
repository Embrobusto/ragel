class ncall1_java
{
	int top ;
	int stack [] = new int[32];
	int target ;
	
	
	
	
	
	private static byte  _ncall1_key_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 15, 15, 0 ,  };
	private static char  _ncall1_trans_keys [] = { 117, 110, 117, 115, 101, 100, 111, 110, 101, 116, 119, 111, 10, 49, 50, 0,  };
	private static byte  _ncall1_single_lengths [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_index_offsets [] = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 28, 29, 30, 0 ,  };
	private static byte  _ncall1_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _ncall1_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 ,  };
	private static byte  _ncall1_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _ncall1_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_cond_targs [] = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 14, 0, 8, 0, 9, 0, 15, 0, 11, 0, 12, 0, 16, 0, 13, 13, 13, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 3, 4, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_nfa_targs [] = { 0, 0 ,  };
	private static byte  _ncall1_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _ncall1_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  ncall1_start  = 13;
	private static int  ncall1_first_final  = 13;
	private static int  ncall1_error  = 0;
	private static int  ncall1_en_unused  = 1;
	private static int  ncall1_en_one  = 7;
	private static int  ncall1_en_two  = 10;
	private static int  ncall1_en_main  = 13;
	int cs;
	
	void init()
	{
		{
			cs = (int)ncall1_start;
			top = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _ncall1_key_offsets[cs] ;
						_trans = (int )_ncall1_index_offsets[cs];
						_have = 0;
						_klen = (int)_ncall1_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _ncall1_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _ncall1_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_ncall1_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _ncall1_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _ncall1_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _ncall1_trans_offsets[_trans] ;
						_klen = (int)_ncall1_trans_lengths[_trans];
						_cond = (int )_ncall1_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_ncall1_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_ncall1_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_ncall1_cond_targs[_cond];
						switch ( _ncall1_cond_actions[_cond]  ) {
							case 1 :
							{
								System.out.print( "one\n" );
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 2 :
							{
								System.out.print( "two\n" );
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 3 :
							{
								target = 7;
								{
									stack[top] = cs;
									top += 1;
									cs = (target);
									
								}
								
							}
							
							break;
							case 4 :
							{
								target = 10;
								{
									stack[top] = cs;
									top += 1;
									cs = (target);
									
								}
								
							}
							
							break;
							
						}
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= ncall1_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"1one2two1one\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		ncall1_java machine = new ncall1_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
