host( "working/forder2.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	/*
	* After the fact start and ending transitions. Behaves like constructors of
	* and destructors in c++.
	*/
	
	struct forder
	{
		int cs;
	};
	
	
	
}@
value int forder_start = 1;
value int forder_first_final = 7;
value int forder_error = 0;

value int forder_en_main = 1;

array s8 _forder_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/forder2.rl", 38 ) @{
	
	void forder_init( struct forder *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)forder_start;
	}
	host( "working/forder2.rl", 42 ) @{
	}
	
	void forder_execute( struct forder *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( host( "-", 1 ) ={ fsm->cs}= )
		{
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
		}
		goto st_out;
		st_case_1:
		if ( ( deref( data, p )) == 105 ) {
			goto ctr0;
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		host( "-", 1 ) ={ fsm->cs}= = 0;
		goto _out;
		ctr0:
		host( "working/forder2.rl", 29 ) ${printf("enter outter\n");}$
		host( "working/forder2.rl", 23 ) ${printf("enter inner\n");}$
		host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
		host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		if ( ( deref( data, p )) == 110 ) {
			goto ctr2;
		}
		{
			goto st0;
		}
		ctr2:
		host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
		host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
		
		goto st3;
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		if ( ( deref( data, p )) == 110 ) {
			goto ctr3;
		}
		{
			goto st0;
		}
		ctr3:
		host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
		host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
		
		goto st4;
		st4:
		p+= 1;
		if ( p == pe )
		goto _test_eof4;
		st_case_4:
		if ( ( deref( data, p )) == 101 ) {
			goto ctr4;
		}
		{
			goto st0;
		}
		ctr4:
		host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
		host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
		
		goto st5;
		st5:
		p+= 1;
		if ( p == pe )
		goto _test_eof5;
		st_case_5:
		if ( ( deref( data, p )) == 114 ) {
			goto ctr5;
		}
		{
			goto st0;
		}
		ctr5:
		host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
		host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
		
		goto st6;
		st6:
		p+= 1;
		if ( p == pe )
		goto _test_eof6;
		st_case_6:
		if ( ( deref( data, p )) == 10 ) {
			goto ctr6;
		}
		{
			goto st0;
		}
		ctr6:
		host( "working/forder2.rl", 25 ) ${printf("leave inner\n");}$
		host( "working/forder2.rl", 31 ) ${printf("leave outter\n");}$
		
		goto st7;
		st7:
		p+= 1;
		if ( p == pe )
		goto _test_eof7;
		st_case_7:
		{
			goto st0;
		}
		st_out:
		_test_eof2: host( "-", 1 ) ={ fsm->cs}= = 2; goto _test_eof; 
		_test_eof3: host( "-", 1 ) ={ fsm->cs}= = 3; goto _test_eof; 
		_test_eof4: host( "-", 1 ) ={ fsm->cs}= = 4; goto _test_eof; 
		_test_eof5: host( "-", 1 ) ={ fsm->cs}= = 5; goto _test_eof; 
		_test_eof6: host( "-", 1 ) ={ fsm->cs}= = 6; goto _test_eof; 
		_test_eof7: host( "-", 1 ) ={ fsm->cs}= = 7; goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
	host( "working/forder2.rl", 50 ) @{
	}
	
	int forder_finish( struct forder *fsm )
	{
		if ( fsm->cs == forder_error )
		return -1;
		if ( fsm->cs >= forder_first_final )
		return 1;
		return 0;
	}
	
	struct forder fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		forder_init( &fsm );
		forder_execute( &fsm, buf, len );
		if ( forder_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test( "inner\n");
		
		test(
		"inner\n"
		"foobar\n"
		);
		
		test( "" );
		test( "\n" );
		test( "inn\n" );
		
		return 0;
	}
	
}@