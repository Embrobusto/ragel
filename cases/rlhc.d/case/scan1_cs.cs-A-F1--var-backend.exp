using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int ts;
		int te;
		int act;
		int token;
		
		
		
		
		static readonly char  []_scanner_trans_keys = { '\u0001', '\u0000', '\u0002', '\u0009', '\u0004', '\u0004', '\u000a', '\u000a', '\u000a', '\u000a', '\u000a', '\u000a', '\u0002', '\u0009', '\u0000', '\u0009', '\u0007', '\u0007', '\u0009', '\u0009', '\u0002', '\u0009', '\u0000',  };
		static readonly sbyte  []_scanner_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 5, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0,  };
		static readonly sbyte  []_scanner_index_offsets = { 0, 0, 8, 9, 10, 11, 12, 20, 30, 31, 32, 0,  };
		static readonly sbyte  []_scanner_indicies = { 1, 2, 2, 2, 0, 0, 0, 2, 3, 6, 7, 8, 1, 2, 9, 10, 4, 4, 4, 2, 11, 4, 4, 2, 2, 2, 12, 13, 14, 15, 13, 18, 1, 2, 2, 2, 0, 0, 0, 2, 0,  };
		static readonly sbyte  []_scanner_index_defaults = { 0, 0, 4, 5, 5, 5, 4, 4, 16, 17, 0, 0,  };
		static readonly sbyte  []_scanner_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_scanner_cond_targs = { 7, 7, 1, 9, 0, 7, 4, 5, 7, 10, 10, 7, 7, 8, 2, 6, 7, 7, 3, 0,  };
		static readonly sbyte  []_scanner_cond_actions = { 1, 2, 0, 3, 0, 4, 0, 0, 5, 6, 7, 10, 11, 0, 0, 0, 12, 13, 0, 0,  };
		static readonly sbyte  []_scanner_to_state_actions = { 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_from_state_actions = { 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_eof_trans = { 0, 1, 0, 6, 6, 6, 0, 0, 17, 18, 1, 0,  };
		static readonly sbyte  []_scanner_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_scanner_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_scanner_nfa_pop_trans = { 0, 0,  };
		static readonly int  scanner_start  = 7;
		static readonly int  scanner_first_final  = 7;
		static readonly int  scanner_error  = 0;
		static readonly int  scanner_en_main  = 7;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)scanner_start;
				ts = 0;
				te = 0;
				act = 0;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				int _keys;
				int _inds;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _scanner_eof_trans[cs] > 0 )
							{
								_trans = (uint )_scanner_eof_trans[cs] - 1;
								_have = 1;
							}
							
							if ( _have == 0 )
							{
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							switch ( _scanner_from_state_actions[cs]  ) {
								case 9:
								{{ts = p;
									}}
								
								break;
								
							}
							_keys = (cs<<1) ;
							_inds = _scanner_index_offsets[cs] ;
							if ( ( data[p ]) <= 120&& ( data[p ]) >= 10 )
							{
								int _ic = (int)_scanner_char_class[(int)( data[p ]) - 10];
								if ( _ic <= (int)_scanner_trans_keys[_keys+1]&& _ic >= (int)_scanner_trans_keys[_keys ] )
								_trans = (uint )_scanner_indicies[_inds + (int)( _ic - (int)_scanner_trans_keys[_keys ])  ];
								
								else
								_trans = (uint )_scanner_index_defaults[cs];
								
							}
							
							else
							{
								_trans = (uint )_scanner_index_defaults[cs];
							}
							
							
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_scanner_cond_targs[_trans];
							switch ( _scanner_cond_actions[_trans]  ) {
								case 3:
								{{te = p+1;
									}}
								
								break;
								case 11:
								{{te = p+1;
										{Console.Write( "on last     " );if ( p + 1 == te )
											{
												Console.Write( "yes" );
											} 
											Console.Write( "\n" );}
									}}
								
								break;
								case 5:
								{{te = p+1;
										{Console.Write( "on lag      " );if ( p + 1 == te )
											{
												Console.Write( "yes" );
											} 
											Console.Write( "\n" );}
									}}
								
								break;
								case 2:
								{{te = p+1;
									}}
								
								break;
								case 10:
								{{te = p+1;
									}}
								
								break;
								case 12:
								{{te = p;
										p = p - 1;
										{Console.Write( "on next     " );if ( p + 1 == te )
											{
												Console.Write( "yes" );
											} 
											Console.Write( "\n" );}
									}}
								
								break;
								case 13:
								{{te = p;
										p = p - 1;
										{Console.Write( "on lag      " );if ( p + 1 == te )
											{
												Console.Write( "yes" );
											} 
											Console.Write( "\n" );}
									}}
								
								break;
								case 4:
								{{p = ((te))-1;
										{Console.Write( "on lag      " );if ( p + 1 == te )
											{
												Console.Write( "yes" );
											} 
											Console.Write( "\n" );}
									}}
								
								break;
								case 1:
								{{switch ( act  ) {
											case 0:
											{{cs = 0;
												}}
											
											break;
											case 4:
											p = ((te))-1;
											{Console.Write( "lm switch1  " );if ( p + 1 == te )
												{
													Console.Write( "yes" );
												} 
												Console.Write( "\n" );}
											
											break;
											case 5:
											p = ((te))-1;
											{Console.Write( "lm switch2  " );if ( p + 1 == te )
												{
													Console.Write( "yes" );
												} 
												Console.Write( "\n" );}
											
											break;
											
										}
									}
								}
								
								break;
								case 6:
								{{te = p+1;
									}}
								{{act = 4;
									}}
								
								break;
								case 7:
								{{te = p+1;
									}}
								{{act = 5;
									}}
								
								break;
								
							}
							switch ( _scanner_to_state_actions[cs]  ) {
								case 8:
								{{ts = 0;
									}}
								{{act = 0;
									}}
								
								break;
								
							}
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= scanner_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"abbc1d1d2\n",
		};
		
		
		static readonly int inplen = 1;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
