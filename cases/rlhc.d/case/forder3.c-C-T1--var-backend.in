host( "working/forder3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	struct forder
	{
		int cs;
	};
	
	
	
}@
array s8 _forder_key_offsets( 0, 25 ) = { 0, 0, 3, 4, 7, 10, 12, 15, 18, 21, 23, 25, 0 };

array char _forder_trans_keys( 0, 98 ) = { 10, 97, 98, 97, 10, 97, 98, 10, 97, 98, 10, 97, 10, 97, 98, 10, 97, 98, 10, 97, 98, 10, 97, 10, 97, 0 };

array s8 _forder_single_lengths( 0, 3 ) = { 0, 3, 1, 3, 3, 2, 3, 3, 3, 2, 2, 0, 0 };

array s8 _forder_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_index_offsets( 0, 35 ) = { 0, 0, 4, 6, 10, 14, 17, 21, 25, 29, 32, 35, 0 };

array s8 _forder_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _forder_trans_offsets( 0, 35 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0 };

array s8 _forder_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _forder_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_cond_targs( 0, 11 ) = { 11, 2, 6, 0, 3, 0, 11, 2, 4, 0, 11, 5, 4, 0, 11, 5, 0, 11, 5, 7, 0, 11, 5, 8, 0, 11, 9, 6, 0, 11, 10, 0, 11, 9, 0, 0, 0 };

array s8 _forder_cond_actions( 0, 7 ) = { 1, 2, 3, 0, 0, 0, 4, 0, 5, 0, 6, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 7, 0, 0, 0, 0 };

array s8 _forder_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int forder_start = 1;
value int forder_first_final = 11;
value int forder_error = 0;

value int forder_en_main = 1;

host( "working/forder3.rl", 31 ) @{
	
	void forder_init( struct forder *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)forder_start;
	}
	host( "working/forder3.rl", 35 ) @{
	}
	
	void forder_execute( struct forder *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _forder_trans_keys, _forder_key_offsets[host( "-", 1 ) ={ fsm->cs}=] );
					_trans = cast(uint)_forder_index_offsets[host( "-", 1 ) ={ fsm->cs}=];
					_have = 0;
					
					_klen = cast(int)_forder_single_lengths[host( "-", 1 ) ={ fsm->cs}=];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _forder_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _forder_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_forder_range_lengths[host( "-", 1 ) ={ fsm->cs}=];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _forder_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _forder_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _forder_cond_keys, _forder_trans_offsets[_trans] );
					_klen = cast(int)_forder_trans_lengths[_trans];
					_cond = cast(uint)_forder_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _forder_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _forder_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							host( "-", 1 ) ={ fsm->cs}= = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					host( "-", 1 ) ={ fsm->cs}= = cast(int)_forder_cond_targs[_cond];
					
					switch ( _forder_cond_actions[_cond] ) {
						case 6 {
							host( "working/forder3.rl", 24 ) ${printf("accept m1\n");}$
						}
						case 4 {
							host( "working/forder3.rl", 26 ) ${printf("accept m2\n");}$
						}
						case 2 {
							host( "working/forder3.rl", 18 ) ${printf("enter m1 aa\n");}$
							host( "working/forder3.rl", 26 ) ${printf("enter m2\n");}$
						}
						case 5 {
							host( "working/forder3.rl", 18 ) ${printf("leave m1 aa\n");}$
							host( "working/forder3.rl", 19 ) ${printf("through m1 b\n");}$
						}
						case 7 {
							host( "working/forder3.rl", 24 ) ${printf("accept m1\n");}$
							host( "working/forder3.rl", 26 ) ${printf("accept m2\n");}$
						}
						case 1 {
							host( "working/forder3.rl", 25 ) ${printf("enter m2\n");}$
							host( "working/forder3.rl", 26 ) ${printf("enter m2\n");}$
							host( "working/forder3.rl", 26 ) ${printf("accept m2\n");}$
						}
						case 3 {
							host( "working/forder3.rl", 17 ) ${printf("enter m1 aa\n");}$
							host( "working/forder3.rl", 18 ) ${printf("enter m1 aa\n");}$
							host( "working/forder3.rl", 18 ) ${printf("leave m1 aa\n");}$
							host( "working/forder3.rl", 19 ) ${printf("through m1 b\n");}$
							host( "working/forder3.rl", 26 ) ${printf("enter m2\n");}$
						}
					}
					
					if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/forder3.rl", 43 ) @{
	}
	
	int forder_finish( struct forder *fsm )
	{
		if ( fsm->cs == forder_error )
		return -1;
		if ( fsm->cs >= forder_first_final )
		return 1;
		return 0;
	}
	
	struct forder fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		forder_init( &fsm );
		forder_execute( &fsm, buf, len );
		if ( forder_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "aaaaaabbbaa\n" );
		test( "\n" );
		test( "bbbbbbaaaaaaa\n" );
		test( "bbbbbbaaaaaa\n" );
		test( "aaaaa\n" );
		
		return 0;
	}
	
}@