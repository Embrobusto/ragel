include 'trans.lm'

namespace c
	lex 
		literal '%%{', '}%%'

		literal 'int', 'bool', 'const', 'char', 'ptr',
				'printf', 'fwrite', 'var', 'byte'

		literal ';', '<', '>', '(', ')', '[', ']', '=', '*', '!'

		ignore / ( [ \t] | NL )+ /

		token tk_ident /ident/
		token tk_number /digit+/
		token tk_hex_number /'0x' [0-9a-fA-F]+/

		token string
			/ s_literal | d_literal /

		token indep_any / any /
	end

	def tok
		[tk_ident]
	|	[tk_ident '[' tok ']']
	|	[tk_number]
	|	[tk_hex_number]
	|	[string]
	|	['<' type '>' '(' tok* ')']
	|	['(' type ')' '(' tok* ')']
	|	['(' tok* ')']
	|	['printf' '(' tok* ')' ';']
	|	['fwrite' '(' tok* ')' ';']
	|	[';']
	|	['<']
	|	['>']
	|	['[']
	|	[']']
	|	['=']
	|	['!']
	|	['*']
	|	[indep_any]
end

OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: start = parse start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

send Output
	"/*
	" * @LANG: [Lang]
	" * @GENERATED: yes
	" */
	"
	"#include <string.h>
	"#include <stdio.h>
	"

c::tok c_tok( Tok: tok )
{
	return cast<c::tok> Tok
}

int indepToHost( Indep: ref<section*> )
{
	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cons var_decl
				"int [Ident OptArr];
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cons var_decl
				"char* [Ident];
		}
	}

	for Tok: tok in Indep {
		if match Tok "true" {
			Tok = cons tok "1"
		}
		elsif match Tok "false" {
			Tok = cons tok "0"
		}
		elsif match Tok 
				['<' type '>' '(' TokList: tok* ')']
		{
			Tok = cons tok 
				['(' TokList ')']
		}
		elsif match Tok ['printi' V: tok ';' ] {
			Tok = cast<tok> cons c::tok
				[ "printf( \"%d\", [c_tok(V)] );"]
		}
		elsif match Tok ['printb' V: tok ';' ] {
			Tok = cast<tok> cons c::tok
				[ "fwrite( [c_tok(V)], 1, pos, stdout );"]
		}
		elsif match Tok ['prints' V: tok ';' ] {
			Tok = cast<tok> cons c::tok
				[ "printf( \"%s\", [c_tok(V)] );"]
		}
		elsif match Tok ['print_token' ';' ] {
			Tok = cast<tok> cons c::tok
				[ "fwrite ( ts , 1 , te - ts , stdout );" ]
		}
		elsif match Tok ['first_token_char'] {
			Tok = cast<tok> cons c::tok
				["ts\[0\]"]
		}
	}
}

for Section: section in RagelTree {
	if match Section [Decl: var_decl] {
		cons SectionList: section* [Decl]
		indepToHost( SectionList )
		send Output [SectionList]
	}
}

for Section: section in RagelTree {
	if match Section [section_multiline] {
		for Action: ragel::action_block in Section {
			# Reparse as lang-independent code.
			parse SectionList: section*[$Action]

			# Translate to specific language.
			indepToHost( SectionList )

			# Reparse back to ragel action block.
			Action = parse ragel::action_block[$SectionList]
		}

		send Output ["\n" Section "\n"]
	}
}

send Output
	"%% write data;
	"int cs;
	"
	"void init()
	"{

for Section: section in RagelTree {
	if match Section [ExprStmt: expr_stmt] {
		cons SectionList: section* [ExprStmt]
		indepToHost( SectionList )
		send Output [SectionList]
	}
}

send Output
	"	%% write init;
	"}
	"
	"void exec( char *data, int len )
	"{
	"	char *p = data;
	"	char *pe = data + len;

if NeedsEof {
	send Output
		"	char *eof = pe;
}

send Output
	"	%% write exec;
	"}
	"
	"void finish( )
	"{
	"	if ( cs >= [$MachineName.word]_first_final )
	"		printf( \"ACCEPT\\n\" );
	"	else
	"		printf( \"FAIL\\n\" );
	"}
	"

send Output
	"char *inp\[\] = {

NR: int = 0
for InputString: input_string in RagelTree {
	send Output 
		[^InputString ",\n"]
	NR = NR + 1
}

send Output
	"};
	"

send Output
	"int inplen = [NR];
	"

send Output
	"int main( )
	"{
	"	int i;
	"	for ( i = 0; i < inplen; i++ ) {
	"		init();
	"		exec( inp\[i\], strlen(inp\[i\]) );
	"		finish();
	"	}
	"	return 0;
	"}
	"

send Output "/* _____OUTPUT_____
for OutputLine: output_line in RagelTree {
	send Output [OutputLine]
}
send Output "*/


