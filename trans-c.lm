include 'trans.lm'

OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: start = parse start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

prints( Output
	"/*
	" * @LANG: [Lang]
	" * @GENERATED: yes
	" */
	"
	"#include <string.h>
	"#include <stdio.h>
	"
)

int indepToHost( Indep: ref<section*> )
{
	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cons var_decl
				"int [Ident OptArr];
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cons var_decl
				"char* [Ident];
		}
	}

	for Tok: tok in Indep {
		if match Tok "true"
			Tok = cons tok "1"
		elsif match Tok "false"
			Tok = cons tok "0"
		elsif match Tok ['<' type '>' '(' TokList: tok* ')']
			Tok = cons tok ['(' TokList ')']
		elsif match Tok ['printi' V: tok ';' ] {
			cons VL: tok*[V]
			Tok = cons tok[ "printf( \"%d\", [V] );"]
		}
		elsif match Tok ['printb' V: tok ';' ] {
			cons VL: tok*[V]
			Tok = cons tok[ "fwrite( [V], 1, pos, stdout );"]
		}
		elsif match Tok ['prints' V: tok ';' ] {
			cons VL: tok*[V]
			Tok = cons tok[ "printf( \"%s\", [V] );"]
		}
		elsif match Tok ['print_token' ';' ] {
			Tok = cons tok[ "fwrite ( ts , 1 , te - ts , stdout );" ]
		}
		elsif match Tok ['first_token_char'] {
			Tok = cons tok ["ts\[0\]"]
		}
	}
}

for Section: section in RagelTree {
	if match Section [Decl: var_decl] {
		cons SectionList: section* [Decl]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

for Section: section in RagelTree {
	if match Section [section_multiline] {
		for Action: ragel::action_block in Section {
			# Reparse as lang-independent code.
			parse SectionList: section*[$Action]

			# Translate to specific language.
			indepToHost( SectionList )

			# Reparse back to ragel action block.
			Action = parse ragel::action_block[$SectionList]
		}

		prints( Output '\n' Section '\n' )
	}
}

prints( Output
	"int cs;
	"
	"%% write data;
	"
	"void init()
	"{
)

for Section: section in RagelTree {
	if match Section [ExprStmt: expr_stmt] {
		cons SectionList: section* [ExprStmt]
		indepToHost( SectionList )
		prints( Output SectionList )
	}
}

prints( Output
	"	%% write init;
	"}
	"
	"void exec( char *data, int len )
	"{
	"	char *p = data;
	"	char *pe = data + len;
)

if NeedsEof
	prints( Output "	char *eof = pe;\n" )

prints( Output
	"	%% write exec;
	"}
	"
	"void finish( )
	"{
	"	if ( cs >= [$MachineName.word]_first_final )
	"		printf( \"ACCEPT\\n\" );
	"	else
	"		printf( \"FAIL\\n\" );
	"}
	"
)

prints( Output
	"char *inp\[\] = {
)

NR: int = 0
for InputString: input_string in RagelTree {
	prints( Output ^InputString ',\n' )
	NR = NR + 1
}

prints( Output
	"};
	"
)

prints( Output "int inplen = " NR ";\n\n" )

prints( Output
	"int main( )
	"{
	"	int i;
	"	for ( i = 0; i < inplen; i++ ) {
	"		init();
	"		exec( inp\[i\], strlen(inp\[i\]) );
	"		finish();
	"	}
	"	return 0;
	"}
	"
)

for Section: section in RagelTree {
	if match Section [OutputBlock: output]
		prints( Output OutputBlock )
}

