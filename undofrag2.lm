context undo
{
	lex
	{
		ignore /[ \t]+/
		literal '*', '(', ')', '^', ';', '\n'
		token id /[a-zA-Z_]+/
	}

	Out: parser<out>

	def out_item
		[id]
	|	['(' item* ')']

	def out 
		[out_item*]

	def item 
		[id]
		{
			send Out [r1]
		}
	|	['(' item* ')']
		{
			send Out ['(']
			send Out [r2]
			send Out [')']
		}

	def A1 []
	def A2 []


	def start 
		[A1 item* '^']
	|	[A2 item* ';' '\n']
}

cons Undo: undo[]
Undo.Out = construct parser<undo::out> []

parse InputP: undo::start(Undo)[ stdin ]
Input: undo::start = InputP.tree
print( Input )
