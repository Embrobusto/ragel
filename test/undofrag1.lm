lex
	ignore /space+/
	literal '#', '{', '}'
	token id2 /[a-zA-Z_]+/ 
end

def item2
	[id2]
|	['{' item2* '}']

def start2
	[item2*]


context ctx

	SP: parser<start2> 

	lex
		ignore /space+/
		literal '*', '(', ')', '!', ';\n'
		token id /[a-zA-Z_]+/ 
	end

	def item 
		[id]
	|	['(' item* ')']


	def A [] {
		print( 'A\n' )
		send SP "{ A{d} }"
	}

	def B [] {
		print( 'B\n' )
		send SP "{ B{d} }"
	}

	def start1 
		[A item* '!']
	|	[B item* ';\n']

end ctx


CTX: ctx = cons ctx []
CTX.SP = cons parser<start2> []
send CTX.SP "a b{c}"

parse InputParser: ctx::start1( CTX )[stdin]
Input: ctx::start1 = InputParser.tree

send CTX.SP "{e}f g"

print( Input )
print( CTX.SP() '\n' )
