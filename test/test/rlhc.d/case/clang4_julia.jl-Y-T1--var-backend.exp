const _clang_key_offsets = Int16[0, 0, 5, 10, 13, 17, 22, 25, 27, 33, 36, 56, 76, 96, 117, 138, 157, 176, 196, 0 , ]
const _clang_trans_keys = UInt8[10, 34, 92, 0, 127, 10, 39, 92, 0, 127, 10, 0, 127, 10, 33, 0, 127, 10, 33, 47, 0, 127, 10, 0, 127, 48, 57, 48, 57, 65, 70, 97, 102, 10, 0, 127, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0 , ]
const _clang_single_lengths = Int8[0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 , ]
const _clang_range_lengths = Int8[0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 , ]
const _clang_index_offsets = Int16[0, 0, 5, 10, 13, 17, 22, 25, 27, 31, 34, 48, 62, 76, 91, 106, 119, 132, 146, 0 , ]
const _clang_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _clang_trans_offsets = Int16[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0 , ]
const _clang_trans_lengths = Int8[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _clang_cond_keys = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _clang_cond_targs = Int8[1, 12, 9, 1, 0, 2, 12, 3, 2, 0, 2, 2, 0, 4, 5, 4, 0, 4, 5, 10, 4, 0, 10, 6, 0, 15, 0, 18, 18, 18, 0, 1, 1, 0, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 , ]
const _clang_cond_actions = Int8[2, 0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 0, 4, 4, 4, 0, 2, 1, 0, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0 , ]
const _clang_eof_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 , ]
const _clang_nfa_targs = Int8[0, 0 , ]
const _clang_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _clang_nfa_push_actions = Int8[0, 0 , ]
const _clang_nfa_pop_trans = Int8[0, 0 , ]
const clang_start  = 10
const clang_first_final  = 10
const clang_error  = 0
const clang_en_main  = 10
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	pos = 0;
	line = 0;
	pos = 0;
	line = 1;
	
	cs = convert(Int, clang_start )
	_klen= 0
	;
	_keys = 0;
	_ckeys = 0;
	_cpc= 0
	;
	_trans= 0
	;
	_cond = 0;
	_have = 0;
	_cont = 1;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if p == eof 
				if _have == 0 
					if _clang_eof_actions[1+(cs)] == 22 
						print( "ident(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					elseif _clang_eof_actions[1+(cs)] == 10 
						print( "literal(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					elseif _clang_eof_actions[1+(cs)] == 18 
						print( "float(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					elseif _clang_eof_actions[1+(cs)] == 14 
						print( "int(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					elseif _clang_eof_actions[1+(cs)] == 26 
						print( "hex(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					elseif _clang_eof_actions[1+(cs)] == 6 
						print( "symbol(" );
						print( line );
						print( "," );
						print( length(buffer) );
						print( "): " );
						print( buffer );
						print( "\n" );
						
					end
					
				end
				
			end
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = _clang_key_offsets[1+(cs)]
				_trans = convert(UInt, _clang_index_offsets[1+(cs)] )
				_have = 0
				_klen = convert(Int, _clang_single_lengths[1+(cs)] )
				if _klen > 0 
					_lower = 0;
					_mid = 0;
					_upper = 0;
					_lower = _keys
					_upper = _keys + _klen - 1
					while _upper >= _lower && _have == 0 
						_mid = _lower + ((_upper-_lower)>> 1)
						if (data[1+(p )])< _clang_trans_keys[1+(_mid )]
							_upper = _mid - 1
							
						elseif (data[1+(p )])> _clang_trans_keys[1+(_mid )]
							_lower = _mid + 1
							
						else
							_trans += convert(UInt, (_mid - _keys) )
							_have = 1
							
						end
						
					end
					if _have == 0 
						_keys += _klen
						_trans += convert(UInt, _klen )
						
					end
					
				end
				if _have == 0 
					_klen = convert(Int, _clang_range_lengths[1+(cs)] )
					if _klen > 0 
						_lower = 0;
						_mid = 0;
						_upper = 0;
						_lower = _keys
						_upper = _keys + (_klen<<1)- 2
						while _have == 0 && _lower <= _upper 
							_mid = _lower + (((_upper-_lower)>> 1)& ~1)
							if (data[1+(p )])< _clang_trans_keys[1+(_mid )]
								_upper = _mid - 2
								
							elseif (data[1+(p )])> _clang_trans_keys[1+(_mid + 1 )]
								_lower = _mid + 2
								
							else
								_trans += convert(UInt, ((_mid - _keys)>>1) )
								_have = 1
								
							end
							
						end
						if _have == 0 
							_trans += convert(UInt, _klen )
							
						end
						
					end
					
				end
				_ckeys = _clang_trans_offsets[1+(_trans)]
				_klen = convert(Int, _clang_trans_lengths[1+(_trans)] )
				_cond = convert(UInt, _clang_trans_offsets[1+(_trans)] )
				_have = 0
				_cpc = 0
				_lower = 0;
				_mid = 0;
				_upper = 0;
				_lower = _ckeys
				_upper = _ckeys + _klen - 1
				while _have == 0 && _lower <= _upper 
					_mid = _lower + ((_upper-_lower)>> 1)
					if _cpc < convert(Int, _clang_cond_keys[1+(_mid )] )
						_upper = _mid - 1
						
					elseif _cpc > convert(Int, _clang_cond_keys[1+(_mid )] )
						_lower = _mid + 1
						
					else
						_cond += convert(UInt, (_mid - _ckeys) )
						_have = 1
						
					end
					
				end
				if _have == 0 
					cs = 0
					_cont = 0
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _clang_cond_targs[1+(_cond)] )
				if _clang_cond_actions[1+(_cond)] == 1 
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 5 
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 3 
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 22 
					print( "ident(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 10 
					print( "literal(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 18 
					print( "float(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 14 
					print( "int(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 26 
					print( "hex(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 6 
					print( "symbol(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					
				elseif _clang_cond_actions[1+(_cond)] == 2 
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 4 
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 25 
					print( "ident(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 23 
					print( "ident(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 13 
					print( "literal(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 11 
					print( "literal(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 21 
					print( "float(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 19 
					print( "float(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 17 
					print( "int(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 15 
					print( "int(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 29 
					print( "hex(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 27 
					print( "hex(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 9 
					print( "symbol(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					
				elseif _clang_cond_actions[1+(_cond)] == 7 
					print( "symbol(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					line = line + 1;
					
				elseif _clang_cond_actions[1+(_cond)] == 24 
					print( "ident(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 12 
					print( "literal(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 20 
					print( "float(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 16 
					print( "int(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 28 
					print( "hex(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				elseif _clang_cond_actions[1+(_cond)] == 8 
					print( "symbol(" );
					print( line );
					print( "," );
					print( length(buffer) );
					print( "): " );
					print( buffer );
					print( "\n" );
					buffer = "";
					buffer = buffer * AbstractString(Char[((data[1+(p )]))]);
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= clang_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n" );
m( "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n" );
