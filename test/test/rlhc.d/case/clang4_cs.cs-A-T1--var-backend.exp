using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int pos;
		int line;
		
		
		
		
		static readonly short  []_clang_key_offsets = { 0, 0, 5, 10, 13, 17, 22, 25, 27, 33, 36, 56, 76, 96, 117, 138, 157, 176, 196, 0,  };
		static readonly char  []_clang_trans_keys = { '\u000a', '\u0022', '\u005c', '\u0000', '\u00ff', '\u000a', '\u0027', '\u005c', '\u0000', '\u00ff', '\u000a', '\u0000', '\u00ff', '\u000a', '\u0021', '\u0000', '\u00ff', '\u000a', '\u0021', '\u002f', '\u0000', '\u00ff', '\u000a', '\u0000', '\u00ff', '\u0030', '\u0039', '\u0030', '\u0039', '\u0041', '\u0046', '\u0061', '\u0066', '\u000a', '\u0000', '\u00ff', '\u000a', '\u0022', '\u0027', '\u002f', '\u0030', '\u005f', '\u0021', '\u002e', '\u0031', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002f', '\u0030', '\u005f', '\u0021', '\u002e', '\u0031', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002f', '\u0030', '\u005f', '\u0021', '\u002e', '\u0031', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0021', '\u0022', '\u0027', '\u002f', '\u0030', '\u005f', '\u0023', '\u002e', '\u0031', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002e', '\u002f', '\u005f', '\u0078', '\u0021', '\u002d', '\u0030', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002f', '\u005f', '\u0021', '\u002e', '\u0030', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002f', '\u005f', '\u0021', '\u002e', '\u0030', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002e', '\u002f', '\u005f', '\u0021', '\u002d', '\u0030', '\u0039', '\u003a', '\u0040', '\u0041', '\u005a', '\u005b', '\u0060', '\u0061', '\u007a', '\u007b', '\u007e', '\u000a', '\u0022', '\u0027', '\u002f', '\u005f', '\u0021', '\u002e', '\u0030', '\u0039', '\u003a', '\u0040', '\u0041', '\u0046', '\u0047', '\u005a', '\u005b', '\u0060', '\u0061', '\u0066', '\u0067', '\u007a', '\u007b', '\u007e', '\u0000',  };
		static readonly sbyte  []_clang_single_lengths = { 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0,  };
		static readonly sbyte  []_clang_range_lengths = { 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0,  };
		static readonly short  []_clang_index_offsets = { 0, 0, 5, 10, 13, 17, 22, 25, 27, 31, 34, 48, 62, 76, 91, 106, 119, 132, 146, 0,  };
		static readonly sbyte  []_clang_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly short  []_clang_trans_offsets = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0,  };
		static readonly sbyte  []_clang_trans_lengths = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,  };
		static readonly sbyte  []_clang_cond_keys = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_clang_cond_targs = { 1, 12, 9, 1, 0, 2, 12, 3, 2, 0, 2, 2, 0, 4, 5, 4, 0, 4, 5, 10, 4, 0, 10, 6, 0, 15, 0, 18, 18, 18, 0, 1, 1, 0, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0,  };
		static readonly sbyte  []_clang_cond_actions = { 2, 0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 0, 4, 4, 4, 0, 2, 1, 0, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0,  };
		static readonly sbyte  []_clang_eof_actions = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0,  };
		static readonly sbyte  []_clang_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_clang_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_clang_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_clang_nfa_pop_trans = { 0, 0,  };
		static readonly int  clang_start  = 10;
		static readonly int  clang_first_final  = 10;
		static readonly int  clang_error  = 0;
		static readonly int  clang_en_main  = 10;
		int cs;
		
		void init()
		{
			pos = 0;
			line = 1;
			
			{
				cs = (int)clang_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				int _klen;
				int _keys;
				int _ckeys;
				int _cpc;
				uint _trans;
				uint _cond = 0;
				uint _have = 0;
				uint _cont = 1;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _have == 0 )
							{
								switch ( _clang_eof_actions[cs]  ) {
									case 22:
									{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									case 10:
									{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									case 18:
									{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									case 14:
									{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									case 26:
									{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									case 6:
									{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
										);Console.Write( "\n" );}
									
									break;
									
								}
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							_keys = _clang_key_offsets[cs] ;
							_trans = (uint )_clang_index_offsets[cs];
							_have = 0;
							_klen = (int)_clang_single_lengths[cs];
							if ( _klen > 0 )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + _klen - 1;
								while ( _upper >= _lower && _have == 0 )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ( data[p ]) < _clang_trans_keys[_mid ] )
									_upper = _mid - 1;
									
									else if ( ( data[p ]) > _clang_trans_keys[_mid ] )
									_lower = _mid + 1;
									
									else
									{
										_trans += (uint )(_mid - _keys);
										_have = 1;
									}
									
								}
								
								if ( _have == 0 )
								{
									_keys += _klen;
									_trans += (uint )_klen;
								}
								
							}
							
							
							if ( _have == 0 )
							{
								_klen = (int)_clang_range_lengths[cs];
								if ( _klen > 0 )
								{
									int _lower;
									int _mid;
									int _upper;
									_lower = _keys;
									_upper = _keys + (_klen<<1) - 2;
									while ( _have == 0&& _lower <= _upper  )
									{
										_mid = _lower + (((_upper-_lower) >> 1) & ~1);
										if ( ( data[p ]) < _clang_trans_keys[_mid ] )
										_upper = _mid - 2;
										
										else if ( ( data[p ]) > _clang_trans_keys[_mid + 1] )
										_lower = _mid + 2;
										
										else
										{
											_trans += (uint )((_mid - _keys)>>1);
											_have = 1;
										}
										
									}
									
									if ( _have == 0 )
									_trans += (uint )_klen;
									
								}
								
							}
							
							
							_ckeys = _clang_trans_offsets[_trans] ;
							_klen = (int)_clang_trans_lengths[_trans];
							_cond = (uint )_clang_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0&& _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < (int)_clang_cond_keys[_mid ] )
									_upper = _mid - 1;
									
									else if ( _cpc > (int)_clang_cond_keys[_mid ] )
									_lower = _mid + 1;
									
									else
									{
										_cond += (uint )(_mid - _ckeys);
										_have = 1;
									}
									
								}
								
								if ( _have == 0 )
								{
									cs = 0;
									_cont = 0;
								}
								
							}
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_clang_cond_targs[_cond];
							switch ( _clang_cond_actions[_cond]  ) {
								case 1:
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 5:
								{blen = 0;
								}
								
								break;
								case 3:
								{line = line + 1;
								}
								
								break;
								case 22:
								{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 10:
								{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 18:
								{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 14:
								{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 26:
								{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 6:
								{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								
								break;
								case 2:
								{buffer[blen++] = (( data[p ]));
								}
								{line = line + 1;
								}
								
								break;
								case 4:
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 25:
								{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 23:
								{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 13:
								{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 11:
								{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 21:
								{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 19:
								{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 17:
								{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 15:
								{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 29:
								{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 27:
								{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 9:
								{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								
								break;
								case 7:
								{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{line = line + 1;
								}
								
								break;
								case 24:
								{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 12:
								{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 20:
								{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 16:
								{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 28:
								{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								case 8:
								{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
									);Console.Write( "\n" );}
								{blen = 0;
								}
								{buffer[blen++] = (( data[p ]));
								}
								
								break;
								
							}
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= clang_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
			"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
		};
		
		
		static readonly int inplen = 2;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
