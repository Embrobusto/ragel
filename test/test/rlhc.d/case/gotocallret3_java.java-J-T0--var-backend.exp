class gotocallret3_java
{
	char comm ;
	int top ;
	int stack [] = new int[32];
	
	
	
	
	
	private static byte  _gotocallret_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0 ,  };
	private static byte  _gotocallret_key_offsets [] = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 ,  };
	private static char  _gotocallret_trans_keys [] = { 32, 10, 10, 10, 65, 90, 97, 122, 48, 57, 48, 57, 97, 122, 65, 90, 97, 122, 48, 57, 0,  };
	private static byte  _gotocallret_single_lengths [] = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_range_lengths [] = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 ,  };
	private static byte  _gotocallret_index_offsets [] = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 ,  };
	private static byte  _gotocallret_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _gotocallret_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 ,  };
	private static byte  _gotocallret_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _gotocallret_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_cond_targs [] = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 ,  };
	private static byte  _gotocallret_cond_actions [] = { 18, 13, 11, 13, 15, 1, 3, 0, 0, 0, 7, 0, 7, 9, 9, 13, 0, 0, 0, 7, 0, 7, 0 ,  };
	private static byte  _gotocallret_eof_actions [] = { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0 ,  };
	private static byte  _gotocallret_nfa_targs [] = { 0, 0 ,  };
	private static byte  _gotocallret_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _gotocallret_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  gotocallret_start  = 7;
	private static int  gotocallret_first_final  = 7;
	private static int  gotocallret_error  = 0;
	private static int  gotocallret_en_garble_line  = 3;
	private static int  gotocallret_en_alp_comm  = 5;
	private static int  gotocallret_en_dig_comm  = 6;
	private static int  gotocallret_en_main  = 7;
	int cs;
	
	void init()
	{
		{
			cs = (int)gotocallret_start;
			top = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _trans = 0;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			int _acts;
			int _nacts;
			int _keys;
			int _ckeys;
			int _cpc;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( p == eof  )
					{
						if ( _have == 0  )
						{
							int __acts;
							int __nacts;
							__acts = _gotocallret_eof_actions[cs] ;
							__nacts = (int )_gotocallret_actions[__acts ];
							__acts += 1;
							while ( __nacts > 0  )
							{
								switch ( _gotocallret_actions[__acts ] ) {
									case 2 :
									{
										System.out.print( "error: failed to recover\n" );
										
									}
									
									break;
									case 3 :
									{
										{
											p = p - 1;
											
										}
										{
											top-= 1;
											cs = stack[top];
											
										}
										
									}
									
									break;
									case 8 :
									{
										{
											p = p - 1;
											
										}
										{
											cs = 3;
											
										}
										
									}
									
									break;
									
								}
								__nacts -= 1;
								__acts += 1;
								
							}
							
							
						}
						
						
					}
					
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _gotocallret_key_offsets[cs] ;
						_trans = (int )_gotocallret_index_offsets[cs];
						_have = 0;
						_klen = (int)_gotocallret_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _gotocallret_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _gotocallret_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_gotocallret_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _gotocallret_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _gotocallret_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _gotocallret_trans_offsets[_trans] ;
						_klen = (int)_gotocallret_trans_lengths[_trans];
						_cond = (int )_gotocallret_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_gotocallret_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_gotocallret_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_gotocallret_cond_targs[_cond];
						if ( _gotocallret_cond_actions[_cond] != 0  )
						{
							_acts = _gotocallret_cond_actions[_cond] ;
							_nacts = (int )_gotocallret_actions[_acts ];
							_acts += 1;
							while ( _nacts > 0  )
							{
								switch ( _gotocallret_actions[_acts ] ) {
									case 0 :
									{
										System.out.print( "error: garbling line\n" );
										
									}
									
									break;
									case 1 :
									{
										{
											cs = 7;
											
										}
										
									}
									
									break;
									case 3 :
									{
										{
											p = p - 1;
											
										}
										{
											top-= 1;
											cs = stack[top];
											
										}
										
									}
									
									break;
									case 4 :
									{
										if ( comm >= 97 )
										{
											{
												stack[top] = cs;
												top += 1;
												cs = 5;
												
											}
										} 
										else {
											{
												stack[top] = cs;
												top += 1;
												cs = 6;
												
											}
										}
										
									}
									
									break;
									case 5 :
									{
										comm = (( data[p ]));
										
									}
									
									break;
									case 6 :
									{
										System.out.print( "prints\n" );
										
									}
									
									break;
									case 7 :
									{
										System.out.print( "correct command\n" );
										
									}
									
									break;
									case 8 :
									{
										{
											p = p - 1;
											
										}
										{
											cs = 3;
											
										}
										
									}
									
									break;
									
								}
								_nacts -= 1;
								_acts += 1;
								
							}
							
							
						}
						
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= gotocallret_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"lkajsdf\n",
		"2134\n",
		"(\n",
		"\n",
		"*234234()0909 092 -234aslkf09`1 11\n",
		"1\n",
		"909\n",
		"1 a\n",
		"11 1\n",
		"a 1\n",
		"aa a\n",
		"1 1\n",
		"1 123456\n",
		"a a\n",
		"a abcdef\n",
		"h",
		"a aa1",
	};
	
	static final int inplen = 17;
	
	public static void main (String[] args)
	{
		gotocallret3_java machine = new gotocallret3_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
