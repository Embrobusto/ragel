#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct high
{
	int cs;
};



static const char  _high_actions [] = { 0, 1, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 2, 0 ,  };
static const char  _high_nfa_targs [] = { 0, 0 ,  };
static const char  _high_nfa_offsets [] = { 0, 0 ,  };
static const char  _high_nfa_push_actions [] = { 0, 0 ,  };
static const char  _high_nfa_pop_trans [] = { 0, 0 ,  };
static const int  high_start  = 0;
static const int  high_first_final  = 0;
static const int  high_error  = -1;
static const int  high_en_main  = 0;
void high_init( struct high *fsm )
{

	{
		(fsm->cs) = ( int ) high_start;
	}
}

void high_execute( struct high *fsm, const unsigned int *_data, int _len )
{
	const unsigned int *p = _data;
	const unsigned int *pe = _data+_len;
	
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		_resume:
		switch ( (fsm->cs) ) {
			case 0:
			if ( ((*( p  ))
			)== 4026531840u )
			{
				goto ctr3;
			}
			
			if ( ((*( p  ))
			)< 32u )
			{
				{
					goto ctr0;
				}
			} 
			else if ( ((*( p  ))
			)> 511u )
			{
				if ( ((*( p  ))
				)> 4261412864u )
				{
					{
						goto ctr0;
					}
				} 
				else if ( ((*( p  ))
				)>= 4026531841u )
				{
					goto ctr4;
				}
				
			} 
			else
			{
				goto ctr1;
			}
			
			{
				goto ctr2;
			}
			
		}
		ctr0: (fsm->cs) = 0;
		goto f0;
		ctr1: (fsm->cs) = 0;
		goto f1;
		ctr2: (fsm->cs) = 0;
		goto f2;
		ctr3: (fsm->cs) = 0;
		goto f3;
		ctr4: (fsm->cs) = 0;
		goto f4;
		
		f1: _acts = _high_actions + 1 ;
		goto execFuncs;
		f4: _acts = _high_actions + 3 ;
		goto execFuncs;
		f0: _acts = _high_actions + 5 ;
		goto execFuncs;
		f2: _acts = _high_actions + 7 ;
		goto execFuncs;
		f3: _acts = _high_actions + 10 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					printf("gothigh1\n");
				}
				
				break;
				case 1:
				{
					printf("gothigh1\n");
				}
				
				break;
				case 2:
				{
					printf("gothigh2\n");
				}
				
				break;
				case 3:
				{
					printf("else\n");
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
	}
}

int high_finish( struct high *fsm )
{
	if ( fsm->cs == high_error )
	return -1;
	if ( fsm->cs >= high_first_final )
	return 1;
	return 0;
}

struct high high;

#define BUFSIZE 1024
char cbuf[BUFSIZE];
unsigned int buf[BUFSIZE];
int buflen = 0;
char numbuf[9];
int numlen = 0;

struct tokenizer
{
	int cs;
};



static const char  _tokenizer_actions [] = { 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 0 ,  };
static const char  _tokenizer_eof_actions [] = { 0, 5, 7, 0 ,  };
static const char  _tokenizer_nfa_targs [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_offsets [] = { 0, 0, 0, 0 ,  };
static const char  _tokenizer_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_pop_trans [] = { 0, 0 ,  };
static const int  tokenizer_start  = 1;
static const int  tokenizer_first_final  = 1;
static const int  tokenizer_error  = 0;
static const int  tokenizer_en_main  = 1;
void tokenizer_init( struct tokenizer *fsm )
{

	{
		(fsm->cs) = ( int ) tokenizer_start;
	}
}

void tokenizer_execute( struct tokenizer *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		if ( (fsm->cs) == 0  )
		goto _out;
		
		_resume:
		switch ( (fsm->cs) ) {
			case 1:
			if ( ((*( p  ))
			)== 32  )
			{
				goto ctr0;
			}
			
			if ( ((*( p  ))
			)< 48  )
			{
				if ( 9 <= ((*( p  ))
				)&& ((*( p  ))
				)<= 13  )
				{
					goto ctr0;
				}
				
			} 
			else if ( ((*( p  ))
			)> 57  )
			{
				if ( 97 <= ((*( p  ))
				)&& ((*( p  ))
				)<= 102  )
				{
					goto ctr2;
				}
				
			} 
			else
			{
				goto ctr2;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( ((*( p  ))
			)== 32  )
			{
				goto ctr3;
			}
			
			if ( ((*( p  ))
			)< 48  )
			{
				if ( 9 <= ((*( p  ))
				)&& ((*( p  ))
				)<= 13  )
				{
					goto ctr3;
				}
				
			} 
			else if ( ((*( p  ))
			)> 57  )
			{
				if ( 97 <= ((*( p  ))
				)&& ((*( p  ))
				)<= 102  )
				{
					goto ctr2;
				}
				
			} 
			else
			{
				goto ctr2;
			}
			
			{
				goto ctr1;
			}
			
		}
		ctr1: (fsm->cs) = 0;
		goto _again;
		ctr0: (fsm->cs) = 1;
		goto _again;
		ctr3: (fsm->cs) = 1;
		goto f3;
		ctr2: (fsm->cs) = 2;
		goto f1;
		
		f1: _acts = _tokenizer_actions + 1 ;
		goto execFuncs;
		f3: _acts = _tokenizer_actions + 3 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					if ( numlen < 8 )
					numbuf[numlen++] = (((*( p  ))
					));
					
				}
				
				break;
				case 1:
				{
					numbuf[numlen] = 0;
					numlen = 0;
					
					/* Store the number in the buf. If the buf is full then 
					* flush and reset the buffer. */
					buf[buflen++] = strtoul( numbuf, 0, 16 );
					if ( buflen == BUFSIZE ) {
						high_execute( &high, buf, BUFSIZE );
						buflen = 0;
					}
					
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		if ( (fsm->cs) == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _tokenizer_actions + _tokenizer_eof_actions[(fsm->cs)];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 1:
					{
						numbuf[numlen] = 0;
						numlen = 0;
						
						/* Store the number in the buf. If the buf is full then 
						* flush and reset the buffer. */
						buf[buflen++] = strtoul( numbuf, 0, 16 );
						if ( buflen == BUFSIZE ) {
							high_execute( &high, buf, BUFSIZE );
							buflen = 0;
						}
						
					}
					
					break;
					case 2:
					{
						if ( buflen > 0 )
						high_execute( &high, buf, buflen );
						if ( high_finish( &high ) > 0 )
						printf("ACCEPT\n");
						else
						printf("FAIL\n");
						
					}
					
					break;
					
				}
				__acts += 1;
				__nacts -= 1;
			}
			
		}
		
		
		_out: {}
	}
}

int tokenizer_finish( struct tokenizer *fsm )
{
	if ( fsm->cs == tokenizer_error )
	return -1;
	if ( fsm->cs >= tokenizer_first_final )
	return 1;
	return 0;
}

struct tokenizer tok;

void test( char *cbuf )
{
	int len = strlen( cbuf );
	high_init( &high );
	tokenizer_init( &tok );
	tokenizer_execute( &tok, cbuf, len );
	if ( tokenizer_finish( &tok ) <= 0 )
	printf("Tokenizer FAIL\n");
}

char data[] =
"10 20 30 40 50 200 300 400 \n"
"d0000000 f0000000 fd000000 fe000000\n"
"ff000000 ffffffffffffffffffffffffff\n"
"ff\n";

int main()
{
	test( data );
	return 0;
}

