package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var erract_start  int  = 1
var erract_first_final  int  = 7
var erract_error  int  = 0
var erract_en_main  int  = 1
var _erract_nfa_targs [] int8  = [] int8  { 0, 0  }
var _erract_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _erract_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _erract_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
func prepare() {

	{
		cs = int(erract_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		if p == pe  {
			goto _test_eof;
			
		}
		switch cs  {
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			
		}
		goto st_out;
		st_case_1:
		if ( data[p ]) == 104  {
			{
				goto st2;
			}
			
		}
		{
			goto ctr0;
		}
		ctr0:
		{fmt.Print( "err_start\n" );}
		{fmt.Print( "err_all\n" );}
		
		
		goto st0;
		ctr2:
		{fmt.Print( "err_all\n" );}
		{fmt.Print( "err_middle\n" );}
		
		
		goto st0;
		ctr7:
		{fmt.Print( "err_all\n" );}
		{fmt.Print( "err_out\n" );}
		
		
		goto st0;
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		st2:
		p+= 1;
		if p == pe  {
			goto _test_eof2;
			
		}
		st_case_2:
		if ( data[p ]) == 101  {
			{
				goto st3;
			}
			
		}
		{
			goto ctr2;
		}
		st3:
		p+= 1;
		if p == pe  {
			goto _test_eof3;
			
		}
		st_case_3:
		if ( data[p ]) == 108  {
			{
				goto st4;
			}
			
		}
		{
			goto ctr2;
		}
		st4:
		p+= 1;
		if p == pe  {
			goto _test_eof4;
			
		}
		st_case_4:
		if ( data[p ]) == 108  {
			{
				goto st5;
			}
			
		}
		{
			goto ctr2;
		}
		st5:
		p+= 1;
		if p == pe  {
			goto _test_eof5;
			
		}
		st_case_5:
		if ( data[p ]) == 111  {
			{
				goto st6;
			}
			
		}
		{
			goto ctr2;
		}
		st6:
		p+= 1;
		if p == pe  {
			goto _test_eof6;
			
		}
		st_case_6:
		if ( data[p ]) == 10  {
			{
				goto st7;
			}
			
		}
		{
			goto ctr7;
		}
		st7:
		p+= 1;
		if p == pe  {
			goto _test_eof7;
			
		}
		st_case_7:
		{
			goto st0;
		}
		st_out:
		_test_eof2: cs = 2;
		goto _test_eof; 
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof4: cs = 4;
		goto _test_eof; 
		_test_eof5: cs = 5;
		goto _test_eof; 
		_test_eof6: cs = 6;
		goto _test_eof; 
		_test_eof7: cs = 7;
		goto _test_eof; 
		
		_test_eof: {}
		if p == eof  {
			{
				switch cs  {
					case 1:
					{fmt.Print( "err_start\n" );}
					{fmt.Print( "eof_start\n" );}
					{fmt.Print( "err_all\n" );}
					{fmt.Print( "eof_all\n" );}
					
					break;
					case 2:
					fallthrough
					case 3:
					fallthrough
					case 4:
					fallthrough
					case 5:
					{fmt.Print( "err_all\n" );}
					{fmt.Print( "err_middle\n" );}
					{fmt.Print( "eof_all\n" );}
					{fmt.Print( "eof_middle\n" );}
					
					break;
					case 6:
					{fmt.Print( "err_all\n" );}
					{fmt.Print( "err_out\n" );}
					{fmt.Print( "eof_all\n" );}
					{fmt.Print( "eof_out\n" );}
					
					break;
					
				}
			}
			
			
		}
		_out: {}
	}
}
func finish() {
	if cs >= erract_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"",
	"h",
	"x",
	"he",
	"hx",
	"hel",
	"hex",
	"hell",
	"helx",
	"hello",
	"hellx",
	"hello\n",
	"hellox",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
