#include <stdio.h>
#define BUFSIZE 2048

struct errintrans
{
	int cs;
};



static const char  _errintrans_nfa_targs [] = { 0, 0 ,  };
static const char  _errintrans_nfa_offsets [] = { 0, 0, 0, 0 ,  };
static const char  _errintrans_nfa_push_actions [] = { 0, 0 ,  };
static const char  _errintrans_nfa_pop_trans [] = { 0, 0 ,  };
static const int  errintrans_start  = 1;
static const int  errintrans_first_final  = 2;
static const int  errintrans_error  = 0;
static const int  errintrans_en_main  = 1;
void errintrans_init( struct errintrans *fsm )
{

	{
		(fsm->cs) = ( int ) errintrans_start;
	}
}

void errintrans_execute( struct errintrans *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
	
		if ( p == pe  )
		goto _test_eof;
		
		if ( (fsm->cs) == 0  )
		goto _out;
		
		_resume:
		switch ( (fsm->cs) ) {
			case 1:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr1;
			}
			
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 57  )
			{
				goto ctr2;
			}
			
			{
				goto ctr0;
			}
			case 2:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr1;
			}
			
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 57  )
			{
				goto ctr2;
			}
			
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			
		}
		ctr2: (fsm->cs) = 0;
		goto _again;
		ctr0: (fsm->cs) = 1;
		goto _again;
		ctr1: (fsm->cs) = 2;
		goto _again;
		
		_again:
		if ( (fsm->cs) == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
	}
}

int errintrans_finish( struct errintrans *fsm )
{
	if ( fsm->cs == errintrans_error )
	return -1;
	if ( fsm->cs >= errintrans_first_final )
	return 1;
	return 0;
}


struct errintrans fsm;
#include <string.h>

void test( char *buf )
{
	int len = strlen( buf );
	errintrans_init( &fsm );
	errintrans_execute( &fsm, buf, len );
	if ( errintrans_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test(
	"good, does not have numbers\n"
	);
	
	test(
	"bad, has numbers 666\n"
	);
	
	return 0;
}

