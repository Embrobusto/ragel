#include <stdio.h>
#include <string.h>



#define test_ex_c1  99 
#define test_ex_c2  122 
#define test_ex_c3  116 
static const char  _test_key_offsets [] = { 0, 0, 3, 5, 10, 10, 0 ,  };
static const char  _test_trans_keys [] = { 10, 48, 57, 10, 46, 10, 65, 90, 97, 122, 99, 116, 122, 0 ,  };
static const char  _test_single_lengths [] = { 0, 1, 2, 1, 0, 3, 0 ,  };
static const char  _test_range_lengths [] = { 0, 1, 0, 2, 0, 0, 0 ,  };
static const char  _test_index_offsets [] = { 0, 0, 3, 6, 10, 11, 0 ,  };
static const char  _test_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _test_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 ,  };
static const char  _test_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _test_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _test_cond_targs [] = { 5, 1, 0, 5, 2, 0, 5, 3, 3, 0, 4, 1, 2, 3, 0, 0 ,  };
static const char  _test_cond_actions [] = { 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _test_nfa_targs [] = { 0, 0 ,  };
static const char  _test_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _test_nfa_push_actions [] = { 0, 0 ,  };
static const char  _test_nfa_pop_trans [] = { 0, 0 ,  };
static const int  test_start  = 4;
static const int  test_first_final  = 4;
static const int  test_error  = 0;
static const int  test_en_commands  = 5;
static const int  test_en_some_other  = 4;
int test( const char *data, int len )
{
	int cs = test_en_commands;
	const char *p = data, *pe = data + len;
	
	
	{
	}
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _test_trans_keys + _test_key_offsets[cs];
		_trans = ( unsigned int  ) _test_index_offsets[cs];
		_klen = ( int ) _test_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _test_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _test_cond_keys + _test_trans_offsets[_trans];
		_klen = ( int ) _test_trans_lengths[_trans];
		_cond = ( unsigned int  ) _test_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _test_cond_targs[_cond];
		if ( _test_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _test_cond_actions[_cond] ) {
			case 1 :
			{
				printf( "c1\n" );
			}
			
			break;
			case 3 :
			{
				printf( "c2\n" );
			}
			
			break;
			case 2 :
			{
				printf( "c3\n" );
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
	if ( cs >= test_first_final )
	printf("ACCEPT\n");
	else
	printf("ERROR\n");
	return 0;
}

char data[] = { 
	test_ex_c1, '1', '2', '\n', 
	test_ex_c2, 'a', 'b', '\n', 
	test_ex_c3, '.', '.', '\n', 0 
};

int main()
{
	test( data, strlen( data ) );
	return 0;
}

