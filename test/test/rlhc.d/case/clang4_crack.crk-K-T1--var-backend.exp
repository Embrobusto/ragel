import crack.io cout;
import crack.lang Buffer;

int pos;
int line;





const array[int16 ] _clang_key_offsets = [ 0, 0, 3, 6, 7, 9, 12, 13, 15, 21, 22, 42, 62, 82, 103, 124, 143, 162, 182, 0 ,  ];
const array[byte ] _clang_trans_keys = [ 10, 34, 92, 10, 39, 92, 10, 10, 33, 10, 33, 47, 10, 48, 57, 48, 57, 65, 70, 97, 102, 10, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0,  ];
const array[int16 ] _clang_single_lengths = [ 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 ,  ];
const array[int16 ] _clang_range_lengths = [ 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 ,  ];
const array[int16 ] _clang_index_offsets = [ 0, 0, 4, 8, 10, 13, 17, 19, 21, 25, 27, 41, 55, 69, 84, 99, 112, 125, 139, 0 ,  ];
const array[int16 ] _clang_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _clang_trans_offsets = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 0 ,  ];
const array[int16 ] _clang_trans_lengths = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _clang_cond_keys = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _clang_cond_targs = [ 1, 12, 9, 1, 2, 12, 3, 2, 2, 2, 4, 5, 4, 4, 5, 10, 4, 10, 6, 15, 0, 18, 18, 18, 0, 1, 1, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 ,  ];
const array[int16 ] _clang_cond_actions = [ 2, 0, 0, 1, 2, 0, 0, 1, 2, 1, 3, 0, 0, 3, 0, 0, 0, 3, 0, 1, 0, 4, 4, 4, 0, 2, 1, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0 ,  ];
const array[int16 ] _clang_eof_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 ,  ];
const array[int16 ] _clang_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _clang_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _clang_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _clang_nfa_pop_trans = [ 0, 0 ,  ];
const int  clang_start  = 10;
const int  clang_first_final  = 10;
const int  clang_error  = 0;
const int  clang_en_main  = 10;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	pos = 0;
	line = 1;
	
	if ( 1 ) {
		cs = int ( clang_start );
		
	}
	if ( 1 ) {
		int _klen;
		int _keys = 0;
		int _ckeys = 0;
		int _cpc;
		uint32 _trans;
		uint32 _cond = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						if ( _clang_eof_actions[cs] == 22  ) {
							if ( 1 ) {
								cout.format( "ident(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 10  ) {
							if ( 1 ) {
								cout.format( "literal(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 18  ) {
							if ( 1 ) {
								cout.format( "float(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 14  ) {
							if ( 1 ) {
								cout.format( "int(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 26  ) {
							if ( 1 ) {
								cout.format( "hex(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 6  ) {
							if ( 1 ) {
								cout.format( "symbol(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						;
						
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _clang_key_offsets[cs];
					_trans = uint32  ( _clang_index_offsets[cs] );
					_have = 0;
					_klen = int ( _clang_single_lengths[cs] );
					if ( _klen > 0  )
					{
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( (data[p ])< _clang_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( (data[p ])> _clang_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += uint32  ( (_mid - _keys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += uint32  ( _klen );
							
						}
						
						
					}
					
					if ( _have == 0  )
					{
						_klen = int ( _clang_range_lengths[cs] );
						if ( _klen > 0  )
						{
							int _lower = 0;
							int _mid = 0;
							int _upper = 0;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( (data[p ])< _clang_trans_keys[_mid ] )
								_upper = _mid - 2;
								
								else if ( (data[p ])> _clang_trans_keys[_mid + 1 ] )
								_lower = _mid + 2;
								
								else
								{
									_trans += uint32  ( ((_mid - _keys)>>1) );
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							_trans += uint32  ( _klen );
							
							
						}
						
						
					}
					
					_ckeys = _clang_trans_offsets[_trans];
					_klen = int ( _clang_trans_lengths[_trans] );
					_cond = uint32  ( _clang_trans_offsets[_trans] );
					_have = 0;
					_cpc = 0;
					if ( 1 ) {
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < int ( _clang_cond_keys[_mid ] ) )
							_upper = _mid - 1;
							
							else if ( _cpc > int ( _clang_cond_keys[_mid ] ) )
							_lower = _mid + 1;
							
							else
							{
								_cond += uint32  ( (_mid - _ckeys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
							
						}
						
						
					}
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _clang_cond_targs[_cond] );
					if ( _clang_cond_actions[_cond] == 1  ) {
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 5  ) {
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 3  ) {
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 22  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 10  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 18  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 14  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 26  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 6  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 2  ) {
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 4  ) {
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 25  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 23  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 13  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 11  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 21  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 19  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 17  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 15  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 29  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 27  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 9  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 7  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 24  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 12  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 20  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 16  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 28  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_cond] == 8  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= clang_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n" );
	m( "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n" );
}

main();
