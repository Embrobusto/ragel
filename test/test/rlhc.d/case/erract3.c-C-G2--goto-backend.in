host( "working/erract3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#define IDENT_BUFLEN 256
	
	struct erract
	{
		int cs;
	};
	
	
	
}@
value int erract_start = 0;
value int erract_first_final = 0;
value int erract_error = -1;

value int erract_en_main = 0;

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/erract3.rl", 26 ) @{
	
	void erract_init( struct erract *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)erract_start;
	}
	host( "working/erract3.rl", 30 ) @{
	}
	
	void erract_execute( struct erract *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		const char *eof = pe;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( host( "-", 1 ) ={ fsm->cs}= )
		{
			case 0:
			goto st_case_0;
			case 1:
			goto st_case_1;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
		}
		goto st_out;
		ctr9:
		host( "working/erract3.rl", 20 ) ${printf("newline\n");}$
		
		goto st0;
		st0:
		p+= 1;
		if ( p == pe )
		goto _test_eof0;
		st_case_0:
		switch( ( deref( data, p )) ) {
			case 10: {
				goto ctr1;
			}
			case 104: {
				goto st2;
			}
		}
		{
			goto ctr0;
		}
		ctr0:
		host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
		
		goto st1;
		ctr1:
		host( "working/erract3.rl", 20 ) ${printf("newline\n");}$
		host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
		
		goto st1;
		ctr4:
		host( "working/erract3.rl", 20 ) ${printf("newline\n");}$
		
		goto st1;
		st1:
		p+= 1;
		if ( p == pe )
		goto _test_eof1;
		st_case_1:
		if ( ( deref( data, p )) == 10 ) {
			goto ctr4;
		}
		{
			goto st1;
		}
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		switch( ( deref( data, p )) ) {
			case 10: {
				goto ctr1;
			}
			case 101: {
				goto st3;
			}
		}
		{
			goto ctr0;
		}
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		switch( ( deref( data, p )) ) {
			case 10: {
				goto ctr1;
			}
			case 108: {
				goto st4;
			}
		}
		{
			goto ctr0;
		}
		st4:
		p+= 1;
		if ( p == pe )
		goto _test_eof4;
		st_case_4:
		switch( ( deref( data, p )) ) {
			case 10: {
				goto ctr1;
			}
			case 108: {
				goto st5;
			}
		}
		{
			goto ctr0;
		}
		st5:
		p+= 1;
		if ( p == pe )
		goto _test_eof5;
		st_case_5:
		switch( ( deref( data, p )) ) {
			case 10: {
				goto ctr1;
			}
			case 111: {
				goto st6;
			}
		}
		{
			goto ctr0;
		}
		st6:
		p+= 1;
		if ( p == pe )
		goto _test_eof6;
		st_case_6:
		if ( ( deref( data, p )) == 10 ) {
			goto ctr9;
		}
		{
			goto ctr0;
		}
		st_out:
		_test_eof0: host( "-", 1 ) ={ fsm->cs}= = 0; goto _test_eof; 
		_test_eof1: host( "-", 1 ) ={ fsm->cs}= = 1; goto _test_eof; 
		_test_eof2: host( "-", 1 ) ={ fsm->cs}= = 2; goto _test_eof; 
		_test_eof3: host( "-", 1 ) ={ fsm->cs}= = 3; goto _test_eof; 
		_test_eof4: host( "-", 1 ) ={ fsm->cs}= = 4; goto _test_eof; 
		_test_eof5: host( "-", 1 ) ={ fsm->cs}= = 5; goto _test_eof; 
		_test_eof6: host( "-", 1 ) ={ fsm->cs}= = 6; goto _test_eof; 
		
		_test_eof: {}
		if ( p == eof )
		{
			switch ( host( "-", 1 ) ={ fsm->cs}= ) {
				case 2: 
				fallthrough;
				case 3: 
				fallthrough;
				case 4: 
				fallthrough;
				case 5: 
				fallthrough;
				case 6: 
				host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
				break;
			}
		}
		
	}
	host( "working/erract3.rl", 38 ) @{
	}
	
	int erract_finish( struct erract *fsm )
	{
		if ( fsm->cs == erract_error )
		return -1;
		else if ( fsm->cs >= erract_first_final )
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#include <string.h>
	
	struct erract fsm;
	
	void test( char *buf )
	{
		int len = strlen(buf);
		erract_init( &fsm );
		erract_execute( &fsm, buf, len );
		if ( erract_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"hello\n"
		"hello\n"
		"hello\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"hello there\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"he"	);
		
		test( "" );
		
		return 0;
	}
	
}@