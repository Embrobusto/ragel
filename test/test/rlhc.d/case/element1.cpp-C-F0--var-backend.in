host( "working/element1.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	#include <iostream>
	using namespace std;
	
	struct LangEl
	{
		int key;
		const char *name;
	};
	
	struct Fsm
	{
		int cs;
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		int init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		int execute(  LangEl *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
		
	};
	
	
	
}@
array s8 _Fsm_actions( 0, 1 ) = { 0, 1, 0, 1, 1, 0 };

array int _Fsm_trans_keys( 0, 2 ) = { 1, 0, 0, 0, 1, 2, 1, 0, 0 };

array s8 _Fsm_char_class( 0, 2 ) = { 0, 1, 2, 0 };

array s8 _Fsm_index_offsets( 0, 3 ) = { 0, 0, 1, 3, 0 };

array s8 _Fsm_indicies( 0, 2 ) = { 0, 0, 2, 0 };

array s8 _Fsm_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _Fsm_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, 0 };

array s8 _Fsm_cond_targs( 0, 3 ) = { 2, 0, 3, 0 };

array s8 _Fsm_cond_actions( 0, 1 ) = { 1, 0, 1, 0 };

array s8 _Fsm_eof_actions( 0, 3 ) = { 0, 0, 0, 3, 0 };

array s8 _Fsm_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _Fsm_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Fsm_start = 1;
value int Fsm_first_final = 3;
value int Fsm_error = 0;

value int Fsm_en_main = 1;

host( "working/element1.rl", 54 ) @{
	
	int Fsm::init( )
	{
	}@
	{
		cs = cast(int)Fsm_start;
	}
	host( "working/element1.rl", 58 ) @{
		return 0;
	}
	
	int Fsm::execute( LangEl *data, int len )
	{
		LangEl *p = data;
		LangEl *pe = data + len;
		LangEl *eof_marker = pe;
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index int _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == host( "-", 1 ) ={ eof_marker}= )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _Fsm_actions, _Fsm_eof_actions[cs] );
						__nacts = cast(uint)deref( _Fsm_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _Fsm_actions, __acts ) ) {
								case 1 {
									host( "working/element1.rl", 50 ) ${cout << "accept" << endl;}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _Fsm_trans_keys, (cs<<1) );
					_inds = offset( _Fsm_indicies, _Fsm_index_offsets[cs] );
					
					if ( host( "-", 1 ) ={p->key}= <= 3 && host( "-", 1 ) ={p->key}= >= 1 )
					{
						int _ic = cast(int)_Fsm_char_class[cast(int)host( "-", 1 ) ={p->key}= - 1];
						if ( _ic <= cast(int)deref( _Fsm_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Fsm_trans_keys, _keys ) )
						_trans = cast(uint)deref( _Fsm_indicies, _inds + cast(int)( _ic - cast(int)deref( _Fsm_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_Fsm_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_Fsm_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_Fsm_cond_targs[_trans];
					
					if ( _Fsm_cond_actions[_trans] != 0 ) {
						_acts = offset( _Fsm_actions, _Fsm_cond_actions[_trans] );
						_nacts = cast(uint)deref( _Fsm_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _Fsm_actions, _acts ) )
							{
								case 0 {
									host( "working/element1.rl", 49 ) ${cout << p->name << endl;}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/element1.rl", 67 ) @{
		
		if ( cs == Fsm_error )
		return -1;
		if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	int Fsm::finish( )
	{
		if ( cs == Fsm_error )
		return -1;
		if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	int main( )
	{
		static Fsm fsm;
		static LangEl lel[] = { 
			{1, "one"}, 
			{2, "two-a"}, 
			{2, "two-b"}, 
			{2, "two-c"}, 
			{3, "three"}
		};
		
		fsm.init();
		fsm.execute( lel, 5 );
		fsm.finish();
		return 0;
	}
	
}@