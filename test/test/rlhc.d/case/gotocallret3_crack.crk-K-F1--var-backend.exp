import crack.io cout;
import crack.lang Buffer;

byte comm;
int top;
array[int] stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];





const array[byte ] _gotocallret_trans_keys = [ 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0,  ];
const array[int16 ] _gotocallret_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 ,  ];
const array[int16 ] _gotocallret_index_offsets = [ 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 ,  ];
const array[int16 ] _gotocallret_indicies = [ 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 ,  ];
const array[int16 ] _gotocallret_index_defaults = [ 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 ,  ];
const array[int16 ] _gotocallret_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _gotocallret_cond_targs = [ 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 ,  ];
const array[int16 ] _gotocallret_cond_actions = [ 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0 ,  ];
const array[int16 ] _gotocallret_eof_actions = [ 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 ,  ];
const array[int16 ] _gotocallret_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _gotocallret_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _gotocallret_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _gotocallret_nfa_pop_trans = [ 0, 0 ,  ];
const int  gotocallret_start  = 7;
const int  gotocallret_first_final  = 7;
const int  gotocallret_error  = 0;
const int  gotocallret_en_garble_line  = 3;
const int  gotocallret_en_alp_comm  = 5;
const int  gotocallret_en_dig_comm  = 6;
const int  gotocallret_en_main  = 7;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( gotocallret_start );
		top = 0;
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						if ( _gotocallret_eof_actions[cs] == 4  ) {
							if ( 1 ) {
								cout.format( "error: failed to recover\n" );
								
							}
							
						}
						else if ( _gotocallret_eof_actions[cs] == 8  ) {
							if ( 1 ) {
								if ( 1 ) {
									p = p - 1;
									
								}
								if ( 1 ) {
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
						}
						else if ( _gotocallret_eof_actions[cs] == 1  ) {
							if ( 1 ) {
								if ( 1 ) {
									p = p - 1;
									
								}
								if ( 1 ) {
									cs = 3;
									
								}
								
							}
							
						}
						;
						
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _gotocallret_index_offsets[cs];
					if ( (data[p ])<= 122 && (data[p ])>= 10  )
					{
						int _ic = int ( _gotocallret_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _gotocallret_trans_keys[_keys+1 ] )&& _ic >= int ( _gotocallret_trans_keys[_keys ] ) )
						_trans = uint32  ( _gotocallret_indicies[_inds + int ( (_ic - int ( _gotocallret_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _gotocallret_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _gotocallret_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _gotocallret_cond_targs[_trans] );
					if ( _gotocallret_cond_actions[_trans] == 5  ) {
						if ( 1 ) {
							cout.format( "error: garbling line\n" );
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 7  ) {
						if ( 1 ) {
							if ( 1 ) {
								cs = 7;
								
							}
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 8  ) {
						if ( 1 ) {
							if ( 1 ) {
								p = p - 1;
								
							}
							if ( 1 ) {
								top-= 1;
								cs = stack[top];
								
							}
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 9  ) {
						if ( 1 ) {
							comm = ((data[p ]));
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 3  ) {
						if ( 1 ) {
							cout.format( "correct command\n" );
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 1  ) {
						if ( 1 ) {
							if ( 1 ) {
								p = p - 1;
								
							}
							if ( 1 ) {
								cs = 3;
								
							}
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 6  ) {
						if ( 1 ) {
							cout.format( "error: garbling line\n" );
							
						}
						if ( 1 ) {
							if ( 1 ) {
								cs = 7;
								
							}
							
						}
						
					}
					else if ( _gotocallret_cond_actions[_trans] == 2  ) {
						if ( 1 ) {
							if ( comm >= 97 )
							{
								if ( 1 ) {
									stack[top] = cs;
									top += 1;
									cs = 5;
									
								}
							} 
							else {
								if ( 1 ) {
									stack[top] = cs;
									top += 1;
									cs = 6;
									
								}
							}
							
						}
						if ( 1 ) {
							cout.format( "prints\n" );
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= gotocallret_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "lkajsdf\n" );
	m( "2134\n" );
	m( "(\n" );
	m( "\n" );
	m( "*234234()0909 092 -234aslkf09`1 11\n" );
	m( "1\n" );
	m( "909\n" );
	m( "1 a\n" );
	m( "11 1\n" );
	m( "a 1\n" );
	m( "aa a\n" );
	m( "1 1\n" );
	m( "1 123456\n" );
	m( "a a\n" );
	m( "a abcdef\n" );
	m( "h" );
	m( "a aa1" );
}

main();
