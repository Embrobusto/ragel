#include <string.h>
#include <stdio.h>

char comm ;
int top ;
int stack [32];





static const char  _gotocallret_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0 ,  };
static const char  _gotocallret_trans_keys [] = { 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0 ,  };
static const char  _gotocallret_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 ,  };
static const char  _gotocallret_index_offsets [] = { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 ,  };
static const char  _gotocallret_indicies [] = { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 ,  };
static const char  _gotocallret_index_defaults [] = { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 ,  };
static const char  _gotocallret_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _gotocallret_cond_targs [] = { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 ,  };
static const char  _gotocallret_cond_actions [] = { 13, 18, 11, 1, 15, 0, 3, 7, 0, 0, 9, 0, 0 ,  };
static const char  _gotocallret_eof_actions [] = { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0 ,  };
static const char  _gotocallret_nfa_targs [] = { 0, 0 ,  };
static const char  _gotocallret_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _gotocallret_nfa_push_actions [] = { 0, 0 ,  };
static const char  _gotocallret_nfa_pop_trans [] = { 0, 0 ,  };
static const int  gotocallret_start  = 7;
static const int  gotocallret_first_final  = 7;
static const int  gotocallret_error  = 0;
static const int  gotocallret_en_garble_line  = 3;
static const int  gotocallret_en_alp_comm  = 5;
static const int  gotocallret_en_dig_comm  = 6;
static const int  gotocallret_en_main  = 7;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) gotocallret_start;
		top = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _gotocallret_trans_keys + (cs<<1);
		_inds = _gotocallret_indicies + _gotocallret_index_offsets[cs];
		if ( ((*( p  ))
		)<= 122 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _gotocallret_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _gotocallret_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _gotocallret_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _gotocallret_cond_targs[_trans];
		if ( _gotocallret_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _gotocallret_actions + _gotocallret_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf( "%s", "error: garbling line\n" );
					
				}
				
				break;
				case 1 :
				{
					{
						cs = 7;
						
					}
					
				}
				
				break;
				case 3 :
				{
					{
						p = p - 1;
						
					}
					{
						top -= 1;
						cs = stack[top];
						
					}
					
				}
				
				break;
				case 4 :
				{
					if ( comm >= 97 )
					{
						{
							stack[top] = cs;
							top += 1;
							cs = 5;
							
						}
					} 
					else {
						{
							stack[top] = cs;
							top += 1;
							cs = 6;
							
						}
					}
					
				}
				
				break;
				case 5 :
				{
					comm = (((*( p  ))
					));
					
				}
				
				break;
				case 6 :
				{
					printf( "%s", "prints\n" );
					
				}
				
				break;
				case 7 :
				{
					printf( "%s", "correct command\n" );
					
				}
				
				break;
				case 8 :
				{
					{
						p = p - 1;
						
					}
					{
						cs = 3;
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _gotocallret_actions + _gotocallret_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 2 :
					{
						printf( "%s", "error: failed to recover\n" );
						
					}
					
					break;
					case 3 :
					{
						{
							p = p - 1;
							
						}
						{
							top -= 1;
							cs = stack[top];
							
						}
						
					}
					
					break;
					case 8 :
					{
						{
							p = p - 1;
							
						}
						{
							cs = 3;
							
						}
						
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= gotocallret_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

int inplen = 17;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

