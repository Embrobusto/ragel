(*
* @LANG: ocaml
* @GENERATED: true
*)

let comm = ref 0
let top = ref 0
let stack = Array.make 32 0
let ts = ref 0
let te = ref 0
let act = ref 0
let value = ref 0






let _patact_actions : int array = [|
0; 1; 0; 1; 1; 1; 2; 1; 3; 1; 4; 1; 5; 1; 8; 1; 9; 1; 10; 1; 11; 1; 12; 1; 13; 1; 14; 1; 15; 1; 16; 1; 19; 1; 20; 1; 21; 1; 22; 1; 23; 1; 24; 1; 25; 1; 26; 1; 27; 2; 2; 6; 2; 2; 7; 2; 2; 17; 2; 2; 18; 0 ; 
|]
let _patact_key_offsets : int array = [|
0; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 25; 28; 32; 35; 41; 43; 45; 53; 56; 60; 63; 0 ; 
|]
let _patact_trans_keys : int array = [|
102; 111; 105; 108; 102; 111; 105; 108; 102; 111; 105; 108; 102; 111; 105; 108; 10; 32; 33; 50; 59; 48; 57; 97; 122; 32; 48; 57; 32; 50; 48; 57; 32; 97; 122; 10; 32; 48; 57; 97; 122; 48; 57; 97; 122; 10; 32; 33; 50; 48; 57; 97; 122; 32; 48; 57; 32; 50; 48; 57; 32; 97; 122; 59; 0 ; 
|]
let _patact_single_lengths : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 5; 1; 2; 1; 2; 0; 0; 4; 1; 2; 1; 1; 0 ; 
|]
let _patact_range_lengths : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2; 1; 1; 1; 2; 1; 1; 2; 1; 1; 1; 0; 0 ; 
|]
let _patact_index_offsets : int array = [|
0; 0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 40; 43; 47; 50; 55; 57; 59; 66; 69; 73; 76; 0 ; 
|]
let _patact_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; 0 ; 
|]
let _patact_trans_offsets : int array = [|
0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96; 97; 98; 99; 100; 101; 0 ; 
|]
let _patact_trans_lengths : int array = [|
1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0 ; 
|]
let _patact_cond_keys : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _patact_cond_targs : int array = [|
2; 17; 3; 17; 4; 17; 17; 17; 6; 17; 7; 17; 8; 17; 17; 17; 10; 24; 11; 24; 12; 24; 24; 24; 14; 24; 15; 24; 16; 24; 24; 24; 17; 17; 17; 19; 17; 18; 20; 0; 1; 18; 17; 1; 18; 18; 17; 5; 20; 17; 21; 21; 22; 23; 0; 22; 21; 23; 21; 24; 24; 24; 26; 25; 27; 0; 9; 25; 24; 9; 25; 25; 24; 13; 27; 24; 28; 0; 17; 17; 17; 17; 17; 17; 17; 17; 24; 24; 24; 24; 24; 24; 24; 24; 17; 17; 17; 21; 21; 24; 24; 24; 0 ; 
|]
let _patact_cond_actions : int array = [|
0; 47; 0; 47; 0; 47; 35; 47; 0; 45; 0; 45; 0; 45; 31; 45; 0; 27; 0; 27; 0; 27; 17; 27; 0; 25; 0; 25; 0; 25; 13; 25; 33; 33; 39; 58; 37; 58; 5; 0; 0; 58; 47; 0; 55; 58; 43; 0; 5; 41; 7; 7; 0; 0; 0; 0; 11; 0; 9; 15; 15; 19; 52; 52; 5; 0; 0; 52; 27; 0; 49; 52; 23; 0; 5; 21; 29; 0; 47; 47; 47; 47; 45; 45; 45; 45; 27; 27; 27; 27; 25; 25; 25; 25; 47; 43; 41; 11; 9; 27; 23; 21; 0 ; 
|]
let _patact_to_state_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 1; 0; 0; 1; 0; 0; 0; 1; 0 ; 
|]
let _patact_from_state_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 3; 0; 0; 0; 3; 0; 0; 3; 0; 0; 0; 3; 0 ; 
|]
let _patact_eof_trans_indexed : int array = [|
0; 18; 18; 18; 18; 20; 20; 20; 20; 36; 36; 36; 36; 38; 38; 38; 38; 0; 18; 25; 26; 0; 32; 33; 0; 36; 42; 43; 0; 0 ; 
|]
let _patact_eof_trans_direct : int array = [|
0; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 0; 95; 96; 97; 0; 98; 99; 0; 100; 101; 102; 0; 0 ; 
|]
let _patact_nfa_targs : int array = [|
0; 0 ; 
|]
let _patact_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _patact_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _patact_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let patact_start  : int  = 17
let patact_first_final  : int  = 17
let patact_error  : int  = 0
let patact_en_other  : int  = 21
let patact_en_exec_test  : int  = 24
let patact_en_semi  : int  = 28
let patact_en_main  : int  = 17
let exec data = 
let buffer = String.create(1024) in 
let blen :int ref = ref 0 in
let cs = ref 0 in
let p = ref 0 in
let pe = ref (String.length data) in
let eof = pe in
begin
	cs  := patact_start;
	ts  := 0;
	te  := 0;
	act  := 0;
	
end;
begin
	let _klen : int  ref = ref 0 in
	let _trans  : int  ref = ref 0 in
	let _cond  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	let _acts : int ref = ref 0 in
	let _nacts : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _ckeys : int ref = ref 0 in
	let _cpc : int  ref = ref 0 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if p.contents= eof.contents then
				begin
					begin
						if _patact_eof_trans_direct.(cs.contents)> 0  then
						begin
							begin
								_trans  := _patact_eof_trans_direct.(cs.contents)- 1;
								_cond  := _patact_trans_offsets.(_trans.contents);
								_have  := 1;
								
							end;
							
						end
						;if _have.contents= 0  then
						begin
							begin
							
							end;
							
						end
						;
					end;
					
				end
				;if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						_acts  := _patact_from_state_actions.(cs.contents);
						_nacts  := _patact_actions.( _acts.contents );
						_acts  := _acts.contents + 1;
						while _nacts.contents> 0  do
						begin
							if _patact_actions.( _acts.contents ) = 1  then
							begin
								begin
									begin
										ts  := p.contents;
										
									end;
									
								end;
								
							end
							;
							_nacts  := _nacts.contents - 1;
							_acts  := _acts.contents + 1;
							
						end;
						
						done;
						_keys  := _patact_key_offsets.(cs.contents);
						_trans  := _patact_index_offsets.(cs.contents);
						_have  := 0;
						_klen  := _patact_single_lengths.(cs.contents);
						if _klen.contents> 0  then
						begin
							begin
								let _lower : int ref = ref 0 in
								let _mid : int ref = ref 0 in
								let _upper : int ref = ref 0 in
								_lower  := _keys.contents;
								_upper  := _keys.contents+ _klen.contents- 1;
								while _upper.contents>= _lower.contents&& _have.contents= 0  do
								begin
									_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
									if ( Char.code data.[p.contents] )< _patact_trans_keys.( _mid.contents ) then
									begin
										_upper  := _mid.contents- 1;
										
									end
									else if ( Char.code data.[p.contents] )> _patact_trans_keys.( _mid.contents ) then
									begin
										_lower  := _mid.contents+ 1;
										
									end
									else
									begin
										begin
											_trans  := _trans.contents + ( _mid.contents- _keys.contents );
											_have  := 1;
											
										end;
										
									end
									;
								end;
								
								done;
								if _have.contents= 0  then
								begin
									begin
										_keys  := _keys.contents + _klen.contents;
										_trans  := _trans.contents + _klen.contents;
										
									end;
									
								end
								;
							end;
							
						end
						;if _have.contents= 0  then
						begin
							begin
								_klen  := _patact_range_lengths.(cs.contents);
								if _klen.contents> 0  then
								begin
									begin
										let _lower : int ref = ref 0 in
										let _mid : int ref = ref 0 in
										let _upper : int ref = ref 0 in
										_lower  := _keys.contents;
										_upper  := _keys.contents+ ( _klen.contents lsl 1 )- 2;
										while _have.contents= 0 && _lower.contents<= _upper.contents do
										begin
											_mid  := _lower.contents+ ( ( ( _upper.contents-_lower.contents ) asr 1 ) land  lnot 1 );
											if ( Char.code data.[p.contents] )< _patact_trans_keys.( _mid.contents ) then
											begin
												_upper  := _mid.contents- 2;
												
											end
											else if ( Char.code data.[p.contents] )> _patact_trans_keys.( _mid.contents+ 1  ) then
											begin
												_lower  := _mid.contents+ 2;
												
											end
											else
											begin
												begin
													_trans  := _trans.contents + ( ( _mid.contents- _keys.contents ) asr 1 );
													_have  := 1;
													
												end;
												
											end
											;
										end;
										
										done;
										if _have.contents= 0  then
										begin
											_trans  := _trans.contents + _klen.contents;
											
										end
										;
									end;
									
								end
								;
							end;
							
						end
						;_ckeys  := _patact_trans_offsets.(_trans.contents);
						_klen  := _patact_trans_lengths.(_trans.contents);
						_cond  := _patact_trans_offsets.(_trans.contents);
						_have  := 0;
						_cpc  := 0;
						begin
							let _lower : int ref = ref 0 in
							let _mid : int ref = ref 0 in
							let _upper : int ref = ref 0 in
							_lower  := _ckeys.contents;
							_upper  := _ckeys.contents+ _klen.contents- 1;
							while _have.contents= 0 && _lower.contents<= _upper.contents do
							begin
								_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
								if _cpc.contents< _patact_cond_keys.( _mid.contents ) then
								begin
									_upper  := _mid.contents- 1;
									
								end
								else if _cpc.contents> _patact_cond_keys.( _mid.contents ) then
								begin
									_lower  := _mid.contents+ 1;
									
								end
								else
								begin
									begin
										_cond  := _cond.contents + ( _mid.contents- _ckeys.contents );
										_have  := 1;
										
									end;
									
								end
								;
							end;
							
							done;
							if _have.contents= 0  then
							begin
								begin
									cs  := 0;
									_cont  := 0;
									
								end;
								
							end
							;
						end;
						
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _patact_cond_targs.(_cond.contents);
						if _patact_cond_actions.(_cond.contents)!= 0  then
						begin
							begin
								_acts  := _patact_cond_actions.(_cond.contents);
								_nacts  := _patact_actions.( _acts.contents );
								_acts  := _acts.contents + 1;
								while _nacts.contents> 0  do
								begin
									if _patact_actions.( _acts.contents ) = 2  then
									begin
										begin
											begin
												te  := p.contents+1;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 3  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "space\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 4  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "word\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 5  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "num\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 6  then
									begin
										begin
											begin
												act  := 7;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 7  then
									begin
										begin
											begin
												act  := 8;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 8  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "word (c/lbh)\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 9  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "space\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 10  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "num (c/switch)\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 11  then
									begin
										begin
											begin
												te  := p.contents+1;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 12  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "word (w/lbh)\n" );
													begin
														p  := ( ( te.contents-1 ) )-1;
														
													end;
													
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 13  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "num (w/switch)\n" );
													begin
														p  := ( ( te.contents-1 ) )-1;
														
													end;
													
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 14  then
									begin
										begin
											begin
												p  := ( ( te.contents ) )-1;
												begin
													print_string( "word (w/lbh)\n" );
													begin
														p  := ( ( te.contents-1 ) )-1;
														
													end;
													
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 15  then
									begin
										begin
											begin
												if act.contents = 7  then
												begin
													p  := ( ( te.contents ) )-1;
													begin
														print_string( "num (w/switch)\n" );
														
													end;
													
												end
												else if act.contents = 8  then
												begin
													p  := ( ( te.contents ) )-1;
													begin
														print_string( "num (w/switch)\n" );
														begin
															p  := ( ( te.contents-1 ) )-1;
															
														end;
														
														begin
															cs  := 21;
															
														end;
														
													end;
													
												end
												;
												
											end;
											
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 16  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "in semi\n" );
													begin
														cs  := 17;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 17  then
									begin
										begin
											begin
												act  := 15;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 18  then
									begin
										begin
											begin
												act  := 16;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 19  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "word (c/lbh)\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 20  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "space\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 21  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "num (c/switch)\n" );
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 22  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "going to semi\n" );
													begin
														p  := p.contents- 1;
														
													end;
													begin
														cs  := 28;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 23  then
									begin
										begin
											begin
												te  := p.contents+1;
												begin
													print_string( "immdiate\n" );
													begin
														cs  := 24;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 24  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "word (w/lbh)\n" );
													begin
														p  := p.contents- 1;
														
													end;
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 25  then
									begin
										begin
											begin
												te  := p.contents;
												p  := p.contents- 1;
												begin
													print_string( "num (w/switch)\n" );
													begin
														p  := p.contents- 1;
														
													end;
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 26  then
									begin
										begin
											begin
												p  := ( ( te.contents ) )-1;
												begin
													print_string( "word (w/lbh)\n" );
													begin
														p  := p.contents- 1;
														
													end;
													begin
														cs  := 21;
														
													end;
													
												end;
												
											end;
											
										end;
										
									end
									else if _patact_actions.( _acts.contents ) = 27  then
									begin
										begin
											begin
												if act.contents = 15  then
												begin
													p  := ( ( te.contents ) )-1;
													begin
														print_string( "num (w/switch)\n" );
														
													end;
													
												end
												else if act.contents = 16  then
												begin
													p  := ( ( te.contents ) )-1;
													begin
														print_string( "num (w/switch)\n" );
														begin
															p  := p.contents- 1;
															
														end;
														begin
															cs  := 21;
															
														end;
														
													end;
													
												end
												;
												
											end;
											
											
										end;
										
									end
									;
									_nacts  := _nacts.contents - 1;
									_acts  := _acts.contents + 1;
									
								end;
								
								done;
								
							end;
							
						end
						;_acts  := _patact_to_state_actions.(cs.contents);
						_nacts  := _patact_actions.( _acts.contents );
						_acts  := _acts.contents + 1;
						while _nacts.contents> 0  do
						begin
							if _patact_actions.( _acts.contents ) = 0  then
							begin
								begin
									begin
										ts  := 0;
										
									end;
									
								end;
								
							end
							;
							_nacts  := _nacts.contents - 1;
							_acts  := _acts.contents + 1;
							
						end;
						
						done;
						if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !cs >= patact_first_final then
print_string "ACCEPT\n"
else
print_string "FAIL\n"
;;

let () =
exec "abcd foix\n";
exec "abcd\nanother\n";
exec "123 foix\n";
exec "!abcd foix\n";
exec "!abcd\nanother\n";
exec "!123 foix\n";
exec ";";
()
;;

