host( "working/patact_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var comm  byte ;
	var top  int ;
	var stack [32] int ;
	var ts  int ;
	var te  int ;
	var act  int ;
	var value  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array s8 _patact_actions( 0, 27 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 2, 2, 6, 2, 2, 7, 2, 2, 17, 2, 2, 18, 0 };

array s8 _patact_key_offsets( 0, 63 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 28, 32, 35, 41, 43, 45, 53, 56, 60, 63, 0 };

array byte _patact_trans_keys( 0, 122 ) = { u(102), u(111), u(105), u(108), u(102), u(111), u(105), u(108), u(102), u(111), u(105), u(108), u(102), u(111), u(105), u(108), u(10), u(32), u(33), u(50), u(59), u(48), u(57), u(97), u(122), u(32), u(48), u(57), u(32), u(50), u(48), u(57), u(32), u(97), u(122), u(10), u(32), u(48), u(57), u(97), u(122), u(48), u(57), u(97), u(122), u(10), u(32), u(33), u(50), u(48), u(57), u(97), u(122), u(32), u(48), u(57), u(32), u(50), u(48), u(57), u(32), u(97), u(122), u(59), u(0) };

array s8 _patact_single_lengths( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 2, 0, 0, 4, 1, 2, 1, 1, 0 };

array s8 _patact_range_lengths( 0, 2 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0 };

array s8 _patact_index_offsets( 0, 76 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 40, 43, 47, 50, 55, 57, 59, 66, 69, 73, 76, 0 };

array s8 _patact_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _patact_trans_offsets( 0, 101 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0 };

array s8 _patact_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _patact_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _patact_cond_targs( 0, 28 ) = { 2, 17, 3, 17, 4, 17, 17, 17, 6, 17, 7, 17, 8, 17, 17, 17, 10, 24, 11, 24, 12, 24, 24, 24, 14, 24, 15, 24, 16, 24, 24, 24, 17, 17, 17, 19, 17, 18, 20, 0, 1, 18, 17, 1, 18, 18, 17, 5, 20, 17, 21, 21, 22, 23, 0, 22, 21, 23, 21, 24, 24, 24, 26, 25, 27, 0, 9, 25, 24, 9, 25, 25, 24, 13, 27, 24, 28, 0, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 21, 21, 24, 24, 24, 0 };

array s8 _patact_cond_actions( 0, 58 ) = { 0, 47, 0, 47, 0, 47, 35, 47, 0, 45, 0, 45, 0, 45, 31, 45, 0, 27, 0, 27, 0, 27, 17, 27, 0, 25, 0, 25, 0, 25, 13, 25, 33, 33, 39, 58, 37, 58, 5, 0, 0, 58, 47, 0, 55, 58, 43, 0, 5, 41, 7, 7, 0, 0, 0, 0, 11, 0, 9, 15, 15, 19, 52, 52, 5, 0, 0, 52, 27, 0, 49, 52, 23, 0, 5, 21, 29, 0, 47, 47, 47, 47, 45, 45, 45, 45, 27, 27, 27, 27, 25, 25, 25, 25, 47, 43, 41, 11, 9, 27, 23, 21, 0 };

array s8 _patact_to_state_actions( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0 };

array s8 _patact_from_state_actions( 0, 3 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0 };

array s8 _patact_eof_trans_indexed( 0, 43 ) = { 0, 18, 18, 18, 18, 20, 20, 20, 20, 36, 36, 36, 36, 38, 38, 38, 38, 0, 18, 25, 26, 0, 32, 33, 0, 36, 42, 43, 0, 0 };

array s8 _patact_eof_trans_direct( 0, 102 ) = { 0, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 0, 95, 96, 97, 0, 98, 99, 0, 100, 101, 102, 0, 0 };

array s8 _patact_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _patact_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _patact_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _patact_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int patact_start = 17;
value int patact_first_final = 17;
value int patact_error = 0;

value int patact_en_other = 21;
value int patact_en_exec_test = 24;
value int patact_en_semi = 28;
value int patact_en_main = 17;

host( "working/patact_go.rl", 70 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)patact_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/patact_go.rl", 73 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index byte _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_acts = offset( _patact_actions, _patact_from_state_actions[cs] );
				_nacts = cast(uint)deref( _patact_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _patact_actions, _acts ) ) {
						case 1 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _patact_trans_keys, _patact_key_offsets[cs] );
				_trans = cast(uint)_patact_index_offsets[cs];
				
				_klen = cast(int)_patact_single_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _patact_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _patact_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_patact_range_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _patact_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _patact_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _patact_cond_keys, _patact_trans_offsets[_trans] );
				_klen = cast(int)_patact_trans_lengths[_trans];
				_cond = cast(uint)_patact_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _patact_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _patact_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_patact_cond_targs[_cond];
				
				if ( _patact_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _patact_actions, _patact_cond_actions[_cond] );
				_nacts = cast(uint)deref( _patact_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _patact_actions, _acts ) )
					{
						case 2 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
						}
						case 3 {
							host( "working/patact_go.rl", 23 ) ${${te = p+1;host( "working/patact_go.rl", 23 ) ${fmt.Print( "space\n" );}$}$}$
						}
						case 4 {
							host( "working/patact_go.rl", 21 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 21 ) ${fmt.Print( "word\n" );}$}$}$
						}
						case 5 {
							host( "working/patact_go.rl", 22 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 22 ) ${fmt.Print( "num\n" );}$}$}$
						}
						case 6 {
							host( "working/patact_go.rl", 32 ) ${${act = 7;}$}$
						}
						case 7 {
							host( "working/patact_go.rl", 33 ) ${${act = 8;}$}$
						}
						case 8 {
							host( "working/patact_go.rl", 30 ) ${${te = p+1;host( "working/patact_go.rl", 30 ) ${fmt.Print( "word (c/lbh)\n" );}$}$}$
						}
						case 9 {
							host( "working/patact_go.rl", 31 ) ${${te = p+1;host( "working/patact_go.rl", 31 ) ${fmt.Print( "space\n" );}$}$}$
						}
						case 10 {
							host( "working/patact_go.rl", 36 ) ${${te = p+1;host( "working/patact_go.rl", 36 ) ${fmt.Print( "num (c/switch)\n" );}$}$}$
						}
						case 11 {
							host( "working/patact_go.rl", 37 ) ${${te = p+1;}$}$
						}
						case 12 {
							host( "working/patact_go.rl", 27 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 27 ) ${fmt.Print( "word (w/lbh)\n" );${p = (( te-1))-1;}$
										
										${cs = 21; goto _again;}$}$}$}$
						}
						case 13 {
							host( "working/patact_go.rl", 33 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 33 ) ${fmt.Print( "num (w/switch)\n" );${p = (( te-1))-1;}$
										
										${cs = 21; goto _again;}$}$}$}$
						}
						case 14 {
							host( "working/patact_go.rl", 27 ) ${${p = ((te))-1;
									host( "working/patact_go.rl", 27 ) ${fmt.Print( "word (w/lbh)\n" );${p = (( te-1))-1;}$
										
										${cs = 21; goto _again;}$}$}$}$
						}
						case 15 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 7 {
											p = ((te))-1;
											host( "working/patact_go.rl", 32 ) ${fmt.Print( "num (w/switch)\n" );}$ }
										case 8 {
											p = ((te))-1;
											host( "working/patact_go.rl", 33 ) ${fmt.Print( "num (w/switch)\n" );${p = (( te-1))-1;}$
												
												${cs = 21; goto _again;}$}$ }
									}}$
							}$
						}
						case 16 {
							host( "working/patact_go.rl", 41 ) ${${te = p+1;host( "working/patact_go.rl", 41 ) ${fmt.Print( "in semi\n" );${cs = 17; goto _again;}$}$}$}$
						}
						case 17 {
							host( "working/patact_go.rl", 51 ) ${${act = 15;}$}$
						}
						case 18 {
							host( "working/patact_go.rl", 52 ) ${${act = 16;}$}$
						}
						case 19 {
							host( "working/patact_go.rl", 49 ) ${${te = p+1;host( "working/patact_go.rl", 49 ) ${fmt.Print( "word (c/lbh)\n" );}$}$}$
						}
						case 20 {
							host( "working/patact_go.rl", 50 ) ${${te = p+1;host( "working/patact_go.rl", 50 ) ${fmt.Print( "space\n" );}$}$}$
						}
						case 21 {
							host( "working/patact_go.rl", 55 ) ${${te = p+1;host( "working/patact_go.rl", 55 ) ${fmt.Print( "num (c/switch)\n" );}$}$}$
						}
						case 22 {
							host( "working/patact_go.rl", 56 ) ${${te = p+1;host( "working/patact_go.rl", 56 ) ${fmt.Print( "going to semi\n" );${p = p - 1; }$ 
										${cs = 28; goto _again;}$}$}$}$
						}
						case 23 {
							host( "working/patact_go.rl", 59 ) ${${te = p+1;host( "working/patact_go.rl", 59 ) ${fmt.Print( "immdiate\n" );${cs = 24; goto _again;}$}$}$}$
						}
						case 24 {
							host( "working/patact_go.rl", 46 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 46 ) ${fmt.Print( "word (w/lbh)\n" );${p = p - 1; }$ 
										${cs = 21; goto _again;}$}$}$}$
						}
						case 25 {
							host( "working/patact_go.rl", 52 ) ${${te = p;p = p - 1;host( "working/patact_go.rl", 52 ) ${fmt.Print( "num (w/switch)\n" );${p = p - 1; }$ 
										${cs = 21; goto _again;}$}$}$}$
						}
						case 26 {
							host( "working/patact_go.rl", 46 ) ${${p = ((te))-1;
									host( "working/patact_go.rl", 46 ) ${fmt.Print( "word (w/lbh)\n" );${p = p - 1; }$ 
										${cs = 21; goto _again;}$}$}$}$
						}
						case 27 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 15 {
											p = ((te))-1;
											host( "working/patact_go.rl", 51 ) ${fmt.Print( "num (w/switch)\n" );}$ }
										case 16 {
											p = ((te))-1;
											host( "working/patact_go.rl", 52 ) ${fmt.Print( "num (w/switch)\n" );${p = p - 1; }$ 
												${cs = 21; goto _again;}$}$ }
									}}$
							}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				_acts = offset( _patact_actions, _patact_to_state_actions[cs] );
				_nacts = cast(uint)deref( _patact_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _patact_actions, _acts ) ) {
						case 0 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					if ( _patact_eof_trans_direct[cs] > 0 ) {
						_trans = cast(uint)_patact_eof_trans_direct[cs] - 1;
						_cond = cast(uint)_patact_trans_offsets[_trans];
						goto _match_cond;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/patact_go.rl", 80 ) @{
	}
	func finish() {
		if cs >= patact_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"abcd foix\n",
		"abcd\nanother\n",
		"123 foix\n",
		"!abcd foix\n",
		"!abcd\nanother\n",
		"!123 foix\n",
		";",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@