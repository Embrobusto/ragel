package main
import "fmt"






var cs int;
var blen int;
var buffer [1024] byte;

var indep_start  int  = 1
var indep_first_final  int  = 13
var indep_error  int  = 0
var indep_en_main  int  = 1
var _indep_nfa_targs [] int8  = [] int8  { 0, 0  }
var _indep_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _indep_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _indep_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
func prepare() {

	{
		cs = int(indep_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		if p == pe  {
			goto _test_eof;
			
		}
		switch cs  {
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 13:
			goto st_case_13;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			case 12:
			goto st_case_12;
			
		}
		goto st_out;
		st_case_1:
		switch {
			case ( data[p ]) > 51 :
			{
				if ( data[p ]) <= 54  {
					{
						goto st8;
					}
					
				}
			} 
			case ( data[p ]) >= 49 :
			{
				goto st2;
			}
			
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		st2:
		p+= 1;
		if p == pe  {
			goto _test_eof2;
			
		}
		st_case_2:
		if ( data[p ]) == 104  {
			{
				goto st3;
			}
			
		}
		{
			goto st0;
		}
		st3:
		p+= 1;
		if p == pe  {
			goto _test_eof3;
			
		}
		st_case_3:
		if ( data[p ]) == 101  {
			{
				goto st4;
			}
			
		}
		{
			goto st0;
		}
		st4:
		p+= 1;
		if p == pe  {
			goto _test_eof4;
			
		}
		st_case_4:
		if ( data[p ]) == 108  {
			{
				goto st5;
			}
			
		}
		{
			goto st0;
		}
		st5:
		p+= 1;
		if p == pe  {
			goto _test_eof5;
			
		}
		st_case_5:
		if ( data[p ]) == 108  {
			{
				goto st6;
			}
			
		}
		{
			goto st0;
		}
		st6:
		p+= 1;
		if p == pe  {
			goto _test_eof6;
			
		}
		st_case_6:
		if ( data[p ]) == 111  {
			{
				goto st7;
			}
			
		}
		{
			goto st0;
		}
		st7:
		p+= 1;
		if p == pe  {
			goto _test_eof7;
			
		}
		st_case_7:
		if ( data[p ]) == 10  {
			{
				goto st13;
			}
			
		}
		{
			goto st0;
		}
		st13:
		p+= 1;
		if p == pe  {
			goto _test_eof13;
			
		}
		st_case_13:
		{
			goto st0;
		}
		st8:
		p+= 1;
		if p == pe  {
			goto _test_eof8;
			
		}
		st_case_8:
		switch ( data[p ])  {
			case 72:
			{
				goto st9;
			}
			case 104:
			{
				goto st9;
			}
			
		}
		{
			goto st0;
		}
		st9:
		p+= 1;
		if p == pe  {
			goto _test_eof9;
			
		}
		st_case_9:
		switch ( data[p ])  {
			case 69:
			{
				goto st10;
			}
			case 101:
			{
				goto st10;
			}
			
		}
		{
			goto st0;
		}
		st10:
		p+= 1;
		if p == pe  {
			goto _test_eof10;
			
		}
		st_case_10:
		switch ( data[p ])  {
			case 76:
			{
				goto st11;
			}
			case 108:
			{
				goto st11;
			}
			
		}
		{
			goto st0;
		}
		st11:
		p+= 1;
		if p == pe  {
			goto _test_eof11;
			
		}
		st_case_11:
		switch ( data[p ])  {
			case 76:
			{
				goto st12;
			}
			case 108:
			{
				goto st12;
			}
			
		}
		{
			goto st0;
		}
		st12:
		p+= 1;
		if p == pe  {
			goto _test_eof12;
			
		}
		st_case_12:
		switch ( data[p ])  {
			case 79:
			{
				goto st7;
			}
			case 111:
			{
				goto st7;
			}
			
		}
		{
			goto st0;
		}
		st_out:
		_test_eof2: cs = 2;
		goto _test_eof; 
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof4: cs = 4;
		goto _test_eof; 
		_test_eof5: cs = 5;
		goto _test_eof; 
		_test_eof6: cs = 6;
		goto _test_eof; 
		_test_eof7: cs = 7;
		goto _test_eof; 
		_test_eof13: cs = 13;
		goto _test_eof; 
		_test_eof8: cs = 8;
		goto _test_eof; 
		_test_eof9: cs = 9;
		goto _test_eof; 
		_test_eof10: cs = 10;
		goto _test_eof; 
		_test_eof11: cs = 11;
		goto _test_eof; 
		_test_eof12: cs = 12;
		goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
}
func finish() {
	if cs >= indep_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1hello\n",
	"1HELLO\n",
	"1HeLLo\n",
	"2hello\n",
	"2HELLO\n",
	"2HeLLo\n",
	"3hello\n",
	"3HELLO\n",
	"3HeLLo\n",
	"4hello\n",
	"4HELLO\n",
	"4HeLLo\n",
	"5hello\n",
	"5HELLO\n",
	"5HeLLo\n",
	"6hello\n",
	"6HELLO\n",
	"6HeLLo\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
