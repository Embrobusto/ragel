host( "working/cond7_julia.rl", 1 ) @{//
	// @@LANG: julia
	// @@GENERATED: true
	//
	
	
	
	
	
	
}@
array s8 _foo_key_offsets( 0, 7 ) = { 0, 0, 2, 4, 7, 0 };

array u8 _foo_trans_keys( 0, 57 ) = { 48, 57, 48, 57, 10, 48, 57, 0 };

array s8 _foo_single_lengths( 0, 1 ) = { 0, 0, 0, 1, 0, 0 };

array s8 _foo_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0, 0 };

array s8 _foo_index_offsets( 0, 7 ) = { 0, 0, 2, 4, 7, 0 };

array s8 _foo_trans_cond_spaces( -1, 0 ) = { -1, -1, 0, -1, 0, 0, -1, -1, 0 };

array s8 _foo_trans_offsets( 0, 8 ) = { 0, 1, 2, 4, 5, 6, 7, 8, 0 };

array s8 _foo_trans_lengths( 0, 2 ) = { 1, 1, 2, 1, 1, 1, 1, 1, 0 };

array s8 _foo_cond_keys( 0, 1 ) = { 0, 0, 0, 1, 0, 0, 1, 0, 0, 0 };

array s8 _foo_cond_targs( 0, 4 ) = { 2, 0, 3, 2, 0, 4, 3, 0, 0, 0 };

array s8 _foo_cond_actions( 0, 2 ) = { 1, 0, 1, 2, 0, 0, 2, 0, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 4;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/cond7_julia.rl", 36 ) @{
	
	function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	i = 0;
	c = 0;
	
}@
{
	cs = cast(int)foo_start;
}
host( "working/cond7_julia.rl", 47 ) @{
}@
{
	int _klen;
	index u8 _keys;
	index s8 _ckeys;
	int _cpc;
	uint _trans;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _foo_trans_keys, _foo_key_offsets[cs] );
				_trans = cast(uint)_foo_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_foo_single_lengths[cs];
				if ( _klen > 0 ) {
					index u8 _lower;
					index u8 _mid;
					index u8 _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_foo_range_lengths[cs];
					if ( _klen > 0 ) {
						index u8 _lower;
						index u8 _mid;
						index u8 _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _foo_cond_keys, _foo_trans_offsets[_trans] );
				_klen = cast(int)_foo_trans_lengths[_trans];
				_cond = cast(uint)_foo_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/cond7_julia.rl", 10 ) ={i > 0}= ) _cpc += 1;
					}
				}
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _foo_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _foo_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_foo_cond_targs[_cond];
				
				switch ( _foo_cond_actions[_cond] ) {
					case 2 {
						host( "working/cond7_julia.rl", 11 ) ${i = i - 1;
							c = convert( Int, ( ={( deref( data, p ))}= ) ) 
							;
							print( "item: " );
							print( c );
							print( "\n" );
						}$
					}
					case 1 {
						host( "working/cond7_julia.rl", 19 ) ${i = convert( Int, ( ={( deref( data, p ))}= - 48 ) ) 
							;
							print( "count: " );
							print( i );
							print( "\n" );
						}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/cond7_julia.rl", 48 ) @{
	
	if ( cs >= foo_first_final )
	println( "ACCEPT" );
	else
	println( "FAIL" );
	end
	end
	
	m( "00\n" );
	m( "019\n" );
	m( "190\n" );
	m( "1719\n" );
	m( "1040000\n" );
	m( "104000a\n" );
	m( "104000\n" );
}@