class cppscan6_java
{
	int
	ts ;
	int
	te ;
	int act ;
	int token ;
	
	
	
	
	
	private static byte  _scanner_actions [] = { 0, 1, 2, 1, 3, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 2, 0, 1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 0 ,  };
	private static short  _scanner_key_offsets [] = { 0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0 ,  };
	private static char  _scanner_trans_keys [] = { 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0,  };
	private static byte  _scanner_single_lengths [] = { 0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0 ,  };
	private static byte  _scanner_range_lengths [] = { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0 ,  };
	private static short  _scanner_index_offsets [] = { 0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0 ,  };
	private static byte  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static short  _scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0 ,  };
	private static byte  _scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_cond_targs [] = { 12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 ,  };
	private static byte  _scanner_cond_actions [] = { 79, 7, 0, 0, 0, 79, 5, 0, 0, 0, 51, 77, 0, 0, 0, 79, 0, 79, 0, 0, 0, 55, 0, 57, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 90, 0, 0, 84, 0, 0, 0, 53, 90, 53, 0, 53, 0, 53, 0, 73, 0, 21, 71, 31, 71, 23, 37, 71, 27, 71, 43, 33, 71, 45, 35, 0, 71, 47, 69, 49, 0, 87, 71, 0, 9, 9, 0, 9, 9, 87, 61, 9, 9, 9, 9, 0, 61, 0, 0, 29, 71, 87, 0, 11, 11, 0, 11, 11, 0, 93, 63, 87, 0, 13, 13, 0, 13, 13, 93, 65, 15, 15, 15, 15, 0, 0, 0, 67, 87, 0, 11, 11, 0, 11, 11, 90, 63, 17, 71, 19, 71, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 59, 39, 71, 41, 25, 71, 79, 79, 79, 79, 77, 79, 79, 77, 77, 77, 75, 73, 71, 71, 71, 71, 71, 71, 69, 71, 61, 61, 71, 63, 65, 67, 63, 71, 71, 59, 59, 71, 71, 0 ,  };
	private static byte  _scanner_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_eof_trans_indexed [] = { 0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0 ,  };
	private static short  _scanner_eof_trans_direct [] = { 0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0 ,  };
	private static byte  _scanner_nfa_targs [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  scanner_start  = 12;
	private static int  scanner_first_final  = 12;
	private static int  scanner_error  = 0;
	private static int  scanner_en_main  = 12;
	int cs;
	
	void init()
	{
		{
			cs = (int)scanner_start;
			ts = 0;
			te = 0;
			act = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _trans = 0;
			int _cond = 0;
			int _acts;
			int _nacts;
			int _keys;
			int _ckeys;
			int _cpc;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_acts = _scanner_from_state_actions[cs] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 2 :
							{
								{
									ts = p;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					_keys = _scanner_key_offsets[cs] ;
					_trans = (int )_scanner_index_offsets[cs];
					_klen = (int)_scanner_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_scanner_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _scanner_trans_offsets[_trans] ;
					_klen = (int)_scanner_trans_lengths[_trans];
					_cond = (int )_scanner_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_scanner_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_scanner_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_scanner_cond_targs[_cond];
					if ( _scanner_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					_acts = _scanner_cond_actions[_cond] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 3 :
							{
								{
									te = p+1;
									
								}
								
							}
							
							break;
							case 4 :
							{
								{
									act = 3;
									
								}
								
							}
							
							break;
							case 5 :
							{
								{
									act = 4;
									
								}
								
							}
							
							break;
							case 6 :
							{
								{
									act = 5;
									
								}
								
							}
							
							break;
							case 7 :
							{
								{
									act = 6;
									
								}
								
							}
							
							break;
							case 8 :
							{
								{
									te = p+1;
									{
										token = 193;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 9 :
							{
								{
									te = p+1;
									{
										token = 192;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 10 :
							{
								{
									te = p+1;
									{
										token = 194;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 11 :
							{
								{
									te = p+1;
									{
										token = 218;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 12 :
							{
								{
									te = p+1;
									{
										token = 219;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 13 :
							{
								{
									te = p+1;
									{
										token = 220;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 14 :
							{
								{
									te = p+1;
									{
										token = 197;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 15 :
							{
								{
									te = p+1;
									{
										token = 223;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 16 :
							{
								{
									te = p+1;
									{
										token = 224;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 17 :
							{
								{
									te = p+1;
									{
										token = 225;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 18 :
							{
								{
									te = p+1;
									{
										token = 226;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 19 :
							{
								{
									te = p+1;
									{
										token = 227;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 20 :
							{
								{
									te = p+1;
									{
										token = 228;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 21 :
							{
								{
									te = p+1;
									{
										token = 229;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 22 :
							{
								{
									te = p+1;
									{
										token = 230;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 23 :
							{
								{
									te = p+1;
									{
										token = 231;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 24 :
							{
								{
									te = p+1;
									{
										token = 232;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 25 :
							{
								{
									te = p+1;
									{
										token = 233;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 26 :
							{
								{
									te = p+1;
									{
										token = 234;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 27 :
							{
								{
									te = p+1;
									{
										token = 212;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 28 :
							{
								{
									te = p+1;
									{
										token = 213;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 29 :
							{
								{
									te = p+1;
									{
										token = 214;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 30 :
							{
								{
									te = p+1;
									{
										token = 215;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 31 :
							{
								{
									te = p+1;
									{
										token = 240;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 32 :
							{
								{
									te = p+1;
									{
										token = ( int ) ( data[ts] )
										;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 33 :
							{
								{
									te = p+1;
									{
										token = 242;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 34 :
							{
								{
									te = p+1;
									{
										token = 242;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 35 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 195;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 36 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 194;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 37 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 218;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 38 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 219;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 39 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 220;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 40 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 211;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 41 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = ( int ) ( data[ts] )
										;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 42 :
							{
								{
									te = p;
									p = p - 1;
									{
										token = 241;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 43 :
							{
								{
									p = ((te))-1;
									{
										token = 218;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 44 :
							{
								{
									p = ((te))-1;
									{
										token = ( int ) ( data[ts] )
										;
										System.out.print( "<" );
										System.out.print( token );
										System.out.print( "> " );
										_s = new String( data, ts, te - ts );
										System.out.print( _s );
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 45 :
							{
								{
									switch ( act  ) {
										case 0 :
										{
											{
												cs = 0;
												{
													_goto_targ = 4;
													if (true)
													continue _goto;
												}
												
											}
											
										}
										
										break;
										case 3 :
										p = ((te))-1;
										{
											token = 195;
											System.out.print( "<" );
											System.out.print( token );
											System.out.print( "> " );
											_s = new String( data, ts, te - ts );
											System.out.print( _s );
											System.out.print( "\n" );
											
										}
										
										break;
										case 4 :
										p = ((te))-1;
										{
											token = 194;
											System.out.print( "<" );
											System.out.print( token );
											System.out.print( "> " );
											_s = new String( data, ts, te - ts );
											System.out.print( _s );
											System.out.print( "\n" );
											
										}
										
										break;
										case 5 :
										p = ((te))-1;
										{
											token = 218;
											System.out.print( "<" );
											System.out.print( token );
											System.out.print( "> " );
											_s = new String( data, ts, te - ts );
											System.out.print( _s );
											System.out.print( "\n" );
											
										}
										
										break;
										case 6 :
										p = ((te))-1;
										{
											token = 219;
											System.out.print( "<" );
											System.out.print( token );
											System.out.print( "> " );
											_s = new String( data, ts, te - ts );
											System.out.print( _s );
											System.out.print( "\n" );
											
										}
										
										break;
										
									}
									
								}
								
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					
					case 4:
					_acts = _scanner_to_state_actions[cs] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 0 :
							{
								{
									ts = 0;
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									act = 0;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					if ( p == eof  )
					{
						if ( _scanner_eof_trans_direct[cs] > 0  )
						{
							_trans = (int )_scanner_eof_trans_direct[cs] - 1;
							_cond = (int )_scanner_trans_offsets[_trans];
							{
								_goto_targ = 3;
								if (true)
								continue _goto;
							}
							
						}
						
						
					}
					
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22",
		"'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/",
		"'\n'\n",
	};
	
	static final int inplen = 3;
	
	public static void main (String[] args)
	{
		cppscan6_java machine = new cppscan6_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
