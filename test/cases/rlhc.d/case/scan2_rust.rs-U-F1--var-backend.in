host( "working/scan2_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	static mut ts : i32
	= 0;
	static mut te : i32
	= 0;
	static mut act : i32 = 0;
	static mut token : i32 = 0;
	
	
	
	
	
}@
array u8 _scanner_trans_keys( 0, 2 ) = { 0, 2, 0, 1, 0, 2, 0 };

array s8 _scanner_char_class( 0, 2 ) = { 0, 1, 2, 0 };

array s8 _scanner_index_offsets( 0, 5 ) = { 0, 3, 5, 0 };

array s8 _scanner_indicies( 0, 5 ) = { 1, 1, 2, 4, 5, 1, 1, 2, 0 };

array s8 _scanner_index_defaults( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 2 ) = { 1, 0, 1, 1, 2, 2, 0 };

array s8 _scanner_cond_actions( 0, 7 ) = { 1, 0, 2, 5, 6, 7, 0 };

array s8 _scanner_to_state_actions( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_from_state_actions( 0, 4 ) = { 0, 4, 0, 0 };

array s8 _scanner_eof_trans( 0, 1 ) = { 1, 0, 1, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 1;
value int scanner_first_final = 1;
value int scanner_error = -1;

value int scanner_en_main = 1;

host( "working/scan2_rust.rl", 33 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/scan2_rust.rl", 44 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index u8 _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _scanner_eof_trans[cs] > 0 ) {
						_trans = cast(uint)_scanner_eof_trans[cs] - 1;
						_have = 1;
					}
					if ( _have == 0 ) {
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					switch ( _scanner_from_state_actions[cs] ) {
						case 4 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					
					_keys = offset( _scanner_trans_keys, (cs<<1) );
					_inds = offset( _scanner_indicies, _scanner_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 99 && ( deref( data, p )) >= 97 )
					{
						int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
						if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
						_trans = cast(uint)deref( _scanner_indicies, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_scanner_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_scanner_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_scanner_cond_targs[_trans];
					
					switch ( _scanner_cond_actions[_trans] ) {
						case 2 {
							host( "working/scan2_rust.rl", 22 ) ${${te = p+1;host( "working/scan2_rust.rl", 22 ) ${print!( "{}", "pat2\n" );
									}$}$}$
						}
						case 5 {
							host( "working/scan2_rust.rl", 25 ) ${${te = p+1;host( "working/scan2_rust.rl", 25 ) ${print!( "{}", "any\n" );
									}$}$}$
						}
						case 1 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 1 {
											p = ((te))-1;
											host( "working/scan2_rust.rl", 19 ) ${print!( "{}", "pat1\n" );
											}$ }
										case 3 {
											p = ((te))-1;
											host( "working/scan2_rust.rl", 25 ) ${print!( "{}", "any\n" );
											}$ }
									}}$
							}$
						}
						case 6 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/scan2_rust.rl", 19 ) ${${act = 1;}$}$
						}
						case 7 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/scan2_rust.rl", 25 ) ${${act = 3;}$}$
						}
					}
					
					switch ( _scanner_to_state_actions[cs] ) {
						case 3 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/scan2_rust.rl", 45 ) @{
		
		if ( cs >= scanner_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "a".to_string() ); }
	}
	
}@