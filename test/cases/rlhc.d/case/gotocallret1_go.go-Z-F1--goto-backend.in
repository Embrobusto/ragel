host( "working/gotocallret1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var comm  byte ;
	var top  int ;
	var stack [32] int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _GotoCallRet_trans_keys( 0, 5 ) = { u(1), u(0), u(2), u(2), u(0), u(0), u(0), u(0), u(0), u(0), u(4), u(5), u(3), u(3), u(3), u(5), u(1), u(0), u(4), u(5), u(3), u(3), u(0) };

array s8 _GotoCallRet_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 };

array s8 _GotoCallRet_index_offsets( 0, 12 ) = { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 };

array s8 _GotoCallRet_indicies( 0, 10 ) = { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 };

array s8 _GotoCallRet_index_defaults( 0, 11 ) = { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 };

array s8 _GotoCallRet_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _GotoCallRet_cond_targs( 0, 10 ) = { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 };

array s8 _GotoCallRet_cond_actions( 0, 9 ) = { 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0 };

array s8 _GotoCallRet_eof_actions( 0, 8 ) = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 };

array s8 _GotoCallRet_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _GotoCallRet_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int GotoCallRet_start = 7;
value int GotoCallRet_first_final = 7;
value int GotoCallRet_error = 0;

value int GotoCallRet_en_garble_line = 3;
value int GotoCallRet_en_alp_comm = 5;
value int GotoCallRet_en_dig_comm = 6;
value int GotoCallRet_en_main = 7;

host( "working/gotocallret1_go.rl", 72 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)GotoCallRet_start;
		top = 0;
	}
	host( "working/gotocallret1_go.rl", 75 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		int _trans = 0;
		index byte _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _GotoCallRet_trans_keys, (cs<<1) );
				_inds = offset( _GotoCallRet_indicies, _GotoCallRet_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_GotoCallRet_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _GotoCallRet_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _GotoCallRet_trans_keys, _keys ) )
					_trans = cast(int)deref( _GotoCallRet_indicies, _inds + cast(int)( _ic - cast(int)deref( _GotoCallRet_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_GotoCallRet_index_defaults[cs];
				}
				else {
					_trans = cast(int)_GotoCallRet_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_GotoCallRet_cond_targs[_trans];
				
				if ( _GotoCallRet_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _GotoCallRet_cond_actions[_trans] ) {
					case 5 {
						host( "working/gotocallret1_go.rl", 20 ) ${fmt.Print( "error: garbling line\n" );}$
					}
					case 7 {
						host( "working/gotocallret1_go.rl", 21 ) ${${cs = 7; goto _again;}$}$
					}
					case 8 {
						host( "working/gotocallret1_go.rl", 32 ) ${${p = p - 1; }$ 
							${top -= 1;cs = stack[top];goto _again;}$
						}$
					}
					case 2 {
						host( "working/gotocallret1_go.rl", 42 ) ${if ( comm >= 'a' ) {
								${stack[top] = cs; top += 1;cs = 5; goto _again;}$} else {
								${stack[top] = cs; top += 1;cs = 6; goto _again;}$}
						}$
					}
					case 9 {
						host( "working/gotocallret1_go.rl", 55 ) ${comm = ={( deref( data, p ))}=;
						}$
					}
					case 3 {
						host( "working/gotocallret1_go.rl", 57 ) ${fmt.Print( "correct command\n" );}$
					}
					case 1 {
						host( "working/gotocallret1_go.rl", 61 ) ${${p = p - 1; }$
							${cs = 3; goto _again;}$}$
					}
					case 6 {
						host( "working/gotocallret1_go.rl", 20 ) ${fmt.Print( "error: garbling line\n" );}$	host( "working/gotocallret1_go.rl", 21 ) ${${cs = 7; goto _again;}$}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					switch ( _GotoCallRet_eof_actions[cs] ) {
						case 4 {
							host( "working/gotocallret1_go.rl", 23 ) ${fmt.Print( "error: failed to recover\n" );}$
						}
						case 8 {
							host( "working/gotocallret1_go.rl", 32 ) ${${p = p - 1; }$ 
								${top -= 1;cs = stack[top];goto _again;}$
							}$
						}
						case 1 {
							host( "working/gotocallret1_go.rl", 61 ) ${${p = p - 1; }$
								${cs = 3; goto _again;}$}$
						}
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/gotocallret1_go.rl", 82 ) @{
	}
	func finish() {
		if cs >= GotoCallRet_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"lkajsdf\n",
		"2134\n",
		"(\n",
		"\n",
		"*234234()0909 092 -234aslkf09`1 11\n",
		"1\n",
		"909\n",
		"1 a\n",
		"11 1\n",
		"a 1\n",
		"aa a\n",
		"1 1\n",
		"1 123456\n",
		"a a\n",
		"a abcdef\n",
		"h",
		"a aa1",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@