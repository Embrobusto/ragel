#include <string.h>
#include <stdio.h>

char comm ;
int top ;
int stack [32];





static const char  _GotoCallRet_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 2, 0, 1, 0 ,  };
static const char  _GotoCallRet_key_offsets [] = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 ,  };
static const char  _GotoCallRet_trans_keys [] = { 32, 10, 10, 10, 65, 90, 97, 122, 48, 57, 48, 57, 97, 122, 65, 90, 97, 122, 48, 57, 0 ,  };
static const char  _GotoCallRet_single_lengths [] = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _GotoCallRet_range_lengths [] = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 ,  };
static const char  _GotoCallRet_index_offsets [] = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 ,  };
static const char  _GotoCallRet_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _GotoCallRet_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 ,  };
static const char  _GotoCallRet_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _GotoCallRet_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _GotoCallRet_cond_targs [] = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 ,  };
static const char  _GotoCallRet_cond_actions [] = { 9, 15, 13, 15, 17, 1, 3, 0, 0, 0, 7, 0, 7, 11, 11, 15, 0, 0, 0, 7, 0, 7, 0 ,  };
static const char  _GotoCallRet_eof_actions [] = { 0, 15, 15, 5, 5, 7, 7, 0, 5, 0, 0, 0 ,  };
static const char  _GotoCallRet_nfa_targs [] = { 0, 0 ,  };
static const char  _GotoCallRet_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _GotoCallRet_nfa_push_actions [] = { 0, 0 ,  };
static const char  _GotoCallRet_nfa_pop_trans [] = { 0, 0 ,  };
static const int  GotoCallRet_start  = 7;
static const int  GotoCallRet_first_final  = 7;
static const int  GotoCallRet_error  = 0;
static const int  GotoCallRet_en_garble_line  = 3;
static const int  GotoCallRet_en_alp_comm  = 5;
static const int  GotoCallRet_en_dig_comm  = 6;
static const int  GotoCallRet_en_main  = 7;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) GotoCallRet_start;
		top = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _GotoCallRet_trans_keys + _GotoCallRet_key_offsets[cs];
		_trans = ( unsigned int  ) _GotoCallRet_index_offsets[cs];
		_klen = ( int ) _GotoCallRet_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _GotoCallRet_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _GotoCallRet_cond_keys + _GotoCallRet_trans_offsets[_trans];
		_klen = ( int ) _GotoCallRet_trans_lengths[_trans];
		_cond = ( unsigned int  ) _GotoCallRet_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _GotoCallRet_cond_targs[_cond];
		if ( _GotoCallRet_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _GotoCallRet_actions + _GotoCallRet_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf( "%s", "error: garbling line\n" );
					
				}
				
				break;
				case 1 :
				{
					{
						cs = 7;
						goto _again;
					}
					
				}
				
				break;
				case 3 :
				{
					{
						p = p - 1;
						
					}
					{
						top-= 1;
						cs = stack[top];
						goto _again;
					}
					
				}
				
				break;
				case 4 :
				{
					if ( comm >= 'a' )
					{
						{
							stack[top] = cs;
							top += 1;
							cs = 5;
							goto _again;
						}
					} 
					else {
						{
							stack[top] = cs;
							top += 1;
							cs = 6;
							goto _again;
						}
					}
					
				}
				
				break;
				case 5 :
				{
					comm = (((*( p  ))
					));
					
				}
				
				break;
				case 6 :
				{
					printf( "%s", "correct command\n" );
					
				}
				
				break;
				case 7 :
				{
					{
						p = p - 1;
						
					}
					{
						cs = 3;
						goto _again;
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _GotoCallRet_actions + _GotoCallRet_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 2 :
					{
						printf( "%s", "error: failed to recover\n" );
						
					}
					
					break;
					case 3 :
					{
						{
							p = p - 1;
							
						}
						{
							top-= 1;
							cs = stack[top];
							goto _again;
						}
						
					}
					
					break;
					case 7 :
					{
						{
							p = p - 1;
							
						}
						{
							cs = 3;
							goto _again;
						}
						
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= GotoCallRet_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

int inplen = 17;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

