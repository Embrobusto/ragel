#include <string.h>
#include <stdio.h>

char comm ;
int top ;
int stack [32];
char * ts ;
char * te ;
int act ;
int value ;





static const char  _patact_key_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 28, 32, 35, 41, 43, 45, 53, 56, 60, 63, 0 ,  };
static const char  _patact_trans_keys [] = { 102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 10, 32, 33, 50, 59, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 10, 32, 48, 57, 97, 122, 48, 57, 97, 122, 10, 32, 33, 50, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 59, 0 ,  };
static const char  _patact_single_lengths [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 2, 0, 0, 4, 1, 2, 1, 1, 0 ,  };
static const char  _patact_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0 ,  };
static const char  _patact_index_offsets [] = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 40, 43, 47, 50, 55, 57, 59, 66, 69, 73, 76, 0 ,  };
static const char  _patact_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _patact_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0 ,  };
static const char  _patact_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _patact_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _patact_cond_targs [] = { 2, 17, 3, 17, 4, 17, 17, 17, 6, 17, 7, 17, 8, 17, 17, 17, 10, 24, 11, 24, 12, 24, 24, 24, 14, 24, 15, 24, 16, 24, 24, 24, 17, 17, 17, 19, 17, 18, 20, 0, 1, 18, 17, 1, 18, 18, 17, 5, 20, 17, 21, 21, 22, 23, 0, 22, 21, 23, 21, 24, 24, 24, 26, 25, 27, 0, 9, 25, 24, 9, 25, 25, 24, 13, 27, 24, 28, 0, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 21, 21, 24, 24, 24, 0 ,  };
static const char  _patact_cond_actions [] = { 0, 1, 0, 1, 0, 1, 2, 1, 0, 3, 0, 3, 0, 3, 4, 3, 0, 5, 0, 5, 0, 5, 6, 5, 0, 7, 0, 7, 0, 7, 8, 7, 11, 11, 12, 13, 14, 13, 15, 0, 0, 13, 1, 0, 17, 13, 16, 0, 15, 18, 19, 19, 0, 0, 0, 0, 20, 0, 21, 22, 22, 23, 24, 24, 15, 0, 0, 24, 5, 0, 26, 24, 25, 0, 15, 27, 28, 0, 1, 1, 1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 1, 16, 18, 20, 21, 5, 25, 27, 0 ,  };
static const char  _patact_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 9, 0 ,  };
static const char  _patact_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 10, 0 ,  };
static const char  _patact_eof_trans_indexed [] = { 0, 18, 18, 18, 18, 20, 20, 20, 20, 36, 36, 36, 36, 38, 38, 38, 38, 0, 18, 25, 26, 0, 32, 33, 0, 36, 42, 43, 0, 0 ,  };
static const char  _patact_eof_trans_direct [] = { 0, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 0, 95, 96, 97, 0, 98, 99, 0, 100, 101, 102, 0, 0 ,  };
static const char  _patact_nfa_targs [] = { 0, 0 ,  };
static const char  _patact_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _patact_nfa_push_actions [] = { 0, 0 ,  };
static const char  _patact_nfa_pop_trans [] = { 0, 0 ,  };
static const int  patact_start  = 17;
static const int  patact_first_final  = 17;
static const int  patact_error  = 0;
static const int  patact_en_other  = 21;
static const int  patact_en_exec_test  = 24;
static const int  patact_en_semi  = 28;
static const int  patact_en_main  = 17;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) patact_start;
		ts = 0;
		te = 0;
		act = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _patact_eof_trans_direct[cs]> 0  )
					{
						_trans = ( unsigned int  ) _patact_eof_trans_direct[cs]- 1;
						_cond = ( unsigned int  ) _patact_trans_offsets[_trans];
						_have = 1;
					}
					
					if ( _have == 0  )
					{
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					switch ( _patact_from_state_actions[cs] ) {
						case 10 :
						{
							{
								ts = p;
								
							}
							
						}
						
						break;
						
					}
					_keys = _patact_trans_keys + _patact_key_offsets[cs];
					_trans = ( unsigned int  ) _patact_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _patact_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _patact_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _patact_cond_keys + _patact_trans_offsets[_trans];
					_klen = ( int ) _patact_trans_lengths[_trans];
					_cond = ( unsigned int  ) _patact_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _patact_cond_targs[_cond];
					switch ( _patact_cond_actions[_cond] ) {
						case 15 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 19 :
						{
							{
								te = p+1;
								{
									printf( "%s", "space\n" );
									
								}
								
							}
							
						}
						
						break;
						case 21 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "word\n" );
									
								}
								
							}
							
						}
						
						break;
						case 20 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "num\n" );
									
								}
								
							}
							
						}
						
						break;
						case 8 :
						{
							{
								te = p+1;
								{
									printf( "%s", "word (c/lbh)\n" );
									
								}
								
							}
							
						}
						
						break;
						case 22 :
						{
							{
								te = p+1;
								{
									printf( "%s", "space\n" );
									
								}
								
							}
							
						}
						
						break;
						case 6 :
						{
							{
								te = p+1;
								{
									printf( "%s", "num (c/switch)\n" );
									
								}
								
							}
							
						}
						
						break;
						case 23 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 27 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "word (w/lbh)\n" );
									{
										p = ((te-1))-1;
										
									}
									
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 25 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "num (w/switch)\n" );
									{
										p = ((te-1))-1;
										
									}
									
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 7 :
						{
							{
								p = ((te))-1;
								{
									printf( "%s", "word (w/lbh)\n" );
									{
										p = ((te-1))-1;
										
									}
									
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 5 :
						{
							{
								switch ( act  ) {
									case 7 :
									p = ((te))-1;
									{
										printf( "%s", "num (w/switch)\n" );
										
									}
									
									break;
									case 8 :
									p = ((te))-1;
									{
										printf( "%s", "num (w/switch)\n" );
										{
											p = ((te-1))-1;
											
										}
										
										{
											cs = 21;
											
										}
										
									}
									
									break;
									
								}
								
							}
							
							
						}
						
						break;
						case 28 :
						{
							{
								te = p+1;
								{
									printf( "%s", "in semi\n" );
									{
										cs = 17;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 4 :
						{
							{
								te = p+1;
								{
									printf( "%s", "word (c/lbh)\n" );
									
								}
								
							}
							
						}
						
						break;
						case 11 :
						{
							{
								te = p+1;
								{
									printf( "%s", "space\n" );
									
								}
								
							}
							
						}
						
						break;
						case 2 :
						{
							{
								te = p+1;
								{
									printf( "%s", "num (c/switch)\n" );
									
								}
								
							}
							
						}
						
						break;
						case 14 :
						{
							{
								te = p+1;
								{
									printf( "%s", "going to semi\n" );
									{
										p = p - 1;
										
									}
									{
										cs = 28;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 12 :
						{
							{
								te = p+1;
								{
									printf( "%s", "immdiate\n" );
									{
										cs = 24;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 18 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "word (w/lbh)\n" );
									{
										p = p - 1;
										
									}
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 16 :
						{
							{
								te = p;
								p = p - 1;
								{
									printf( "%s", "num (w/switch)\n" );
									{
										p = p - 1;
										
									}
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 3 :
						{
							{
								p = ((te))-1;
								{
									printf( "%s", "word (w/lbh)\n" );
									{
										p = p - 1;
										
									}
									{
										cs = 21;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 1 :
						{
							{
								switch ( act  ) {
									case 15 :
									p = ((te))-1;
									{
										printf( "%s", "num (w/switch)\n" );
										
									}
									
									break;
									case 16 :
									p = ((te))-1;
									{
										printf( "%s", "num (w/switch)\n" );
										{
											p = p - 1;
											
										}
										{
											cs = 21;
											
										}
										
									}
									
									break;
									
								}
								
							}
							
							
						}
						
						break;
						case 26 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 7;
								
							}
							
						}
						
						break;
						case 24 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 8;
								
							}
							
						}
						
						break;
						case 17 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 15;
								
							}
							
						}
						
						break;
						case 13 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 16;
								
							}
							
						}
						
						break;
						
					}
					switch ( _patact_to_state_actions[cs] ) {
						case 9 :
						{
							{
								ts = 0;
								
							}
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
}

void finish( )
{
	if ( cs >= patact_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"abcd foix\n",
	"abcd\nanother\n",
	"123 foix\n",
	"!abcd foix\n",
	"!abcd\nanother\n",
	"!123 foix\n",
	";",
};

int inplen = 7;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

