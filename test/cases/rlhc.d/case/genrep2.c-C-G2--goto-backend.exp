#include <stddef.h>
#include <stdint.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

const char s[4096];

struct nfa_stack
{
	void *data;
	unsigned long sz;
};

struct nfa_bp_rec
{
	long state;
	const char *p;
	long popTrans;
	long q_2;
};

static const int  genrep_start  = 1;
static const int  genrep_first_final  = 9;
static const int  genrep_error  = 0;
static const int  genrep_en_main  = 1;
static const char  _genrep_nfa_targs [] = { 0, 1, 2, 3, 5, 2, 4, 1, 6, 3, 8, 6, 4, 0 ,  };
static const char  _genrep_nfa_offsets [] = { 0, 1, 0, 3, 0, 7, 0, 9, 0, 0, 0 ,  };
static const char  _genrep_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _genrep_nfa_pop_trans [] = { 0, 0, 4, 0, 7, 6, 5, 0, 4, 0, 7, 6, 5, 0 ,  };
int test( const char *p )
{
	int len = strlen( p ) + 1;
	const char *pe = p + len;
	const char *eof = pe;
	int cs;
	
	struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
	long nfa_len = 0;
	long nfa_count = 0;
	
	long q_2 = 0;
	
	printf( "testing: %s\n", p );
	
	
	{
		cs = ( int ) genrep_start;
		nfa_len = 0;
	}
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		_resume:
		switch ( cs  ) {
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 4:
			goto st_case_4;
			
		}
		goto st_out;
		st_case_1:
		if ( _genrep_nfa_offsets[1] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[1]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[1]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[1]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[1]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		st_case_2:
		if ( _genrep_nfa_offsets[2] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[2]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[2]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[2]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[2]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		if ( ((*( p  ))
		)== 97u )
		{
			goto st3;
		}
		
		{
			goto st0;
		}
		st3:
		p+= 1;
		if ( p == pe  )
		goto _test_eof3;
		
		st_case_3:
		if ( _genrep_nfa_offsets[3] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[3]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[3]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[3]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[3]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_case_5:
		if ( _genrep_nfa_offsets[5] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[5]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[5]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[5]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[5]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_case_6:
		if ( _genrep_nfa_offsets[6] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[6]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[6]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[6]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[6]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		if ( ((*( p  ))
		)== 97u )
		{
			goto st7;
		}
		
		{
			goto st0;
		}
		st7:
		p+= 1;
		if ( p == pe  )
		goto _test_eof7;
		
		st_case_7:
		if ( _genrep_nfa_offsets[7] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[7]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[7]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[7]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[7]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_case_8:
		if ( _genrep_nfa_offsets[8] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[8]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[8]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[8]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[8]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			int ck = 0;
			if ( (p+1 == eof ) )
			ck += 1;
			
			if ( 1 <= ck  )
			{		goto ctr3;
			}
			
			goto st0;
			
		}
		ctr3:
		{
			printf( "------ MATCH\n" ); 
		}
		
		
		goto st9;
		st9:
		p+= 1;
		if ( p == pe  )
		goto _test_eof9;
		
		st_case_9:
		if ( _genrep_nfa_offsets[9] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[9]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[9]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[9]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[9]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_case_4:
		if ( _genrep_nfa_offsets[4] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[4]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[4]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[4]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[4]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		{
			goto st0;
		}
		st_out:
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof7: cs = 7;
		goto _test_eof; 
		_test_eof9: cs = 9;
		goto _test_eof; 
		
		_test_eof: {}
		_out: {}
		if ( nfa_len > 0  )
		{
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 4 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({  q_2 = 0; 1; })
				);
				
				break;
				case 5 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ 1; })
				);
				
				break;
				case 6 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 < 3; })
				);
				
				break;
				case 7 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 >= 2; })
				);
				
				break;
				
			}
			if ( _pop_test  )
			{
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			
			goto _out;
		}
		
	}
	return 0;
}

int main()
{
	test( "a" );
	test( "aa" );
	test( "aaa" );
	test( "aaaa" );
	test( "aaaaa" );
	test( "aaaaaa" );
	test( "aaaaaaa" );
	test( "aaaaaaaa" );
	return 0;
}

