package main
import "fmt"

var ts  int ;
var te  int ;
var act  int ;
var token  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _scanner_actions [] int8  = [] int8  { 0, 1, 0, 1, 1, 1, 5, 1, 6, 1, 7, 2, 2, 3, 2, 2, 4, 0  }
var _scanner_trans_keys [] byte  = [] byte  { 0, 2, 0, 1, 0, 2, 0 }
var _scanner_char_class [] int8  = [] int8  { 0, 1, 2, 0  }
var _scanner_index_offsets [] int8  = [] int8  { 0, 3, 5, 0  }
var _scanner_indicies [] int8  = [] int8  { 1, 1, 2, 4, 5, 1, 1, 2, 0  }
var _scanner_index_defaults [] int8  = [] int8  { 0, 3, 0, 0  }
var _scanner_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, 0  }
var _scanner_cond_targs [] int8  = [] int8  { 1, 0, 1, 1, 2, 2, 0  }
var _scanner_cond_actions [] int8  = [] int8  { 9, 0, 5, 7, 11, 14, 0  }
var _scanner_to_state_actions [] int8  = [] int8  { 0, 1, 0, 0  }
var _scanner_from_state_actions [] int8  = [] int8  { 0, 3, 0, 0  }
var _scanner_eof_trans [] int8  = [] int8  { 1, 0, 1, 0  }
var _scanner_nfa_targs [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0  }
var _scanner_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var scanner_start  int  = 1
var scanner_first_final  int  = 1
var scanner_error  int  = -1
var scanner_en_main  int  = 1
func prepare() {

	{
		cs = int(scanner_start);
		ts = 0;
		te = 0;
		act = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _trans  int   = 0
		var  _acts int
		var  _nacts uint 
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		_resume :
		_acts = int(_scanner_from_state_actions[cs] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 1 :
					{{ts = p;
						}}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
		}
		_keys = int((cs<<1) );
		_inds = int(_scanner_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 99 && ( data[p ]) >= 97 :
			{
				var  _ic  int   = int(_scanner_char_class[int(( data[p ]) )- 97])
				switch {
					case _ic <= int(_scanner_trans_keys[_keys+1 ])&& _ic >= int(_scanner_trans_keys[_keys ]):
					_trans = int(_scanner_indicies[_inds + int(( _ic - int(_scanner_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_scanner_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_scanner_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_scanner_cond_targs[_trans]);
		if _scanner_cond_actions[_trans] == 0  {
			goto _again;
			
			
		}
		_acts = int(_scanner_cond_actions[_trans] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 2 :
					{{te = p+1;
						}}
					
					break;
					case 3 :
					{{act = 1;
						}}
					
					break;
					case 4 :
					{{act = 3;
						}}
					
					break;
					case 5 :
					{{te = p+1;
							{fmt.Print( "pat2\n" );}
						}}
					
					break;
					case 6 :
					{{te = p+1;
						}}
					
					break;
					case 7 :
					{{switch act  {
								case 1 :
								p = ((te))-1;
								{fmt.Print( "pat1\n" );}
								
								break;
								default:
								p = ((te))-1;
								
								break;
								
							}
						}
					}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
			
		}
		
		_again :
		_acts = int(_scanner_to_state_actions[cs] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 0 :
					{{ts = 0;
						}}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				if _scanner_eof_trans[cs] > 0  {
					{
						_trans = int(_scanner_eof_trans[cs] )- 1;
						goto _match_cond;
					}
					
				}
			}
			
			
		}
		
	}
}
func finish() {
	if cs >= scanner_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"ba a",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
