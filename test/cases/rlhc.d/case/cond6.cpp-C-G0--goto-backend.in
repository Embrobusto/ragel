host( "working/cond6.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	/* Balanced parenthesis with conditions. */
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
}@
array s8 _cond_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };

array s8 _cond_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _cond_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int cond_start = 1;
value int cond_first_final = 4;

value int cond_en_main = 1;

host( "working/cond6.rl", 15 ) @{
	
	void test( const char *str )
	{
		int cs = cond_start, n = 0;
		const char *p = str;
		const char *pe = str + strlen( str );
		
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			switch( ( deref( data, p )) ) {
				case 32: {
					goto ctr0;
				}
				case 40: {
					goto ctr2;
				}
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			switch( ( deref( data, p )) ) {
				case 40: {
					goto ctr4;
				}
				case 41: {
					int ck = 0;
					if ( host( "working/cond6.rl", 26 ) ={!n}= ) ck += 1;
					if ( ck > 0 ) {
						goto ctr6;
					} else {
						goto ctr5;
					}
					
				}
			}
			{
				goto ctr3;
			}
			case 3:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr7;
				}
				case 32: {
					goto ctr8;
				}
			}
			{
				goto ctr1;
			}
			case 4:
			{
				goto ctr1;
			}
		}
		
		ctr1: cs = 0; goto _again;
		ctr0: cs = 1; goto _again;
		ctr3: cs = 2; goto _again;
		ctr2: cs = 2; goto f0;
		ctr4: cs = 2; goto f1;
		ctr8: cs = 3; goto _again;
		ctr7: cs = 4; goto f3;
		ctr5: cs = 2; goto f2;
		ctr6: cs = 3; goto _again;
		
		f0: _acts = offset( _cond_actions, 1 ); goto execFuncs;
		f1: _acts = offset( _cond_actions, 3 ); goto execFuncs;
		f2: _acts = offset( _cond_actions, 5 ); goto execFuncs;
		f3: _acts = offset( _cond_actions, 7 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _cond_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _cond_actions, _acts ) ) {
				case 0{
					host( "working/cond6.rl", 24 ) ${n=0;}$
				}
				case 1{
					host( "working/cond6.rl", 25 ) ${n++;}$
				}
				case 2{
					host( "working/cond6.rl", 25 ) ${n--;}$
				}
				case 3{
					host( "working/cond6.rl", 28 ) ${cout << "success";}$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/cond6.rl", 31 ) @{
		if ( cs < cond_first_final )
		cout << "failure";
		cout << endl;
	}
	
	int main()
	{
		test( "( ( )\n" );
		test( "()()\n" );
		test( "(((\n" );
		test( "((()\n" );
		test( "((())\n" );
		test( "()\n" );
		test( "((()))\n" );
		test( "(()())\n" );
		test( "((())()(((()))))\n" );
		return 0;
	}
	
}@