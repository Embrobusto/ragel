#include <stdio.h>
#include <string.h>



static const char  _foo_actions [] = { 0, 1, 0, 1, 1, 1, 2, 0 ,  };
static const char  _foo_key_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 0 ,  };
static const char  _foo_trans_keys [] = { 104, 101, 88, 88, 88, 0 ,  };
static const char  _foo_single_lengths [] = { 0, 1, 1, 1, 1, 1, 0, 0 ,  };
static const char  _foo_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 2, 4, 6, 8, 10, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 ,  };
static const char  _foo_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_cond_targs [] = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 0, 0 ,  };
static const char  _foo_cond_actions [] = { 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 0 ,  };
static const char  _foo_to_state_actions [] = { 0, 5, 5, 5, 5, 5, 5, 0 ,  };
static const char  _foo_eof_actions [] = { 0, 3, 3, 3, 3, 3, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 6;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int main()
{
	int cs;
	char *p = "hello", *pe = p + strlen(p);
	char *eof = pe;
	
	{
		cs = ( int ) foo_start;
	}
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						const char  *__acts;
						unsigned int __nacts;
						__acts = _foo_actions + _foo_eof_actions[cs];
						__nacts = ( unsigned int  ) (*( __acts  ))
						;
						__acts += 1;
						while ( __nacts > 0  )
						{
							switch ( (*( __acts  ))
							) {
								case 1 :
								{
									printf("err: %c\n", *p); 
								}
								
								break;
								
							}
							__nacts -= 1;
							__acts += 1;
						}
						
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _foo_trans_keys + _foo_key_offsets[cs];
					_trans = ( unsigned int  ) _foo_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _foo_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _foo_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _foo_cond_keys + _foo_trans_offsets[_trans];
					_klen = ( int ) _foo_trans_lengths[_trans];
					_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _foo_cond_targs[_cond];
					if ( _foo_cond_actions[_cond]!= 0  )
					{
						_acts = _foo_actions + _foo_cond_actions[_cond];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									printf("char: %c\n", *p); 
								}
								
								break;
								case 1 :
								{
									printf("err: %c\n", *p); 
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					_acts = _foo_actions + _foo_to_state_actions[cs];
					_nacts = ( unsigned int  ) (*( _acts  ))
					;
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( (*( _acts  ))
						) {
							case 2 :
							{
								printf("to state: %c\n", *p); 
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
				
			}
			
		}
		
	}
	printf( "rest: %s\n", p );
	
	return 0;
}

