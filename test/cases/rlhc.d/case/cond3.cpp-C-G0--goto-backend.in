host( "working/cond3.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
	
	
}@
array s8 _foo_actions( 0, 1 ) = { 0, 1, 0, 1, 1, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 2;

value int foo_en_main = 1;

host( "working/cond3.rl", 22 ) @{
	
	void test( const char *str )
	{
		int cs = foo_start;
		int c = 0;
		const char *p = str;
		const char *pe = str + strlen( str );
		
		cout << "run:" << endl;
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			if ( ( deref( data, p )) == 10 ) {
				int ck = 0;
				if ( host( "working/cond3.rl", 13 ) ={c == 5}= ) ck += 1;
				if ( ck > 0 ) {
					goto ctr2;
				} else {
					goto ctr1;
				}
				
			}
			{
				goto ctr0;
			}
			case 2:
			{
				goto ctr3;
			}
			case 0:
			goto _out;
		}
		
		ctr3: cs = 0; goto _again;
		ctr0: cs = 1; goto f0;
		ctr1: cs = 1; goto f0;
		ctr2: cs = 2; goto f1;
		
		f1: _acts = offset( _foo_actions, 1 ); goto execFuncs;
		f0: _acts = offset( _foo_actions, 3 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _foo_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _foo_actions, _acts ) ) {
				case 0{
					host( "working/cond3.rl", 14 ) ${ cout << "  done" << endl; }$
				}
				case 1{
					host( "working/cond3.rl", 15 ) ${c++;}$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/cond3.rl", 32 ) @{
		if ( cs >= foo_first_final )
		cout << "  success" << endl;
		else
		cout << "  failure" << endl;
		cout << endl;
	}
	
	int main()
	{
		test( "12345\n" );  // success
		test( "\n2345\n" ); // success, first newline ignored
		test( "1234\n" );   // failure, didn't get 5 chars before newline.
		return 0;
	}
	
}@