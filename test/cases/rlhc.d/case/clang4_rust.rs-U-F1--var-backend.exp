static mut pos : i32 = 0;
static mut line : i32 = 0;





static _clang_trans_keys: [u8 ; 40] = [ 1, 0, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 8, 9, 8, 10, 0, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 0 , 0 ];
static _clang_char_class: [i8 ; 130] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 4, 4, 11, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 4, 4, 4, 4, 0, 0 , 0 ];
static _clang_index_offsets: [i16 ; 21] = [ 0, 0, 14, 28, 42, 56, 70, 84, 86, 89, 103, 116, 129, 142, 155, 168, 181, 194, 207, 0 , 0 ];
static _clang_indicies: [i8 ; 222] = [ 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 6, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 9, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 8, 8, 8, 8, 11, 8, 8, 8, 8, 8, 8, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 15, 15, 15, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 16, 17, 16, 18, 16, 19, 20, 21, 22, 22, 16, 22, 24, 25, 26, 25, 27, 25, 28, 29, 30, 31, 31, 25, 31, 33, 34, 35, 34, 36, 34, 37, 38, 39, 40, 40, 34, 40, 24, 8, 26, 25, 27, 25, 12, 29, 30, 31, 31, 25, 31, 42, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 50, 52, 53, 54, 53, 55, 53, 56, 14, 14, 57, 57, 53, 57, 59, 60, 61, 60, 62, 60, 63, 64, 64, 64, 64, 60, 64, 42, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 49, 66, 67, 68, 67, 69, 67, 70, 71, 71, 71, 72, 67, 72, 0 , 0 ];
static _clang_index_defaults: [i8 ; 21] = [ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 23, 32, 23, 41, 51, 58, 41, 65, 0 , 0 ];
static _clang_trans_cond_spaces: [i8 ; 75] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _clang_cond_targs: [i8 ; 75] = [ 1, 1, 12, 9, 0, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0 , 0 ];
static _clang_cond_actions: [i8 ; 75] = [ 1, 2, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 3, 1, 4, 4, 5, 5, 4, 4, 4, 4, 6, 7, 8, 9, 9, 8, 8, 8, 8, 10, 11, 12, 13, 13, 12, 12, 12, 12, 14, 15, 16, 17, 17, 1, 16, 1, 16, 0, 18, 19, 20, 21, 21, 20, 20, 22, 23, 24, 25, 25, 24, 1, 26, 27, 28, 29, 29, 28, 1, 28, 0 , 0 ];
static _clang_eof_actions: [i8 ; 21] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 , 0 ];
static _clang_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _clang_nfa_offsets: [i8 ; 21] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _clang_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _clang_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static clang_start : i32 = 10;
static clang_first_final : i32 = 10;
static clang_error : i32 = 0;
static clang_en_main : i32 = 10;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	pos = 0;
	line = 1;
	
	
	{
		cs = ( clang_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _have == 0  ) {
								{
									match ( _clang_eof_actions[(cs) as usize] ) {
										22  => {
											{print!( "{}", "ident(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										10  => {
											{print!( "{}", "literal(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										18  => {
											{print!( "{}", "float(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										14  => {
											{print!( "{}", "int(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										26  => {
											{print!( "{}", "hex(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										6  => {
											{print!( "{}", "symbol(" );
												print!( "{}", line );
												print!( "{}", "," );
												print!( "{}", buffer.len() );
												print!( "{}", "): " );
												print!( "{}", buffer );
												print!( "{}", "\n" );
											}
											
										}
										
										_ => {}
									}
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _clang_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 127  ) {
								{
									let mut _ic  = ( _clang_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 0) as usize] ) as i32;
									if ( _ic <= ( _clang_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _clang_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _clang_indicies[(_inds + ( ( _ic - ( _clang_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _clang_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _clang_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _clang_cond_targs[(_trans) as usize] ) as i32;
							match ( _clang_cond_actions[(_trans) as usize] ) {
								1  => {
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								5  => {
									{buffer = String::new();
									}
									
								}
								3  => {
									{line = line + 1;
									}
									
								}
								22  => {
									{print!( "{}", "ident(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								10  => {
									{print!( "{}", "literal(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								18  => {
									{print!( "{}", "float(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								14  => {
									{print!( "{}", "int(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								26  => {
									{print!( "{}", "hex(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								6  => {
									{print!( "{}", "symbol(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									
								}
								2  => {
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									{line = line + 1;
									}
									
								}
								4  => {
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								25  => {
									{print!( "{}", "ident(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								23  => {
									{print!( "{}", "ident(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								13  => {
									{print!( "{}", "literal(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								11  => {
									{print!( "{}", "literal(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								21  => {
									{print!( "{}", "float(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								19  => {
									{print!( "{}", "float(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								17  => {
									{print!( "{}", "int(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								15  => {
									{print!( "{}", "int(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								29  => {
									{print!( "{}", "hex(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								27  => {
									{print!( "{}", "hex(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								9  => {
									{print!( "{}", "symbol(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									
								}
								7  => {
									{print!( "{}", "symbol(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{line = line + 1;
									}
									
								}
								24  => {
									{print!( "{}", "ident(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								12  => {
									{print!( "{}", "literal(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								20  => {
									{print!( "{}", "float(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								16  => {
									{print!( "{}", "int(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								28  => {
									{print!( "{}", "hex(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								8  => {
									{print!( "{}", "symbol(" );
										print!( "{}", line );
										print!( "{}", "," );
										print!( "{}", buffer.len() );
										print!( "{}", "): " );
										print!( "{}", buffer );
										print!( "{}", "\n" );
									}
									{buffer = String::new();
									}
									{buffer.push( ( (( data[(p ) as usize]
										)) ) as char );
									}
									
								}
								
								_ => {}
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= clang_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n".to_string() ); }
	unsafe { m( "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n".to_string() ); }
}

