host( "working/export1.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	
	
}@
export char test_ex_c1 99;
export char test_ex_c2 122;
export char test_ex_c3 116;

host( "working/export1.rl", 25 ) @{
}@
array s8 _test_key_offsets( 0, 10 ) = { 0, 0, 3, 5, 10, 10, 0 };

array char _test_trans_keys( 0, 122 ) = { 10, 48, 57, 10, 46, 10, 65, 90, 97, 122, 99, 116, 122, 0 };

array s8 _test_single_lengths( 0, 3 ) = { 0, 1, 2, 1, 0, 3, 0 };

array s8 _test_range_lengths( 0, 2 ) = { 0, 1, 0, 2, 0, 0, 0 };

array s8 _test_index_offsets( 0, 11 ) = { 0, 0, 3, 6, 10, 11, 0 };

array s8 _test_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _test_trans_offsets( 0, 14 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 };

array s8 _test_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _test_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_cond_targs( 0, 5 ) = { 5, 1, 0, 5, 2, 0, 5, 3, 3, 0, 4, 1, 2, 3, 0, 0 };

array s8 _test_cond_actions( 0, 3 ) = { 1, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int test_start = 4;
value int test_first_final = 4;
value int test_error = 0;

value int test_en_commands = 5;
value int test_en_some_other = 4;

host( "working/export1.rl", 26 ) @{
	
	int test( const char *data, int len )
	{
		int cs = test_en_commands;
		const char *p = data, *pe = data + len;
		
	}@
	{
	}
	host( "working/export1.rl", 33 ) @{
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				_keys = offset( _test_trans_keys, _test_key_offsets[cs] );
				_trans = cast(uint)_test_index_offsets[cs];
				
				_klen = cast(int)_test_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _test_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _test_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_test_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _test_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _test_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _test_cond_keys, _test_trans_offsets[_trans] );
				_klen = cast(int)_test_trans_lengths[_trans];
				_cond = cast(uint)_test_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _test_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _test_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_test_cond_targs[_cond];
				
				if ( _test_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _test_cond_actions[_cond] ) {
					case 1 {
						host( "working/export1.rl", 16 ) ${ printf( "c1\n" );}$
					}
					case 3 {
						host( "working/export1.rl", 17 ) ${ printf( "c2\n" );}$
					}
					case 2 {
						host( "working/export1.rl", 18 ) ${ printf( "c3\n" );}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/export1.rl", 34 ) @{
		
		if ( cs >= test_first_final )
		printf("ACCEPT\n");
		else
		printf("ERROR\n");
		return 0;
	}
	
	char data[] = { 
		test_ex_c1, '1', '2', '\n', 
		test_ex_c2, 'a', 'b', '\n', 
		test_ex_c3, '.', '.', '\n', 0 
	};
	
	int main()
	{
		test( data, strlen( data ) );
		return 0;
	}
	
}@