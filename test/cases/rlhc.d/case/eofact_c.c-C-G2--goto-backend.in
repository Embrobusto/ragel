host( "working/eofact_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	
	
	
	
	
	
	
}@
value int eofact_start = 1;
value int eofact_first_final = 10;
value int eofact_error = 0;

value int eofact_en_main = 1;

array s8 _eofact_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _eofact_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _eofact_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _eofact_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/eofact_c.rl", 35 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)eofact_start;
	}
	host( "working/eofact_c.rl", 42 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( cs )
		{
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 12:
			goto st_case_12;
		}
		goto st_out;
		st_case_1:
		switch( ( deref( data, p )) ) {
			case 104: {
				goto st2;
			}
			case 116: {
				goto st6;
			}
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		if ( ( deref( data, p )) == 101 ) {
			goto st3;
		}
		{
			goto st0;
		}
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		if ( ( deref( data, p )) == 108 ) {
			goto st4;
		}
		{
			goto st0;
		}
		st4:
		p+= 1;
		if ( p == pe )
		goto _test_eof4;
		st_case_4:
		if ( ( deref( data, p )) == 108 ) {
			goto st5;
		}
		{
			goto st0;
		}
		st5:
		p+= 1;
		if ( p == pe )
		goto _test_eof5;
		st_case_5:
		if ( ( deref( data, p )) == 111 ) {
			goto st10;
		}
		{
			goto st0;
		}
		st10:
		p+= 1;
		if ( p == pe )
		goto _test_eof10;
		st_case_10:
		if ( ( deref( data, p )) == 10 ) {
			goto st11;
		}
		{
			goto st0;
		}
		st11:
		p+= 1;
		if ( p == pe )
		goto _test_eof11;
		st_case_11:
		{
			goto st0;
		}
		st6:
		p+= 1;
		if ( p == pe )
		goto _test_eof6;
		st_case_6:
		if ( ( deref( data, p )) == 104 ) {
			goto st7;
		}
		{
			goto st0;
		}
		st7:
		p+= 1;
		if ( p == pe )
		goto _test_eof7;
		st_case_7:
		if ( ( deref( data, p )) == 101 ) {
			goto st8;
		}
		{
			goto st0;
		}
		st8:
		p+= 1;
		if ( p == pe )
		goto _test_eof8;
		st_case_8:
		if ( ( deref( data, p )) == 114 ) {
			goto st9;
		}
		{
			goto st0;
		}
		st9:
		p+= 1;
		if ( p == pe )
		goto _test_eof9;
		st_case_9:
		if ( ( deref( data, p )) == 101 ) {
			goto st12;
		}
		{
			goto st0;
		}
		st12:
		p+= 1;
		if ( p == pe )
		goto _test_eof12;
		st_case_12:
		{
			goto st0;
		}
		st_out:
		_test_eof2: cs = 2; goto _test_eof; 
		_test_eof3: cs = 3; goto _test_eof; 
		_test_eof4: cs = 4; goto _test_eof; 
		_test_eof5: cs = 5; goto _test_eof; 
		_test_eof10: cs = 10; goto _test_eof; 
		_test_eof11: cs = 11; goto _test_eof; 
		_test_eof6: cs = 6; goto _test_eof; 
		_test_eof7: cs = 7; goto _test_eof; 
		_test_eof8: cs = 8; goto _test_eof; 
		_test_eof9: cs = 9; goto _test_eof; 
		_test_eof12: cs = 12; goto _test_eof; 
		
		_test_eof: {}
		if ( p == eof )
		{
			switch ( cs ) {
				case 2: 
				fallthrough;
				case 3: 
				fallthrough;
				case 4: 
				fallthrough;
				case 5: 
				host( "working/eofact_c.rl", 15 ) ${printf( "%s", "a1\n" );
				}$
				break;
				case 10: 
				host( "working/eofact_c.rl", 17 ) ${printf( "%s", "a2\n" );
				}$
				break;
				case 6: 
				fallthrough;
				case 7: 
				fallthrough;
				case 8: 
				fallthrough;
				case 9: 
				host( "working/eofact_c.rl", 19 ) ${printf( "%s", "a3\n" );
				}$
				break;
				case 12: 
				host( "working/eofact_c.rl", 21 ) ${printf( "%s", "a4\n" );
				}$
				break;
				case 1: 
				host( "working/eofact_c.rl", 15 ) ${printf( "%s", "a1\n" );
				}$	host( "working/eofact_c.rl", 19 ) ${printf( "%s", "a3\n" );
				}$
				break;
			}
		}
		
		_out: {}
	}
	host( "working/eofact_c.rl", 50 ) @{
	}
	
	void finish( )
	{
		if ( cs >= eofact_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"",
		"h",
		"hell",
		"hello",
		"hello\n",
		"t",
		"ther",
		"there",
		"friend",
	};
	
	int inplen = 9;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@