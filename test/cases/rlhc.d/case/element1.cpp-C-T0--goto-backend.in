host( "working/element1.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	#include <iostream>
	using namespace std;
	
	struct LangEl
	{
		int key;
		const char *name;
	};
	
	struct Fsm
	{
		int cs;
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		int init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		int execute(  LangEl *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
		
	};
	
	
	
}@
array s8 _Fsm_actions( 0, 1 ) = { 0, 1, 0, 1, 1, 0 };

array s8 _Fsm_key_offsets( 0, 3 ) = { 0, 0, 1, 3, 0 };

array int _Fsm_trans_keys( 0, 3 ) = { 1, 2, 3, 0 };

array s8 _Fsm_single_lengths( 0, 2 ) = { 0, 1, 2, 0, 0 };

array s8 _Fsm_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _Fsm_index_offsets( 0, 5 ) = { 0, 0, 2, 5, 0 };

array s8 _Fsm_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _Fsm_trans_offsets( 0, 5 ) = { 0, 1, 2, 3, 4, 5, 0 };

array s8 _Fsm_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 0 };

array s8 _Fsm_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _Fsm_cond_targs( 0, 3 ) = { 2, 0, 2, 3, 0, 0, 0 };

array s8 _Fsm_cond_actions( 0, 1 ) = { 1, 0, 1, 1, 0, 0, 0 };

array s8 _Fsm_eof_actions( 0, 3 ) = { 0, 0, 0, 3, 0 };

array s8 _Fsm_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _Fsm_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Fsm_start = 1;
value int Fsm_first_final = 3;
value int Fsm_error = 0;

value int Fsm_en_main = 1;

host( "working/element1.rl", 54 ) @{
	
	int Fsm::init( )
	{
	}@
	{
		cs = cast(int)Fsm_start;
	}
	host( "working/element1.rl", 58 ) @{
		return 0;
	}
	
	int Fsm::execute( LangEl *data, int len )
	{
		LangEl *p = data;
		LangEl *pe = data + len;
		LangEl *eof_marker = pe;
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index int _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _Fsm_trans_keys, _Fsm_key_offsets[cs] );
				_trans = cast(uint)_Fsm_index_offsets[cs];
				
				_klen = cast(int)_Fsm_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( host( "-", 1 ) ={p->key}= < deref( _Fsm_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( host( "-", 1 ) ={p->key}= > deref( _Fsm_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_Fsm_range_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( host( "-", 1 ) ={p->key}= < deref( _Fsm_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( host( "-", 1 ) ={p->key}= > deref( _Fsm_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _Fsm_cond_keys, _Fsm_trans_offsets[_trans] );
				_klen = cast(int)_Fsm_trans_lengths[_trans];
				_cond = cast(uint)_Fsm_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _Fsm_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _Fsm_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_Fsm_cond_targs[_cond];
				
				if ( _Fsm_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _Fsm_actions, _Fsm_cond_actions[_cond] );
				_nacts = cast(uint)deref( _Fsm_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _Fsm_actions, _acts ) )
					{
						case 0 {
							host( "working/element1.rl", 49 ) ${cout << p->name << endl;}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == host( "-", 1 ) ={ eof_marker}= )
				{
					index s8 __acts;
					uint __nacts;
					__acts = offset( _Fsm_actions, _Fsm_eof_actions[cs] );
					__nacts = cast(uint)deref( _Fsm_actions, __acts );
					__acts += 1;
					while ( __nacts > 0 ) {
						switch ( deref( _Fsm_actions, __acts ) ) {
							case 1 {
								host( "working/element1.rl", 50 ) ${cout << "accept" << endl;}$
							}
						}
						__nacts -= 1;
						__acts += 1;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/element1.rl", 67 ) @{
		
		if ( cs == Fsm_error )
		return -1;
		if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	int Fsm::finish( )
	{
		if ( cs == Fsm_error )
		return -1;
		if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	int main( )
	{
		static Fsm fsm;
		static LangEl lel[] = { 
			{1, "one"}, 
			{2, "two-a"}, 
			{2, "two-b"}, 
			{2, "two-c"}, 
			{3, "three"}
		};
		
		fsm.init();
		fsm.execute( lel, 5 );
		fsm.finish();
		return 0;
	}
	
}@