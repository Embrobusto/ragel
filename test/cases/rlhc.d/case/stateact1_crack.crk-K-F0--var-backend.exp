import crack.io cout;
import crack.lang Buffer;








const array[int16 ] _state_act_actions = [ 0, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 2, 2, 1, 3, 0 ,  ];
const array[byte ] _state_act_trans_keys = [ 1, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0,  ];
const array[int16 ] _state_act_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 ,  ];
const array[int16 ] _state_act_index_offsets = [ 0, 0, 1, 2, 3, 4, 0 ,  ];
const array[int16 ] _state_act_indicies = [ 0, 2, 3, 3, 3, 0 ,  ];
const array[int16 ] _state_act_index_defaults = [ 0, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _state_act_trans_cond_spaces = [ -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _state_act_cond_targs = [ 2, 0, 5, 1, 0 ,  ];
const array[int16 ] _state_act_cond_actions = [ 0, 0, 9, 0, 0 ,  ];
const array[int16 ] _state_act_to_state_actions = [ 0, 0, 5, 1, 11, 1, 0 ,  ];
const array[int16 ] _state_act_from_state_actions = [ 0, 0, 7, 3, 14, 3, 0 ,  ];
const array[int16 ] _state_act_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _state_act_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _state_act_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _state_act_nfa_pop_trans = [ 0, 0 ,  ];
const int  state_act_start  = 4;
const int  state_act_first_final  = 4;
const int  state_act_error  = 0;
const int  state_act_en_main  = 4;
const int  state_act_en_main_line_again  = 3;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( state_act_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_acts = _state_act_from_state_actions[cs];
					_nacts = uint32  ( _state_act_actions[_acts ] );
					_acts += 1;
					while ( _nacts > 0  )
					{
						if ( _state_act_actions[_acts ] == 1  ) {
							if ( 1 ) {
								cout.format( "a2\n" );
								
							}
							
						}
						else if ( _state_act_actions[_acts ] == 3  ) {
							if ( 1 ) {
								cout.format( "b2\n" );
								
							}
							
						}
						else if ( _state_act_actions[_acts ] == 5  ) {
							if ( 1 ) {
								cout.format( "c2\n" );
								
							}
							
						}
						;
						_nacts -= 1;
						_acts += 1;
						
					}
					
					_keys = (cs<<1);
					_inds = _state_act_index_offsets[cs];
					if ( (data[p ])<= 105 && (data[p ])>= 10  )
					{
						int _ic = int ( _state_act_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _state_act_trans_keys[_keys+1 ] )&& _ic >= int ( _state_act_trans_keys[_keys ] ) )
						_trans = uint32  ( _state_act_indicies[_inds + int ( (_ic - int ( _state_act_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _state_act_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _state_act_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _state_act_cond_targs[_trans] );
					if ( _state_act_cond_actions[_trans]!= 0  )
					{
						_acts = _state_act_cond_actions[_trans];
						_nacts = uint32  ( _state_act_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _state_act_actions[_acts ] == 6  ) {
								if ( 1 ) {
									if ( 1 ) {
										cs = 3;
										
									}
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					_acts = _state_act_to_state_actions[cs];
					_nacts = uint32  ( _state_act_actions[_acts ] );
					_acts += 1;
					while ( _nacts > 0  )
					{
						if ( _state_act_actions[_acts ] == 0  ) {
							if ( 1 ) {
								cout.format( "a1\n" );
								
							}
							
						}
						else if ( _state_act_actions[_acts ] == 2  ) {
							if ( 1 ) {
								cout.format( "b1\n" );
								
							}
							
						}
						else if ( _state_act_actions[_acts ] == 4  ) {
							if ( 1 ) {
								cout.format( "c1\n" );
								
							}
							
						}
						;
						_nacts -= 1;
						_acts += 1;
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= state_act_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "hi\nhi\n" );
}

main();
