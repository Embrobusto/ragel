package main
import "fmt"

var neg  int ;
var value  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _state_chart_nfa_targs [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0  }
var _state_chart_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var state_chart_start  int  = 3
var state_chart_first_final  int  = 3
var state_chart_error  int  = 0
var state_chart_en_main  int  = 3
func prepare() {
	value = 0;
	neg = 0;
	
	{
		cs = int(state_chart_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume:
		switch cs  {
			case 3:
			switch ( data[p ])  {
				case 43:
				{
					goto ctr3;
				}
				case 45:
				{
					goto ctr4;
				}
				
			}
			if 48 <= ( data[p ]) && ( data[p ]) <= 57  {
				{
					goto ctr5;
				}
				
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 1:
			if 48 <= ( data[p ]) && ( data[p ]) <= 57  {
				{
					goto ctr0;
				}
				
			}
			{
				goto ctr1;
			}
			case 2:
			if ( data[p ]) == 10  {
				{
					goto ctr2;
				}
				
			}
			if 48 <= ( data[p ]) && ( data[p ]) <= 57  {
				{
					goto ctr0;
				}
				
			}
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr3: cs = 1;
		goto f2;
		ctr4: cs = 1;
		goto f3;
		ctr0: cs = 2;
		goto f0;
		ctr5: cs = 2;
		goto f4;
		ctr2: cs = 3;
		goto f1;
		
		f2:
		{neg = 0;
			value = 0;
		}
		
		goto _again;
		f0:
		{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
			;
		}
		
		goto _again;
		f3:
		{neg = 0;
			value = 0;
		}
		{neg = 1;
		}
		
		goto _again;
		f4:
		{neg = 0;
			value = 0;
		}
		{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
			;
		}
		
		goto _again;
		f1:
		{if ( neg != 0 ) {
				value = -1 * value;
				
			}
		}
		{fmt.Print( value );fmt.Print( "\n" );}
		
		goto _again;
		
		_again:
		if cs == 0  {
			goto _out;
			
		}
		p+= 1;
		if p != pe  {
			goto _resume;
			
		}
		_test_eof: {}
		_out: {}
	}
}
func finish() {
	if cs >= state_chart_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
