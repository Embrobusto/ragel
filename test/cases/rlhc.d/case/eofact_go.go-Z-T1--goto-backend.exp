package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var _eofact_key_offsets [] int8  = [] int8  { 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 0  }
var _eofact_trans_keys [] byte  = [] byte  { 104, 116, 101, 108, 108, 111, 104, 101, 114, 101, 10, 0 }
var _eofact_single_lengths [] int8  = [] int8  { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0  }
var _eofact_range_lengths [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_index_offsets [] int8  = [] int8  { 0, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22, 0  }
var _eofact_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _eofact_trans_offsets [] int8  = [] int8  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0  }
var _eofact_trans_lengths [] int8  = [] int8  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _eofact_cond_keys [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_cond_targs [] int8  = [] int8  { 2, 6, 0, 3, 0, 4, 0, 5, 0, 10, 0, 7, 0, 8, 0, 9, 0, 12, 0, 11, 0, 0, 0, 0  }
var _eofact_cond_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_eof_actions [] int8  = [] int8  { 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 0, 5, 0  }
var _eofact_nfa_targs [] int8  = [] int8  { 0, 0  }
var _eofact_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _eofact_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var eofact_start  int  = 1
var eofact_first_final  int  = 10
var eofact_error  int  = 0
var eofact_en_main  int  = 1
func prepare() {

	{
		cs = int(eofact_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _klen int 
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		var  _trans  uint   = 0
		var  _cond  uint   = 0
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int(_eofact_key_offsets[cs] );
		_trans = uint(_eofact_index_offsets[cs]);
		_klen = int(_eofact_single_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + _klen - 1;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + ((_upper-_lower) >> 1);
						switch {
							case ( data[p ]) < _eofact_trans_keys[_mid ]:
							_upper = _mid - 1;
							
							case ( data[p ]) > _eofact_trans_keys[_mid ]:
							_lower = _mid + 1;
							
							default:
							{
								_trans += uint((_mid - _keys));
								goto _match;
							}
							
						}
					}
					
				}
				_keys += _klen;
				_trans += uint(_klen);
			}
			
			
		}
		_klen = int(_eofact_range_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + (_klen<<1) - 2;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + (((_upper-_lower) >> 1) & ^1);
						switch {
							case ( data[p ]) < _eofact_trans_keys[_mid ]:
							_upper = _mid - 2;
							
							case ( data[p ]) > _eofact_trans_keys[_mid + 1 ]:
							_lower = _mid + 2;
							
							default:
							{
								_trans += uint(((_mid - _keys)>>1));
								goto _match;
							}
							
						}
					}
					
				}
				_trans += uint(_klen);
			}
			
			
		}
		
		_match :
		_ckeys = int(_eofact_trans_offsets[_trans] );
		_klen = int(_eofact_trans_lengths[_trans]);
		_cond = uint(_eofact_trans_offsets[_trans]);
		_cpc = 0;
		{
			var  _lower int
			var  _mid int
			var  _upper int
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			for {
				{
					if _upper < _lower  {
						break;
						
						
					}
					_mid = _lower + ((_upper-_lower) >> 1);
					switch {
						case _cpc < int(_eofact_cond_keys[_mid ]):
						_upper = _mid - 1;
						
						case _cpc > int(_eofact_cond_keys[_mid ]):
						_lower = _mid + 1;
						
						default:
						{
							_cond += uint((_mid - _ckeys));
							goto _match_cond;
						}
						
					}
				}
				
			}
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = int(_eofact_cond_targs[_cond]);
		
		_again :
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				switch _eofact_eof_actions[cs]  {
					case 2 :
					{fmt.Print( "a1\n" );}
					
					break;
					case 4 :
					{fmt.Print( "a2\n" );}
					
					break;
					case 3 :
					{fmt.Print( "a3\n" );}
					
					break;
					case 5 :
					{fmt.Print( "a4\n" );}
					
					break;
					case 1 :
					{fmt.Print( "a1\n" );}
					{fmt.Print( "a3\n" );}
					
					break;
					
				}
			}
			
			
		}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= eofact_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"",
	"h",
	"hell",
	"hello",
	"hello\n",
	"t",
	"ther",
	"there",
	"friend",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
