#include <stdio.h>
#include <string.h>



static const char  _foo_actions [] = { 0, 1, 0, 1, 1, 1, 2, 0 ,  };
static const char  _foo_trans_keys [] = { 1, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0 ,  };
static const char  _foo_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 0 ,  };
static const char  _foo_indicies [] = { 1, 2, 3, 4, 5, 0 ,  };
static const char  _foo_index_defaults [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _foo_cond_targs [] = { 0, 2, 3, 4, 5, 6, 0 ,  };
static const char  _foo_cond_actions [] = { 3, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_to_state_actions [] = { 0, 5, 5, 5, 5, 5, 5, 0 ,  };
static const char  _foo_eof_actions [] = { 0, 3, 3, 3, 3, 3, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 6;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int main()
{
	int cs;
	char *p = "hello", *pe = p + strlen(p);
	char *eof = pe;
	
	{
		cs = ( int ) foo_start;
	}
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _foo_trans_keys + (cs<<1);
		_inds = _foo_indicies + _foo_index_offsets[cs];
		if ( ((*( p  ))
		)<= 104 && ((*( p  ))
		)>= 88  )
		{
			int _ic = ( int ) _foo_char_class[( int ) ((*( p  ))
			)- 88];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _foo_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _foo_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _foo_cond_targs[_trans];
		if ( _foo_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _foo_actions + _foo_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf("char: %c\n", *p); 
				}
				
				break;
				case 1 :
				{
					printf("err: %c\n", *p); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		_acts = _foo_actions + _foo_to_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 2 :
				{
					printf("to state: %c\n", *p); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _foo_actions + _foo_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 1 :
					{
						printf("err: %c\n", *p); 
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
	printf( "rest: %s\n", p );
	
	return 0;
}

