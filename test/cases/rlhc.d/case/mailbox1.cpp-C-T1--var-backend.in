host( "working/mailbox1.rl", 1 ) @{/*
	* @@LANG: c++
	* @@CFLAGS: -I../aapl
	*
	* Test works with split code gen.
	*/
	
	/*
	* Parses unix mail boxes into headers and bodies.
	*/
	
	#include "mailbox1.h"
	
	#ifdef PERF_TEST
	
	/* Calibrated to 1s on yoho. */
	#define perf_iters ( 134408ll * S )
	
	int _perf_dummy = 0;
	#define perf_printf(...) ( _perf_dummy += 1 )
	#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )
	
	#else
	
	#define perf_printf(...) printf( __VA_ARGS__ )
	#define perf_loop
	
	#endif
	
	
	
}@
array s16 _MBox_key_offsets( 0, 375 ) = { 0, 0, 1, 2, 3, 4, 6, 10, 14, 18, 20, 24, 28, 32, 34, 40, 46, 48, 54, 58, 61, 65, 69, 72, 80, 84, 88, 92, 96, 98, 104, 108, 112, 116, 118, 123, 124, 125, 127, 129, 131, 133, 135, 139, 143, 147, 149, 153, 157, 161, 163, 169, 175, 177, 183, 187, 190, 194, 198, 201, 209, 213, 217, 221, 225, 227, 233, 237, 241, 245, 247, 251, 255, 259, 261, 267, 271, 277, 281, 287, 291, 295, 299, 301, 305, 308, 309, 316, 320, 324, 328, 330, 336, 340, 346, 350, 356, 360, 364, 368, 370, 374, 375, 0 };

array char _MBox_trans_keys( 0, 126 ) = { 114, 111, 109, 32, 10, 32, 10, 32, 65, 90, 10, 32, 97, 122, 10, 32, 97, 122, 10, 32, 10, 32, 65, 90, 10, 32, 97, 122, 10, 32, 97, 122, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 65, 90, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 58, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 58, 10, 32, 43, 45, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 33, 57, 59, 126, 10, 10, 10, 114, 10, 111, 10, 109, 10, 32, 10, 32, 10, 32, 65, 90, 10, 32, 97, 122, 10, 32, 97, 122, 10, 32, 10, 32, 65, 90, 10, 32, 97, 122, 10, 32, 97, 122, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 65, 90, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 58, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 58, 10, 32, 43, 45, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 48, 57, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 43, 45, 65, 90, 10, 32, 48, 57, 10, 32, 65, 90, 97, 122, 10, 32, 65, 90, 10, 32, 65, 90, 97, 122, 10, 32, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 48, 57, 58, 33, 126, 10, 9, 10, 32, 33, 57, 59, 126, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 43, 45, 65, 90, 10, 32, 48, 57, 10, 32, 65, 90, 97, 122, 10, 32, 65, 90, 10, 32, 65, 90, 97, 122, 10, 32, 65, 90, 10, 32, 48, 57, 10, 32, 48, 57, 10, 32, 10, 32, 48, 57, 70, 10, 70, 0 };

array s8 _MBox_single_lengths( 0, 4 ) = { 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 3, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 0 };

array s8 _MBox_range_lengths( 0, 2 ) = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 2, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 2, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 0, 1, 1, 2, 1, 2, 1, 1, 1, 0, 1, 0, 0, 0 };

array s16 _MBox_index_offsets( 0, 391 ) = { 0, 0, 2, 4, 6, 8, 11, 15, 19, 23, 26, 30, 34, 38, 41, 46, 51, 54, 59, 63, 67, 71, 75, 79, 86, 90, 94, 98, 102, 105, 110, 114, 118, 122, 125, 129, 131, 133, 136, 139, 142, 145, 148, 152, 156, 160, 163, 167, 171, 175, 178, 183, 188, 191, 196, 200, 204, 208, 212, 216, 223, 227, 231, 235, 239, 242, 247, 251, 255, 259, 262, 266, 270, 274, 277, 283, 287, 292, 296, 301, 305, 309, 313, 316, 320, 323, 325, 331, 335, 339, 343, 346, 352, 356, 361, 365, 370, 374, 378, 382, 385, 389, 391, 0 };

array s8 _MBox_trans_cond_spaces( -1, 0 ) = {};

array s16 _MBox_trans_offsets( 0, 393 ) = {};

array s8 _MBox_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _MBox_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _MBox_cond_targs( 0, 102 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 0, 6, 5, 0, 6, 7, 5, 0, 6, 8, 5, 0, 6, 9, 5, 0, 10, 5, 0, 6, 11, 5, 0, 6, 12, 5, 0, 6, 13, 5, 0, 14, 5, 0, 15, 100, 11, 5, 0, 6, 16, 7, 5, 0, 17, 5, 0, 6, 18, 7, 5, 0, 6, 19, 5, 0, 6, 20, 5, 0, 6, 21, 5, 0, 6, 22, 5, 0, 23, 97, 5, 0, 6, 24, 24, 87, 95, 5, 0, 6, 25, 5, 0, 6, 26, 5, 0, 6, 27, 5, 0, 6, 28, 5, 0, 29, 5, 0, 6, 30, 7, 5, 0, 6, 31, 5, 0, 6, 32, 5, 0, 6, 33, 5, 34, 6, 5, 35, 84, 84, 0, 102, 36, 35, 36, 35, 38, 36, 35, 39, 36, 35, 40, 36, 35, 41, 36, 35, 42, 41, 35, 42, 43, 41, 35, 42, 44, 41, 35, 42, 45, 41, 35, 46, 41, 35, 42, 47, 41, 35, 42, 48, 41, 35, 42, 49, 41, 35, 50, 41, 35, 51, 83, 47, 41, 35, 42, 52, 43, 41, 35, 53, 41, 35, 42, 54, 43, 41, 35, 42, 55, 41, 35, 42, 56, 41, 35, 42, 57, 41, 35, 42, 58, 41, 35, 59, 80, 41, 35, 42, 60, 60, 70, 78, 41, 35, 42, 61, 41, 35, 42, 62, 41, 35, 42, 63, 41, 35, 42, 64, 41, 35, 65, 41, 35, 42, 66, 43, 41, 35, 42, 67, 41, 35, 42, 68, 41, 35, 42, 69, 41, 34, 42, 41, 35, 42, 71, 41, 35, 42, 72, 41, 35, 42, 73, 41, 34, 74, 41, 35, 42, 75, 75, 76, 41, 35, 42, 66, 41, 35, 42, 77, 44, 41, 35, 42, 69, 41, 35, 42, 79, 44, 41, 35, 42, 64, 41, 35, 42, 81, 41, 35, 42, 82, 41, 35, 59, 41, 35, 42, 52, 41, 85, 84, 0, 86, 85, 85, 35, 85, 84, 84, 0, 0, 6, 88, 5, 0, 6, 89, 5, 0, 6, 90, 5, 34, 91, 5, 0, 6, 92, 92, 93, 5, 0, 6, 30, 5, 0, 6, 94, 8, 5, 0, 6, 33, 5, 0, 6, 96, 8, 5, 0, 6, 28, 5, 0, 6, 98, 5, 0, 6, 99, 5, 0, 23, 5, 0, 6, 16, 5, 1, 0, 102, 37, 36, 0 };

array s8 _MBox_cond_actions( 0, 6 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 4, 5, 4, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _MBox_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _MBox_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _MBox_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _MBox_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int MBox_start = 101;
value int MBox_first_final = 101;
value int MBox_error = 0;

value int MBox_en_main = 101;

host( "working/mailbox1.rl", 111 ) @{
	
	void MBox::execute( const char *data, int len )
	{
		perf_loop
		{
			const char *p = data;
			const char *pe = data + len;
		}@
		{
			host( "-", 1 ) @{this->}@ -> cs = cast(int)MBox_start;
		}
		
		{
			int _klen;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			uint _trans;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			while ( _cont == 1 ) {
				
				if ( host( "-", 1 ) @{this->}@ -> cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _MBox_trans_keys, _MBox_key_offsets[host( "-", 1 ) @{this->}@ -> cs] );
						_trans = cast(uint)_MBox_index_offsets[host( "-", 1 ) @{this->}@ -> cs];
						_have = 0;
						
						_klen = cast(int)_MBox_single_lengths[host( "-", 1 ) @{this->}@ -> cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _MBox_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _MBox_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_MBox_range_lengths[host( "-", 1 ) @{this->}@ -> cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _MBox_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _MBox_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _MBox_cond_keys, _MBox_trans_offsets[_trans] );
						_klen = cast(int)_MBox_trans_lengths[_trans];
						_cond = cast(uint)_MBox_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _MBox_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _MBox_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								host( "-", 1 ) @{this->}@ -> cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						host( "-", 1 ) @{this->}@ -> cs = cast(int)_MBox_cond_targs[_cond];
						
						switch ( _MBox_cond_actions[_cond] ) {
							case 3 {
								host( "working/mailbox1.rl", 34 ) ${ headName.append(={( deref( data, p ))}=); }$
							}
							case 4 {
								host( "working/mailbox1.rl", 37 ) ${ headContent.append(={( deref( data, p ))}=); }$
							}
							case 1 {
								host( "working/mailbox1.rl", 53 ) ${
									perf_printf("NEW MESSAGE\n");
								}$
							}
							case 2 {
								host( "working/mailbox1.rl", 58 ) ${
									perf_printf("\n");
								}$
							}
							case 6 {
								host( "working/mailbox1.rl", 40 ) ${
									/* Terminate the buffers. */
									headName.append(0);
									headContent.append(0);
									
									/* Print the header. Interesting headers. */
									perf_printf("%s:%s\n", headName.data, headContent.data);
									
									/* Clear for the next time we use them. */
									headName.clear();
									headContent.clear();
								}$
								host( "working/mailbox1.rl", 34 ) ${ headName.append(={( deref( data, p ))}=); }$
							}
							case 5 {
								host( "working/mailbox1.rl", 40 ) ${
									/* Terminate the buffers. */
									headName.append(0);
									headContent.append(0);
									
									/* Print the header. Interesting headers. */
									perf_printf("%s:%s\n", headName.data, headContent.data);
									
									/* Clear for the next time we use them. */
									headName.clear();
									headContent.clear();
								}$
								host( "working/mailbox1.rl", 58 ) ${
									perf_printf("\n");
								}$
							}
						}
						
						if ( host( "-", 1 ) @{this->}@ -> cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/mailbox1.rl", 122 ) @{
		}
	}
	
	int MBox::finish( )
	{
		if ( cs == MBox_error )
		return -1;
		if ( cs >= MBox_first_final )
		return 1;
		return 0;
	}
	
	MBox mbox;
	
	void test( const char *buf )
	{
		int len = strlen( buf );
		mbox.execute( buf, len );
		if ( mbox.finish() > 0 ) {
			perf_printf("ACCEPT\n");
		}
		else {
			perf_printf("FAIL\n");
		}
	}
	
	
	int main()
	{
		test(
		"From email address goes here Wed Nov 28 13:30:05 2001 -0500\n"
		"Header1: this is the header contents\n"
		" there is more on the second line\n"
		"	and more on the third line.\n"
		"Header2: slkdj\n"
		"\n"
		"This is the message data\n"
		"\n"
		"From email Wed Nov 28 13:30:05 2001 -0500\n"
		"Header: \n"
		"\n"
		"mail message\n"
		"\n"
		);
		
		test(
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"\n"
		"There are no headers. \n"
		"\n"
		"From email Wed Nov 28 13:30:05 EST 2000\n"
		"\n"
		"There are no headers.\n"
		"\n"
		);
		
		test(
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"Header:alsdj\n"
		"\n"
		"Header:\n"
		"salkfj\n"
		"\n"
		"There are no headers. \n"
		"\n"
		);
		
		test(
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"Header:alsdj\n"
		"\n"
		"Header:\n"
		"salkfj\n"
		"\n"
		"There are no headers. \n"
		"\n"
		">From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"\n"
		);
		
		test(
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"Header:alsdj\n"
		"\n"
		"Header:\n"
		"salkfj\n"
		"\n"
		"There are no headers. \n"
		"\n"
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"\n"
		);
		
		test(
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"Header:alsdj\n"
		"\n"
		"Header:\n"
		"salkfj\n"
		"\n"
		"There are no headers. \n"
		"\n"
		"From user@@host.dom Wed Nov 28 13:30:05 2001\n"
		"\n"
		"\n"
		);
		
		return 0;
	}
	
}@