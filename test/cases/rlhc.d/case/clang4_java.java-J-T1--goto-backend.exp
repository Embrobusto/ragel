class clang4_java
{
	int pos ;
	int line ;
	
	
	
	
	
	private static short  _clang_key_offsets [] = { 0, 0, 5, 10, 13, 17, 22, 25, 27, 33, 36, 56, 76, 96, 117, 138, 157, 176, 196, 0 ,  };
	private static char  _clang_trans_keys [] = { 10, 34, 92, 0, 255, 10, 39, 92, 0, 255, 10, 0, 255, 10, 33, 0, 255, 10, 33, 47, 0, 255, 10, 0, 255, 48, 57, 48, 57, 65, 70, 97, 102, 10, 0, 255, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0,  };
	private static byte  _clang_single_lengths [] = { 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 ,  };
	private static byte  _clang_range_lengths [] = { 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 ,  };
	private static short  _clang_index_offsets [] = { 0, 0, 5, 10, 13, 17, 22, 25, 27, 31, 34, 48, 62, 76, 91, 106, 119, 132, 146, 0 ,  };
	private static byte  _clang_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static short  _clang_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0 ,  };
	private static byte  _clang_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _clang_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _clang_cond_targs [] = { 1, 12, 9, 1, 0, 2, 12, 3, 2, 0, 2, 2, 0, 4, 5, 4, 0, 4, 5, 10, 4, 0, 10, 6, 0, 15, 0, 18, 18, 18, 0, 1, 1, 0, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 ,  };
	private static byte  _clang_cond_actions [] = { 2, 0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 0, 4, 4, 4, 0, 2, 1, 0, 3, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 7, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 11, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 7, 0, 9, 9, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 15, 17, 17, 1, 16, 16, 0, 16, 1, 16, 16, 16, 16, 16, 14, 19, 21, 21, 20, 20, 20, 1, 20, 20, 20, 20, 20, 18, 23, 25, 25, 24, 1, 24, 1, 24, 1, 24, 1, 24, 22, 15, 17, 17, 1, 16, 16, 16, 1, 16, 16, 16, 16, 16, 14, 27, 29, 29, 28, 28, 28, 1, 28, 1, 28, 28, 1, 28, 28, 26, 0 ,  };
	private static byte  _clang_eof_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 ,  };
	private static byte  _clang_nfa_targs [] = { 0, 0 ,  };
	private static byte  _clang_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _clang_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _clang_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  clang_start  = 10;
	private static int  clang_first_final  = 10;
	private static int  clang_error  = 0;
	private static int  clang_en_main  = 10;
	int cs;
	
	void init()
	{
		pos = 0;
		line = 1;
		{
			cs = (int)clang_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = _clang_key_offsets[cs] ;
					_trans = (int )_clang_index_offsets[cs];
					_klen = (int)_clang_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _clang_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _clang_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_clang_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _clang_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _clang_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _clang_trans_offsets[_trans] ;
					_klen = (int)_clang_trans_lengths[_trans];
					_cond = (int )_clang_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_clang_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_clang_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_clang_cond_targs[_cond];
					if ( _clang_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					switch ( _clang_cond_actions[_cond]  ) {
						case 1 :
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 5 :
						{
							blen = 0;
							
						}
						
						break;
						case 3 :
						{
							line = line + 1;
							
						}
						
						break;
						case 22 :
						{
							System.out.print( "ident(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 10 :
						{
							System.out.print( "literal(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 18 :
						{
							System.out.print( "float(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 14 :
						{
							System.out.print( "int(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 26 :
						{
							System.out.print( "hex(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 6 :
						{
							System.out.print( "symbol(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						
						break;
						case 2 :
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 4 :
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 25 :
						{
							System.out.print( "ident(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 23 :
						{
							System.out.print( "ident(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 13 :
						{
							System.out.print( "literal(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 11 :
						{
							System.out.print( "literal(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 21 :
						{
							System.out.print( "float(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 19 :
						{
							System.out.print( "float(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 17 :
						{
							System.out.print( "int(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 15 :
						{
							System.out.print( "int(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 29 :
						{
							System.out.print( "hex(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 27 :
						{
							System.out.print( "hex(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 9 :
						{
							System.out.print( "symbol(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						
						break;
						case 7 :
						{
							System.out.print( "symbol(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							line = line + 1;
							
						}
						
						break;
						case 24 :
						{
							System.out.print( "ident(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 12 :
						{
							System.out.print( "literal(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 20 :
						{
							System.out.print( "float(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 16 :
						{
							System.out.print( "int(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 28 :
						{
							System.out.print( "hex(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						case 8 :
						{
							System.out.print( "symbol(" );
							System.out.print( line );
							System.out.print( "," );
							System.out.print( blen );
							System.out.print( "): " );
							System.out.print( new String( buffer, 0, blen ) );
							System.out.print( "\n" );
							
						}
						{
							blen = 0;
							
						}
						{
							buffer[blen] = (( data[p ]));
							blen += 1;
							
						}
						
						break;
						
					}
					
					case 4:
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					if ( p == eof  )
					{
						switch ( _clang_eof_actions[cs]  ) {
							case 22 :
							{
								System.out.print( "ident(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							case 10 :
							{
								System.out.print( "literal(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							case 18 :
							{
								System.out.print( "float(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							case 14 :
							{
								System.out.print( "int(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							case 26 :
							{
								System.out.print( "hex(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							case 6 :
							{
								System.out.print( "symbol(" );
								System.out.print( line );
								System.out.print( "," );
								System.out.print( blen );
								System.out.print( "): " );
								System.out.print( new String( buffer, 0, blen ) );
								System.out.print( "\n" );
								
							}
							
							break;
							
						}
						
					}
					
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= clang_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
		"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
	};
	
	static final int inplen = 2;
	
	public static void main (String[] args)
	{
		clang4_java machine = new clang4_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
