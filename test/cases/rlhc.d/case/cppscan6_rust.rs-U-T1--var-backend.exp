static mut ts : i32
= 0;
static mut te : i32
= 0;
static mut act : i32 = 0;
static mut token : i32 = 0;





static _scanner_key_offsets: [i16 ; 37] = [ 0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0 , 0 ];
static _scanner_trans_keys: [u8 ; 149] = [ 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0 , 0 ];
static _scanner_single_lengths: [i8 ; 37] = [ 0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0 , 0 ];
static _scanner_range_lengths: [i8 ; 37] = [ 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0 , 0 ];
static _scanner_index_offsets: [i16 ; 37] = [ 0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0 , 0 ];
static _scanner_trans_cond_spaces: [i8 ; 188] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _scanner_trans_offsets: [i16 ; 188] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0 , 0 ];
static _scanner_trans_lengths: [i8 ; 188] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _scanner_cond_keys: [i8 ; 188] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_cond_targs: [i8 ; 188] = [ 12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 , 0 ];
static _scanner_cond_actions: [i8 ; 188] = [ 1, 2, 0, 0, 0, 1, 3, 0, 0, 0, 5, 4, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 0, 7, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 13, 0, 0, 14, 0, 0, 0, 11, 13, 11, 0, 11, 0, 11, 0, 15, 0, 17, 16, 18, 16, 19, 20, 16, 21, 16, 22, 23, 16, 24, 25, 0, 16, 27, 26, 28, 0, 29, 16, 0, 31, 31, 0, 31, 31, 29, 30, 31, 31, 31, 31, 0, 30, 0, 0, 32, 16, 29, 0, 35, 35, 0, 35, 35, 0, 34, 33, 29, 0, 37, 37, 0, 37, 37, 34, 36, 39, 39, 39, 39, 0, 0, 0, 38, 29, 0, 35, 35, 0, 35, 35, 13, 33, 40, 16, 41, 16, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 42, 43, 16, 44, 45, 16, 1, 1, 1, 1, 4, 1, 1, 4, 4, 4, 8, 15, 16, 16, 16, 16, 16, 16, 26, 16, 30, 30, 16, 33, 36, 38, 33, 16, 16, 42, 42, 16, 16, 0 , 0 ];
static _scanner_to_state_actions: [i8 ; 37] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_from_state_actions: [i8 ; 37] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_eof_trans_indexed: [i8 ; 37] = [ 0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0 , 0 ];
static _scanner_eof_trans_direct: [i16 ; 37] = [ 0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0 , 0 ];
static _scanner_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_offsets: [i8 ; 37] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static scanner_start : i32 = 12;
static scanner_first_final : i32 = 12;
static scanner_error : i32 = 0;
static scanner_en_main : i32 = 12;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( scanner_start ) as i32;
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _klen = 0;
		let mut _keys :i32 = 0;
		let mut _ckeys :i32 = 0;
		let mut _cpc = 0;
		let mut _trans = 0;
		let mut _cond  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _scanner_eof_trans_direct[(cs) as usize]> 0  ) {
								{
									_trans = ( _scanner_eof_trans_direct[(cs) as usize] ) as u32- 1;
									_cond = ( _scanner_trans_offsets[(_trans) as usize] ) as u32;
									_have = 1;
								}
								
							}
							if ( _have == 0  ) {
								{
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							match ( _scanner_from_state_actions[(cs) as usize] ) {
								10  => {
									{{ts = p;
										}}
									
								}
								
								_ => {}
							}
							_keys = ( _scanner_key_offsets[(cs) as usize] ) as i32;
							_trans = ( _scanner_index_offsets[(cs) as usize] ) as u32;
							_have = 0;
							_klen = ( _scanner_single_lengths[(cs) as usize] ) as i32;
							if ( _klen > 0  ) {
								{
									let mut _lower :i32 = 0;
									let mut _mid :i32 = 0;
									let mut _upper :i32 = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
									{
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( ( data[(p ) as usize]
										) < _scanner_trans_keys[(_mid ) as usize]
										) {
											_upper = _mid - 1;
											
										}
										else if ( ( data[(p ) as usize]
										) > _scanner_trans_keys[(_mid ) as usize]
										) {
											_lower = _mid + 1;
											
										}
										else {
											{
												_trans += ( (_mid - _keys) ) as u32;
												_have = 1;
											}
											
										}
									}
									
									if ( _have == 0  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
										}
										
									}
								}
								
								
							}
							if ( _have == 0  ) {
								{
									_klen = ( _scanner_range_lengths[(cs) as usize] ) as i32;
									if ( _klen > 0  ) {
										{
											let mut _lower :i32 = 0;
											let mut _mid :i32 = 0;
											let mut _upper :i32 = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
											{
												_mid = _lower + (((_upper-_lower) >> 1) & !1
												);
												if ( ( data[(p ) as usize]
												) < _scanner_trans_keys[(_mid ) as usize]
												) {
													_upper = _mid - 2;
													
												}
												else if ( ( data[(p ) as usize]
												) > _scanner_trans_keys[(_mid + 1 ) as usize]
												) {
													_lower = _mid + 2;
													
												}
												else {
													{
														_trans += ( ((_mid - _keys)>>1) ) as u32;
														_have = 1;
													}
													
												}
											}
											
											if ( _have == 0  ) {
												_trans += ( _klen ) as u32;
												
											}
										}
										
									}
								}
								
								
							}
							_ckeys = ( _scanner_trans_offsets[(_trans) as usize] ) as i32;
							_klen = ( _scanner_trans_lengths[(_trans) as usize] ) as i32;
							_cond = ( _scanner_trans_offsets[(_trans) as usize] ) as u32;
							_have = 0;
							_cpc = 0;
							{
								let mut _lower :i32 = 0;
								let mut _mid :i32 = 0;
								let mut _upper :i32 = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < ( _scanner_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_upper = _mid - 1;
										
									}
									else if ( _cpc > ( _scanner_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_lower = _mid + 1;
										
									}
									else {
										{
											_cond += ( (_mid - _ckeys) ) as u32;
											_have = 1;
										}
										
									}
								}
								
								if ( _have == 0  ) {
									{
										cs = 0;
										_cont = 0;
									}
									
								}
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _scanner_cond_targs[(_cond) as usize] ) as i32;
							match ( _scanner_cond_actions[(_cond) as usize] ) {
								12  => {
									{{te = p+1;
										}}
									
								}
								3  => {
									{{te = p+1;
											{token = 193;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								2  => {
									{{te = p+1;
											{token = 192;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								31  => {
									{{te = p+1;
											{token = 194;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								35  => {
									{{te = p+1;
											{token = 218;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								37  => {
									{{te = p+1;
											{token = 219;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								39  => {
									{{te = p+1;
											{token = 220;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								40  => {
									{{te = p+1;
											{token = 197;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								41  => {
									{{te = p+1;
											{token = 223;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								17  => {
									{{te = p+1;
											{token = 224;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								19  => {
									{{te = p+1;
											{token = 225;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								45  => {
									{{te = p+1;
											{token = 226;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								21  => {
									{{te = p+1;
											{token = 227;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								32  => {
									{{te = p+1;
											{token = 228;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								18  => {
									{{te = p+1;
											{token = 229;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								23  => {
									{{te = p+1;
											{token = 230;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								25  => {
									{{te = p+1;
											{token = 231;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								20  => {
									{{te = p+1;
											{token = 232;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								43  => {
									{{te = p+1;
											{token = 233;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								44  => {
									{{te = p+1;
											{token = 234;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								22  => {
									{{te = p+1;
											{token = 212;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								24  => {
									{{te = p+1;
											{token = 213;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								27  => {
									{{te = p+1;
											{token = 214;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								28  => {
									{{te = p+1;
											{token = 215;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								5  => {
									{{te = p+1;
											{token = 240;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								11  => {
									{{te = p+1;
											{token = ( ( data[ts as usize] ) as i32 ) 
												;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								6  => {
									{{te = p+1;
											{token = 242;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								7  => {
									{{te = p+1;
											{token = 242;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								42  => {
									{{te = p;
											p = p - 1;
											{token = 195;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								30  => {
									{{te = p;
											p = p - 1;
											{token = 194;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								33  => {
									{{te = p;
											p = p - 1;
											{token = 218;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								36  => {
									{{te = p;
											p = p - 1;
											{token = 219;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								38  => {
									{{te = p;
											p = p - 1;
											{token = 220;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								26  => {
									{{te = p;
											p = p - 1;
											{token = 211;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								16  => {
									{{te = p;
											p = p - 1;
											{token = ( ( data[ts as usize] ) as i32 ) 
												;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								15  => {
									{{te = p;
											p = p - 1;
											{token = 241;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								8  => {
									{{p = ((te))-1;
											{token = 218;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								4  => {
									{{p = ((te))-1;
											{token = ( ( data[ts as usize] ) as i32 ) 
												;
												print!( "{}", "<" );
												print!( "{}", token );
												print!( "{}", "> " );
												let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
													Ok(v) => v,
													Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
												};
												print!( "{}", s );
												print!( "{}", "\n" );
											}
										}}
									
								}
								1  => {
									{{match ( act  ) {
												0  => {
													{{cs = 0;
														}}
													
												}
												3  => {
													p = ((te))-1;
													{token = 195;
														print!( "{}", "<" );
														print!( "{}", token );
														print!( "{}", "> " );
														let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
															Ok(v) => v,
															Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
														};
														print!( "{}", s );
														print!( "{}", "\n" );
													}
													
												}
												4  => {
													p = ((te))-1;
													{token = 194;
														print!( "{}", "<" );
														print!( "{}", token );
														print!( "{}", "> " );
														let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
															Ok(v) => v,
															Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
														};
														print!( "{}", s );
														print!( "{}", "\n" );
													}
													
												}
												5  => {
													p = ((te))-1;
													{token = 218;
														print!( "{}", "<" );
														print!( "{}", token );
														print!( "{}", "> " );
														let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
															Ok(v) => v,
															Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
														};
														print!( "{}", s );
														print!( "{}", "\n" );
													}
													
												}
												6  => {
													p = ((te))-1;
													{token = 219;
														print!( "{}", "<" );
														print!( "{}", token );
														print!( "{}", "> " );
														let s = match std::str::from_utf8(&data[ts as usize .. te as usize]) {
															Ok(v) => v,
															Err(e) => panic!("Invalid UTF-8 sequence: {}", e),
														};
														print!( "{}", s );
														print!( "{}", "\n" );
													}
													
												}
												
												_ => {}
											}
										}
									}
									
								}
								14  => {
									{{te = p+1;
										}}
									{{act = 3;
										}}
									
								}
								29  => {
									{{te = p+1;
										}}
									{{act = 4;
										}}
									
								}
								13  => {
									{{te = p+1;
										}}
									{{act = 5;
										}}
									
								}
								34  => {
									{{te = p+1;
										}}
									{{act = 6;
										}}
									
								}
								
								_ => {}
							}
							match ( _scanner_to_state_actions[(cs) as usize] ) {
								9  => {
									{{ts = 0;
										}}
									{{act = 0;
										}}
									
								}
								
								_ => {}
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= scanner_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22".to_string() ); }
	unsafe { m( "'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/".to_string() ); }
	unsafe { m( "'\n'\n".to_string() ); }
}

