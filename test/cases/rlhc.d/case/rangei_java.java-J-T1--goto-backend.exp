class rangei_java
{






	private static byte  _rangei_key_offsets [] = { 0, 0, 4, 8, 12, 16, 22, 24, 0 ,  };
	private static char  _rangei_trans_keys [] = { 65, 90, 97, 122, 65, 90, 97, 122, 60, 93, 97, 122, 65, 90, 94, 125, 65, 69, 86, 101, 118, 122, 60, 125, 0,  };
	private static byte  _rangei_single_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_range_lengths [] = { 0, 2, 2, 2, 2, 3, 1, 0, 0 ,  };
	private static byte  _rangei_index_offsets [] = { 0, 0, 3, 6, 9, 12, 16, 18, 0 ,  };
	private static byte  _rangei_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _rangei_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 ,  };
	private static byte  _rangei_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _rangei_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_cond_targs [] = { 2, 2, 0, 3, 3, 0, 4, 4, 0, 5, 5, 0, 6, 6, 6, 0, 7, 0, 0, 0 ,  };
	private static byte  _rangei_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_nfa_targs [] = { 0, 0 ,  };
	private static byte  _rangei_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _rangei_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _rangei_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  rangei_start  = 1;
	private static int  rangei_first_final  = 7;
	private static int  rangei_error  = 0;
	private static int  rangei_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)rangei_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = _rangei_key_offsets[cs] ;
					_trans = (int )_rangei_index_offsets[cs];
					_klen = (int)_rangei_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _rangei_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _rangei_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_rangei_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _rangei_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _rangei_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _rangei_trans_offsets[_trans] ;
					_klen = (int)_rangei_trans_lengths[_trans];
					_cond = (int )_rangei_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_rangei_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_rangei_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_rangei_cond_targs[_cond];
					
					case 4:
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= rangei_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"AaBbAa",
		"Aa`bAa",
		"AaB@Aa",
		"AaBbMa",
		"AaBbma",
	};
	
	static final int inplen = 5;
	
	public static void main (String[] args)
	{
		rangei_java machine = new rangei_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
