host( "working/rangei_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class rangei_java
	{
		
		
		
		
		
		
	}@
	array s8 _rangei_key_offsets( 0, 24 ) = { 0, 0, 4, 8, 12, 16, 22, 24, 0 };
	
	array char _rangei_trans_keys( 0, 125 ) = { u(65), u(90), u(97), u(122), u(65), u(90), u(97), u(122), u(60), u(93), u(97), u(122), u(65), u(90), u(94), u(125), u(65), u(69), u(86), u(101), u(118), u(122), u(60), u(125), u(0) };
	
	array s8 _rangei_single_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _rangei_range_lengths( 0, 3 ) = { 0, 2, 2, 2, 2, 3, 1, 0, 0 };
	
	array s8 _rangei_index_offsets( 0, 18 ) = { 0, 0, 3, 6, 9, 12, 16, 18, 0 };
	
	array s8 _rangei_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _rangei_trans_offsets( 0, 18 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 };
	
	array s8 _rangei_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _rangei_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _rangei_cond_targs( 0, 7 ) = { 2, 2, 0, 3, 3, 0, 4, 4, 0, 5, 5, 0, 6, 6, 6, 0, 7, 0, 0, 0 };
	
	array s8 _rangei_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _rangei_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _rangei_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _rangei_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _rangei_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int rangei_start = 1;
	value int rangei_first_final = 7;
	value int rangei_error = 0;
	
	value int rangei_en_main = 1;
	
	host( "working/rangei_java.rl", 27 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)rangei_start;
		}
		host( "working/rangei_java.rl", 32 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			String _s;
		}@
		{
			int _klen;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			uint _trans;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _rangei_trans_keys, _rangei_key_offsets[cs] );
						_trans = cast(uint)_rangei_index_offsets[cs];
						_have = 0;
						
						_klen = cast(int)_rangei_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _rangei_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _rangei_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_rangei_range_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _rangei_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _rangei_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _rangei_cond_keys, _rangei_trans_offsets[_trans] );
						_klen = cast(int)_rangei_trans_lengths[_trans];
						_cond = cast(uint)_rangei_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _rangei_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _rangei_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						cs = cast(int)_rangei_cond_targs[_cond];
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/rangei_java.rl", 43 ) @{
		}
		
		void finish( )
		{
			if ( cs >= rangei_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"AaBbAa",
			"Aa`bAa",
			"AaB@@Aa",
			"AaBbMa",
			"AaBbma",
		};
		
		static final int inplen = 5;
		
		public static void main (String[] args)
		{
			rangei_java machine = new rangei_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@