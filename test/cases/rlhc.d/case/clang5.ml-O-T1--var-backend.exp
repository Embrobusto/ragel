(*
* @LANG: ocaml
*)

let id x = x
let fail fmt = Printf.ksprintf failwith fmt
let pr fmt = Printf.ksprintf print_endline fmt

let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
let case = ref 0
let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()




let _clang_key_offsets : int array = [|
0; 0; 3; 4; 7; 8; 9; 11; 17; 19; 22; 42; 44; 48; 50; 53; 59; 66; 0 ; 
|]
let _clang_trans_keys : int array = [|
10; 34; 92; 10; 10; 39; 92; 10; 10; 48; 57; 48; 57; 65; 70; 97; 102; 10; 42; 10; 42; 47; 10; 34; 39; 47; 48; 95; 33; 46; 49; 57; 58; 64; 65; 90; 91; 96; 97; 122; 123; 126; 42; 47; 46; 120; 48; 57; 48; 57; 46; 48; 57; 48; 57; 65; 70; 97; 102; 95; 48; 57; 65; 90; 97; 122; 0 ; 
|]
let _clang_single_lengths : int array = [|
0; 3; 1; 3; 1; 1; 0; 0; 2; 3; 6; 2; 2; 0; 1; 0; 1; 0; 0 ; 
|]
let _clang_range_lengths : int array = [|
0; 0; 0; 0; 0; 0; 1; 3; 0; 0; 7; 0; 1; 1; 1; 3; 3; 0; 0 ; 
|]
let _clang_index_offsets : int array = [|
0; 0; 4; 6; 10; 12; 14; 16; 20; 23; 27; 41; 44; 48; 50; 53; 57; 62; 0 ; 
|]
let _clang_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; 0 ; 
|]
let _clang_trans_offsets : int array = [|
0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 0 ; 
|]
let _clang_trans_lengths : int array = [|
1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0 ; 
|]
let _clang_cond_keys : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _clang_cond_targs : int array = [|
1; 10; 2; 1; 1; 1; 3; 10; 4; 3; 3; 3; 10; 5; 13; 10; 15; 15; 15; 10; 8; 9; 8; 8; 9; 17; 8; 10; 1; 3; 11; 12; 16; 10; 14; 10; 16; 10; 16; 10; 10; 10; 5; 10; 6; 7; 14; 10; 13; 10; 6; 14; 10; 15; 15; 15; 10; 16; 16; 16; 16; 10; 0; 10; 10; 10; 10; 10; 10; 10; 10; 10; 0 ; 
|]
let _clang_cond_actions : int array = [|
1; 2; 0; 0; 1; 0; 1; 3; 0; 0; 1; 0; 5; 0; 0; 6; 0; 0; 0; 6; 1; 0; 0; 1; 0; 8; 0; 11; 0; 0; 13; 13; 0; 12; 13; 12; 0; 12; 0; 12; 10; 15; 0; 14; 0; 0; 13; 16; 0; 17; 0; 13; 16; 0; 0; 0; 18; 0; 0; 0; 0; 19; 0; 4; 6; 6; 14; 16; 17; 16; 18; 19; 0 ; 
|]
let _clang_to_state_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 7; 0; 7; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _clang_from_state_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 9; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _clang_eof_trans_indexed : int array = [|
0; 0; 0; 0; 0; 16; 18; 18; 0; 0; 0; 22; 24; 25; 24; 26; 27; 0; 0 ; 
|]
let _clang_eof_trans_direct : int array = [|
0; 0; 0; 0; 0; 64; 65; 66; 0; 0; 0; 67; 68; 69; 70; 71; 72; 0; 0 ; 
|]
let _clang_nfa_targs : int array = [|
0; 0 ; 
|]
let _clang_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _clang_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _clang_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let clang_start  : int  = 10
let clang_first_final  : int  = 10
let clang_error  : int  = 0
let clang_en_c_comment  : int  = 8
let clang_en_main  : int  = 10
let clang data =
let cs = ref 0 in
let p = ref 0 in
let pe = ref (String.length data) in
let ts = ref 0 in
let te = ref 0 in
let eof = pe in 
let curlin = ref 1 in

begin
	cs  := clang_start;
	ts  := 0;
	te  := 0;
	
end;
begin
	let _klen : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _ckeys : int ref = ref 0 in
	let _cpc : int  ref = ref 0 in
	let _trans : int  ref = ref 0 in
	let _cond  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if p.contents= eof.contents then
				begin
					begin
						if _clang_eof_trans_direct.(cs.contents)> 0  then
						begin
							begin
								_trans  := _clang_eof_trans_direct.(cs.contents)- 1;
								_cond  := _clang_trans_offsets.(_trans.contents);
								_have  := 1;
								
							end;
							
						end
						;if _have.contents= 0  then
						begin
							begin
							
							end;
							
						end
						;
					end;
					
				end
				;if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						if _clang_from_state_actions.(cs.contents) = 9  then
						begin
							begin
								begin
									ts  := p.contents;
									
								end;
								
							end;
							
						end
						;
						_keys  := _clang_key_offsets.(cs.contents);
						_trans  := _clang_index_offsets.(cs.contents);
						_have  := 0;
						_klen  := _clang_single_lengths.(cs.contents);
						if _klen.contents> 0  then
						begin
							begin
								let _lower : int ref = ref 0 in
								let _mid : int ref = ref 0 in
								let _upper : int ref = ref 0 in
								_lower  := _keys.contents;
								_upper  := _keys.contents+ _klen.contents- 1;
								while _upper.contents>= _lower.contents&& _have.contents= 0  do
								begin
									_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
									if ( Char.code data.[p.contents] )< _clang_trans_keys.( _mid.contents ) then
									begin
										_upper  := _mid.contents- 1;
										
									end
									else if ( Char.code data.[p.contents] )> _clang_trans_keys.( _mid.contents ) then
									begin
										_lower  := _mid.contents+ 1;
										
									end
									else
									begin
										begin
											_trans  := _trans.contents + ( _mid.contents- _keys.contents );
											_have  := 1;
											
										end;
										
									end
									;
								end;
								
								done;
								if _have.contents= 0  then
								begin
									begin
										_keys  := _keys.contents + _klen.contents;
										_trans  := _trans.contents + _klen.contents;
										
									end;
									
								end
								;
							end;
							
						end
						;if _have.contents= 0  then
						begin
							begin
								_klen  := _clang_range_lengths.(cs.contents);
								if _klen.contents> 0  then
								begin
									begin
										let _lower : int ref = ref 0 in
										let _mid : int ref = ref 0 in
										let _upper : int ref = ref 0 in
										_lower  := _keys.contents;
										_upper  := _keys.contents+ ( _klen.contents lsl 1 )- 2;
										while _have.contents= 0 && _lower.contents<= _upper.contents do
										begin
											_mid  := _lower.contents+ ( ( ( _upper.contents-_lower.contents ) asr 1 ) land  lnot 1 );
											if ( Char.code data.[p.contents] )< _clang_trans_keys.( _mid.contents ) then
											begin
												_upper  := _mid.contents- 2;
												
											end
											else if ( Char.code data.[p.contents] )> _clang_trans_keys.( _mid.contents+ 1  ) then
											begin
												_lower  := _mid.contents+ 2;
												
											end
											else
											begin
												begin
													_trans  := _trans.contents + ( ( _mid.contents- _keys.contents ) asr 1 );
													_have  := 1;
													
												end;
												
											end
											;
										end;
										
										done;
										if _have.contents= 0  then
										begin
											_trans  := _trans.contents + _klen.contents;
											
										end
										;
									end;
									
								end
								;
							end;
							
						end
						;_ckeys  := _clang_trans_offsets.(_trans.contents);
						_klen  := _clang_trans_lengths.(_trans.contents);
						_cond  := _clang_trans_offsets.(_trans.contents);
						_have  := 0;
						_cpc  := 0;
						begin
							let _lower : int ref = ref 0 in
							let _mid : int ref = ref 0 in
							let _upper : int ref = ref 0 in
							_lower  := _ckeys.contents;
							_upper  := _ckeys.contents+ _klen.contents- 1;
							while _have.contents= 0 && _lower.contents<= _upper.contents do
							begin
								_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
								if _cpc.contents< _clang_cond_keys.( _mid.contents ) then
								begin
									_upper  := _mid.contents- 1;
									
								end
								else if _cpc.contents> _clang_cond_keys.( _mid.contents ) then
								begin
									_lower  := _mid.contents+ 1;
									
								end
								else
								begin
									begin
										_cond  := _cond.contents + ( _mid.contents- _ckeys.contents );
										_have  := 1;
										
									end;
									
								end
								;
							end;
							
							done;
							if _have.contents= 0  then
							begin
								begin
									cs  := 0;
									_cont  := 0;
									
								end;
								
							end
							;
						end;
						
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _clang_cond_targs.(_cond.contents);
						if _clang_cond_actions.(_cond.contents) = 1  then
						begin
							begin
								incr curlin 
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 8  then
						begin
							begin
								begin
									cs  := 10;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 13  then
						begin
							begin
								begin
									te  := p.contents+1;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 12  then
						begin
							begin
								begin
									te  := p.contents+1;
									begin
										pr "symbol(%i): %c" !curlin data.[!ts];
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 3  then
						begin
							begin
								begin
									te  := p.contents+1;
									begin
										pr "single_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 2  then
						begin
							begin
								begin
									te  := p.contents+1;
									begin
										pr "double_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 10  then
						begin
							begin
								begin
									te  := p.contents+1;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 15  then
						begin
							begin
								begin
									te  := p.contents+1;
									begin
										begin
											cs  := 8;
											
										end;
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 14  then
						begin
							begin
								begin
									te  := p.contents;
									p  := p.contents- 1;
									begin
										pr "symbol(%i): %c" !curlin data.[!ts];
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 19  then
						begin
							begin
								begin
									te  := p.contents;
									p  := p.contents- 1;
									begin
										pr "ident(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 16  then
						begin
							begin
								begin
									te  := p.contents;
									p  := p.contents- 1;
									begin
										pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 17  then
						begin
							begin
								begin
									te  := p.contents;
									p  := p.contents- 1;
									begin
										pr "float(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 18  then
						begin
							begin
								begin
									te  := p.contents;
									p  := p.contents- 1;
									begin
										pr "hex(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 4  then
						begin
							begin
								begin
									p  := ( ( te.contents ) )-1;
									begin
										pr "symbol(%i): %c" !curlin data.[!ts];
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 6  then
						begin
							begin
								begin
									p  := ( ( te.contents ) )-1;
									begin
										pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										
									end;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 11  then
						begin
							begin
								incr curlin 
							end;
							begin
								begin
									te  := p.contents+1;
									
								end;
								
							end;
							
						end
						else if _clang_cond_actions.(_cond.contents) = 5  then
						begin
							begin
								incr curlin 
							end;
							begin
								begin
									te  := p.contents+1;
									
								end;
								
							end;
							
						end
						;
						if _clang_to_state_actions.(cs.contents) = 7  then
						begin
							begin
								begin
									ts  := 0;
									
								end;
								
							end;
							
						end
						;
						if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !cs < clang_first_final then
fail "atoi: cs %d < %d" !cs clang_first_final;
;;

let () =
clang "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n";
clang "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n";
()
;;


