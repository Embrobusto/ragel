package main
import "fmt"

var comm  byte ;
var top  int ;
var stack [32] int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _gotocallret_actions [] int8  = [] int8  { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0  }
var _gotocallret_eof_actions [] int8  = [] int8  { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0  }
var _gotocallret_nfa_targs [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _gotocallret_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var gotocallret_start  int  = 7
var gotocallret_first_final  int  = 7
var gotocallret_error  int  = 0
var gotocallret_en_garble_line  int  = 3
var gotocallret_en_alp_comm  int  = 5
var gotocallret_en_dig_comm  int  = 6
var gotocallret_en_main  int  = 7
func prepare() {

	{
		cs = int(gotocallret_start);
		top = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _acts int
		var  _nacts uint 
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume:
		switch cs  {
			case 7:
			switch {
				case ( data[p ]) > 57 :
				{
					if 97 <= ( data[p ]) && ( data[p ]) <= 122  {
						{
							goto ctr10;
						}
						
					}
				} 
				case ( data[p ]) >= 48 :
				{
					goto ctr10;
				}
				
			}
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			case 1:
			if ( data[p ]) == 32  {
				{
					goto ctr1;
				}
				
			}
			{
				goto ctr0;
			}
			case 2:
			if ( data[p ]) == 10  {
				{
					goto ctr2;
				}
				
			}
			{
				goto ctr0;
			}
			case 3:
			if ( data[p ]) == 10  {
				{
					goto ctr4;
				}
				
			}
			{
				goto ctr3;
			}
			case 4:
			if ( data[p ]) == 10  {
				{
					goto ctr6;
				}
				
			}
			{
				goto ctr5;
			}
			case 8:
			{
				goto ctr11;
			}
			case 5:
			switch {
				case ( data[p ]) > 90 :
				{
					if 97 <= ( data[p ]) && ( data[p ]) <= 122  {
						{
							goto ctr8;
						}
						
					}
				} 
				case ( data[p ]) >= 65 :
				{
					goto ctr8;
				}
				
			}
			{
				goto ctr7;
			}
			case 9:
			switch {
				case ( data[p ]) > 90 :
				{
					if 97 <= ( data[p ]) && ( data[p ]) <= 122  {
						{
							goto ctr8;
						}
						
					}
				} 
				case ( data[p ]) >= 65 :
				{
					goto ctr8;
				}
				
			}
			{
				goto ctr7;
			}
			case 6:
			if 48 <= ( data[p ]) && ( data[p ]) <= 57  {
				{
					goto ctr9;
				}
				
			}
			{
				goto ctr7;
			}
			case 10:
			if 48 <= ( data[p ]) && ( data[p ]) <= 57  {
				{
					goto ctr9;
				}
				
			}
			{
				goto ctr7;
			}
			
		}
		ctr11: cs = 0;
		goto _again;
		ctr0: cs = 0;
		goto f0;
		ctr7: cs = 0;
		goto f7;
		ctr10: cs = 1;
		goto f8;
		ctr1: cs = 2;
		goto f1;
		ctr5: cs = 4;
		goto _again;
		ctr3: cs = 4;
		goto f4;
		ctr2: cs = 7;
		goto f2;
		ctr4: cs = 8;
		goto f5;
		ctr6: cs = 8;
		goto f6;
		ctr8: cs = 9;
		goto _again;
		ctr9: cs = 10;
		goto _again;
		
		f4: _acts = int(1 );
		goto execFuncs;
		f6: _acts = int(3 );
		goto execFuncs;
		f7: _acts = int(7 );
		goto execFuncs;
		f8: _acts = int(9 );
		goto execFuncs;
		f2: _acts = int(11 );
		goto execFuncs;
		f0: _acts = int(13 );
		goto execFuncs;
		f5: _acts = int(15 );
		goto execFuncs;
		f1: _acts = int(18 );
		goto execFuncs;
		
		execFuncs:
		_nacts = uint(_gotocallret_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _gotocallret_actions[_acts ] {
					case 0:
					{fmt.Print( "error: garbling line\n" );}
					
					break;
					case 1:
					{cs = 7;}
					
					break;
					case 3:
					{{p = p - 1;
						} 
						{top-= 1;
							cs = stack[top];
						}
					}
					
					break;
					case 4:
					{if ( comm >= 97 ) {
							{stack[top] = cs;
								top += 1;
								cs = 5;
							}} else {
							{stack[top] = cs;
								top += 1;
								cs = 6;
							}}
					}
					
					break;
					case 5:
					{comm = (( data[p ]));
					}
					
					break;
					case 6:
					{fmt.Print( "prints\n" );}
					
					break;
					case 7:
					{fmt.Print( "correct command\n" );}
					
					break;
					case 8:
					{{p = p - 1;
						}
						cs = 3;}
					
					break;
					
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			
		}
		goto _again;
		
		_again:
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		_test_eof: {}
		if p == eof  {
			{
				var  __acts int
				var  __nacts uint 
				__acts = int(_gotocallret_eof_actions[cs] );
				__nacts = uint(_gotocallret_actions[__acts ]);
				__acts += 1;
				for __nacts > 0  {
					{
						switch _gotocallret_actions[__acts ] {
							case 2:
							{fmt.Print( "error: failed to recover\n" );}
							
							break;
							case 3:
							{{p = p - 1;
								} 
								{top-= 1;
									cs = stack[top];
								}
							}
							
							break;
							case 8:
							{{p = p - 1;
								}
								cs = 3;}
							
							break;
							
						}
						__acts += 1;
						__nacts -= 1;
					}
					
				}
			}
			
			
		}
		_out: {}
	}
}
func finish() {
	if cs >= gotocallret_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
