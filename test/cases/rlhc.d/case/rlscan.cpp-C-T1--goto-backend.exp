#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef PERF_TEST

/* Calibrated to 1s on yoho. */
#define perf_iters ( 240984ll * S )

int _perf_dummy = 0;
#define perf_cout(...) ( _perf_dummy += 1 )
#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )

#else

#define perf_cout(...) __VA_ARGS__
#define perf_loop

#endif

using namespace std;

void escapeXML( const char *data )
{
	while ( *data != 0 ) {
		switch ( *data ) {
			case '<': perf_cout( cout << "&lt;" ); break;
			case '>': perf_cout( cout << "&gt;" ); break;
			case '&': perf_cout( cout << "&amp;" ); break;
			default: perf_cout( cout << *data ); break;
		}
		data += 1;
	}
}

void escapeXML( char c )
{
	switch ( c ) {
		case '<': perf_cout( cout << "&lt;" ); break;
		case '>': perf_cout( cout << "&gt;" ); break;
		case '&': perf_cout( cout << "&amp;" ); break;
		default: perf_cout( cout << c ); break;
	}
}

void escapeXML( const char *data, int len )
{
	for ( const char *end = data + len; data != end; data++  ) {
		switch ( *data ) {
			case '<': perf_cout( cout << "&lt;" ); break;
			case '>': perf_cout( cout << "&gt;" ); break;
			case '&': perf_cout( cout << "&amp;" ); break;
			default: perf_cout( cout << *data ); break;
		}
	}
}

inline void write( const char *data )
{
	perf_cout( cout << data );
}

inline void write( char c )
{
	perf_cout( cout << c );
}

inline void write( const char *data, int len )
{
	perf_cout( cout.write( data, len ) );
}




static const char  _RagelScan_key_offsets [] = { 0, 0, 2, 2, 4, 4, 5, 7, 10, 12, 12, 14, 14, 15, 17, 17, 18, 20, 20, 22, 22, 28, 30, 30, 31, 36, 38, 39, 40, 42, 44, 44, 50, 52, 54, 56, 81, 83, 84, 86, 88, 91, 93, 99, 106, 108, 0 ,  };
static const char  _RagelScan_trans_keys [] = { 34, 92, 39, 92, 10, 0, 42, 0, 42, 47, 34, 92, 39, 92, 10, 34, 92, 10, 39, 92, 47, 92, 48, 57, 65, 70, 97, 102, 92, 93, 37, 0, 34, 37, 39, 47, 34, 92, 37, 123, 39, 92, 42, 47, 0, 34, 39, 47, 123, 125, 34, 92, 39, 92, 42, 47, 0, 10, 34, 35, 39, 47, 48, 91, 95, 123, 125, 33, 46, 49, 57, 58, 64, 65, 90, 92, 96, 97, 122, 124, 126, 34, 92, 10, 39, 92, 47, 92, 120, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 92, 93, 37, 0 ,  };
static const char  _RagelScan_single_lengths [] = { 0, 2, 0, 2, 0, 1, 2, 3, 2, 0, 2, 0, 1, 2, 0, 1, 2, 0, 2, 0, 0, 2, 0, 1, 5, 2, 1, 1, 2, 2, 0, 6, 2, 2, 2, 11, 2, 1, 2, 2, 1, 0, 0, 1, 2, 1, 0 ,  };
static const char  _RagelScan_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 1, 3, 3, 0, 0, 0 ,  };
static const short  _RagelScan_index_offsets [] = { 0, 0, 3, 4, 7, 8, 10, 13, 17, 20, 21, 24, 25, 27, 30, 31, 33, 36, 37, 40, 41, 45, 48, 49, 51, 57, 60, 62, 64, 67, 70, 71, 78, 81, 84, 87, 106, 109, 111, 114, 117, 120, 122, 126, 131, 134, 0 ,  };
static const char  _RagelScan_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const short  _RagelScan_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 0 ,  };
static const char  _RagelScan_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _RagelScan_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_cond_targs [] = { 24, 2, 1, 1, 24, 4, 3, 3, 24, 5, 0, 7, 6, 0, 7, 30, 6, 31, 9, 8, 8, 31, 11, 10, 10, 31, 12, 35, 14, 13, 13, 35, 15, 35, 17, 16, 16, 35, 19, 18, 18, 42, 42, 42, 35, 22, 35, 21, 21, 35, 35, 24, 25, 26, 28, 29, 24, 24, 2, 1, 27, 24, 24, 24, 24, 4, 3, 24, 5, 24, 0, 0, 32, 33, 34, 31, 31, 31, 31, 9, 8, 31, 11, 10, 31, 12, 31, 0, 35, 36, 37, 38, 39, 40, 44, 43, 35, 45, 35, 41, 35, 43, 35, 43, 35, 35, 35, 14, 13, 35, 15, 35, 17, 16, 35, 19, 18, 20, 41, 35, 41, 35, 42, 42, 42, 35, 43, 43, 43, 43, 35, 22, 35, 21, 23, 35, 24, 24, 24, 24, 24, 31, 31, 31, 31, 31, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 24, 24, 24, 24, 24, 31, 31, 31, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 0 ,  };
static const char  _RagelScan_cond_actions [] = { 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 6, 6, 0, 6, 7, 6, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 13, 0, 0, 0, 14, 0, 15, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0, 19, 12, 22, 23, 0, 23, 23, 21, 2, 0, 0, 0, 24, 26, 25, 3, 0, 0, 27, 0, 24, 0, 0, 23, 23, 23, 29, 30, 28, 9, 0, 0, 10, 0, 0, 32, 0, 31, 0, 34, 23, 23, 23, 23, 23, 23, 0, 36, 23, 35, 0, 35, 0, 35, 0, 35, 33, 13, 0, 0, 14, 0, 15, 0, 0, 16, 0, 0, 0, 0, 38, 0, 38, 0, 0, 0, 39, 0, 0, 0, 0, 40, 0, 18, 0, 0, 37, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 24, 24, 25, 24, 24, 31, 31, 31, 37, 37, 37, 37, 38, 38, 39, 40, 37, 37, 0 ,  };
static const char  _RagelScan_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_eof_trans_indexed [] = { 0, 25, 25, 25, 25, 25, 0, 0, 41, 41, 41, 41, 41, 53, 53, 53, 53, 53, 53, 53, 58, 53, 53, 53, 0, 31, 31, 32, 31, 31, 0, 0, 48, 48, 48, 0, 65, 65, 65, 65, 66, 66, 67, 68, 65, 65, 0 ,  };
static const short  _RagelScan_eof_trans_direct [] = { 0, 137, 138, 139, 140, 141, 0, 0, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 0, 158, 159, 160, 161, 162, 0, 0, 163, 164, 165, 0, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 0 ,  };
static const char  _RagelScan_nfa_targs [] = { 0, 0 ,  };
static const char  _RagelScan_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_nfa_push_actions [] = { 0, 0 ,  };
static const char  _RagelScan_nfa_pop_trans [] = { 0, 0 ,  };
static const int  RagelScan_start  = 24;
static const int  RagelScan_error  = 0;
static const int  RagelScan_en_c_comment  = 6;
static const int  RagelScan_en_ilscan  = 31;
static const int  RagelScan_en_rlscan  = 35;
static const int  RagelScan_en_main  = 24;
void test( const char *data )
{
	std::ios::sync_with_stdio(false);
	
	int cs, act;
	perf_loop
	{
		int len = strlen( data );
		const char *ts, *te;
		int stack[1], top;
		memset( stack, 0, sizeof(stack) );
		
		bool single_line = false;
		int inline_depth = 0;
		
		
		{
			cs = ( int ) RagelScan_start;
			top = 0;
			ts = 0;
			te = 0;
		}
		const char *p = data;
		const char *pe = data + len;
		const char *eof = pe;
		
		
		{
			int _klen;
			const char  *_keys;
			const char  *_ckeys;
			int _cpc;
			unsigned int _trans = 0;
			unsigned int _cond = 0;
			if ( p == pe  )
			goto _test_eof;
			
			if ( cs == 0  )
			goto _out;
			
			_resume :
			switch ( _RagelScan_from_state_actions[cs] ) {
				case 20 :
				{
					{
						ts = p;
						
					}
					
				}
				
				break;
				
			}
			_keys = _RagelScan_trans_keys + _RagelScan_key_offsets[cs];
			_trans = ( unsigned int  ) _RagelScan_index_offsets[cs];
			_klen = ( int ) _RagelScan_single_lengths[cs];
			if ( _klen > 0  )
			{
				const char  *_lower;
				const char  *_mid;
				const char  *_upper;
				_lower = _keys;
				_upper = _keys + _klen - 1;
				while ( 1 )
				{
					if ( _upper < _lower  )
					break;
					
					
					_mid = _lower + ((_upper-_lower)>> 1);
					if ( ((*( p  ))
					)< (*( _mid  ))
					)
					_upper = _mid - 1;
					
					else if ( ((*( p  ))
					)> (*( _mid  ))
					)
					_lower = _mid + 1;
					
					else
					{
						_trans += ( unsigned int  ) (_mid - _keys);
						goto _match;
					}
					
				}
				
				_keys += _klen;
				_trans += ( unsigned int  ) _klen;
			}
			
			
			_klen = ( int ) _RagelScan_range_lengths[cs];
			if ( _klen > 0  )
			{
				const char  *_lower;
				const char  *_mid;
				const char  *_upper;
				_lower = _keys;
				_upper = _keys + (_klen<<1)- 2;
				while ( 1 )
				{
					if ( _upper < _lower  )
					break;
					
					
					_mid = _lower + (((_upper-_lower)>> 1)& ~1);
					if ( ((*( p  ))
					)< (*( _mid  ))
					)
					_upper = _mid - 2;
					
					else if ( ((*( p  ))
					)> (*( _mid + 1  ))
					)
					_lower = _mid + 2;
					
					else
					{
						_trans += ( unsigned int  ) ((_mid - _keys)>>1);
						goto _match;
					}
					
				}
				
				_trans += ( unsigned int  ) _klen;
			}
			
			
			
			_match :
			_ckeys = _RagelScan_cond_keys + _RagelScan_trans_offsets[_trans];
			_klen = ( int ) _RagelScan_trans_lengths[_trans];
			_cond = ( unsigned int  ) _RagelScan_trans_offsets[_trans];
			_cpc = 0;
			{
				const char  *_lower;
				const char  *_mid;
				const char  *_upper;
				_lower = _ckeys;
				_upper = _ckeys + _klen - 1;
				while ( 1 )
				{
					if ( _upper < _lower  )
					break;
					
					
					_mid = _lower + ((_upper-_lower)>> 1);
					if ( _cpc < ( int ) (*( _mid  ))
					)
					_upper = _mid - 1;
					
					else if ( _cpc > ( int ) (*( _mid  ))
					)
					_lower = _mid + 1;
					
					else
					{
						_cond += ( unsigned int  ) (_mid - _ckeys);
						goto _match_cond;
					}
					
				}
				
				cs = 0;
				goto _again;
			}
			
			_match_cond :
			cs = ( int ) _RagelScan_cond_targs[_cond];
			if ( _RagelScan_cond_actions[_cond]== 0  )
			goto _again;
			
			
			switch ( _RagelScan_cond_actions[_cond] ) {
				case 6 :
				{
					escapeXML( (((*( p  ))
					)) ); 
				}
				
				break;
				case 23 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 10 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 9 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 32 :
				{
					{
						te = p+1;
						{
							write( "/*" );
							{
								stack[top] = cs;
								top += 1;
								cs = 6;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 11 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 29 :
				{
					{
						te = p+1;
						{
							write( '{' );
							inline_depth += 1; 
							
						}
						
					}
					
				}
				
				break;
				case 30 :
				{
					{
						te = p+1;
						{
							write( '}' );
							/* If dropping down to the last } then return 
							* to ragel code. */
							if ( --inline_depth == 0 ) {
								write( "</inline>\n" );
								{
									cs = 35;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 28 :
				{
					{
						te = p+1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 31 :
				{
					{
						te = p;
						p = p - 1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 8 :
				{
					{
						p = ((te))-1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 19 :
				{
					{
						te = p+1;
						{
							if ( !single_line ) {
								write( "</section>\n" );
								{
									cs = 24;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 34 :
				{
					{
						te = p+1;
						{
							if ( single_line ) {
								write( "</section>\n" );
								{
									cs = 24;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 14 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 15 :
				{
					{
						te = p+1;
						{
							write( "<single_lit>" );
							escapeXML( ts, te-ts );
							write( "</single_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 13 :
				{
					{
						te = p+1;
						{
							write( "<double_lit>" );
							escapeXML( ts, te-ts );
							write( "</double_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 18 :
				{
					{
						te = p+1;
						{
							write( "<or_lit>" );
							escapeXML( ts, te-ts );
							write( "</or_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 16 :
				{
					{
						te = p+1;
						{
							write( "<re_lit>" );
							escapeXML( ts, te-ts );
							write( "</re_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 36 :
				{
					{
						te = p+1;
						{
							inline_depth = 1;
							write( "<inline>{" );
							{
								cs = 31;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 35 :
				{
					{
						te = p+1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 33 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 40 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<word>" );
							write( ts, te-ts );
							write( "</word>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 38 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<int>" );
							write( ts, te-ts );
							write( "</int>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 39 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<hex>" );
							write( ts, te-ts );
							write( "</hex>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 37 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 17 :
				{
					{
						p = ((te))-1;
						{
							write( "<int>" );
							write( ts, te-ts );
							write( "</int>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 12 :
				{
					{
						p = ((te))-1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 3 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 2 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 27 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							{
								stack[top] = cs;
								top += 1;
								cs = 6;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 4 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 26 :
				{
					{
						te = p+1;
						{
							write( "<section>\n" );
							single_line = false;
							{
								cs = 35;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 21 :
				{
					{
						te = p+1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 22 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 25 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<section>\n" ); 
							single_line = true; 
							{
								cs = 35;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 24 :
				{
					{
						te = p;
						p = p - 1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 1 :
				{
					{
						p = ((te))-1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 7 :
				{
					escapeXML( (((*( p  ))
					)) ); 
				}
				{
					{
						top-= 1;
						cs = stack[top];
						goto _again;
					}
					
				}
				
				break;
				
			}
			
			_again :
			switch ( _RagelScan_to_state_actions[cs] ) {
				case 5 :
				{
					{
						ts = 0;
						
					}
					
				}
				
				break;
				
			}
			if ( cs == 0  )
			goto _out;
			
			p += 1;
			if ( p != pe  )
			goto _resume;
			
			
			_test_eof :
			{}
			if ( p == eof  )
			{
				if ( _RagelScan_eof_trans_direct[cs]> 0  )
				{
					_trans = ( unsigned int  ) _RagelScan_eof_trans_direct[cs]- 1;
					_cond = ( unsigned int  ) _RagelScan_trans_offsets[_trans];
					goto _match_cond;
				}
				
			}
			
			
			
			_out :
			{}
			
		}
	}
	
	if ( cs == RagelScan_error ) {
		/* Machine failed before finding a token. */
		perf_cout( cerr << "PARSE ERROR" << endl );
		exit(1);
	}
}

#define BUFSIZE 2048

int main()
{
	std::ios::sync_with_stdio(false);
	
	test(
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	);
	
	return 0;
}
