#line 1 "tmp.gmr"
#include <iostream>
using std::cout;
using std::endl;


#line 16 "tmp.rl"
enum token_type_e {
	tt_id,
	tt_equals,
	tt_semi,
	tt_pipe,
	tt_amp,
	tt_minus,
	tt_dot,
	tt_colon,
	tt_percent,
	tt_dollar,
	tt_plus,
	tt_number,
	tt_star,
	tt_question,
	tt_not,
	tt_andFSM,
	tt_orFSM,
	tt_open,
	tt_close
};

struct LangEl
{
	int line, lineEnd;
	int pos;
	
	int type;
	int state;
	LangEl *prev, *next;
};

struct Token : public LangEl
{
	const char *value;
};

struct Lel_start : public LangEl
{
	#line 32 "tmp.gmr"
	
	int si;
	#line 59 "tmp.rl"
};

struct Lel_M : public LangEl
{
	#line 36 "tmp.gmr"
	
	int mi;
	#line 67 "tmp.rl"
};

#define l__error 19
#define l_tt_id 0
#define l_tt_equals 1
#define l_tt_semi 2
#define l_tt_pipe 3
#define l_tt_amp 4
#define l_tt_minus 5
#define l_tt_dot 6
#define l_tt_colon 7
#define l_tt_percent 8
#define l_tt_dollar 9
#define l_tt_plus 10
#define l_tt_number 11
#define l_tt_star 12
#define l_tt_question 13
#define l_tt_not 14
#define l_tt_andFSM 15
#define l_tt_orFSM 16
#define l_tt_open 17
#define l_tt_close 18
#define l_start 23
#define l_M 24
#define l_A 25
#define l_E 26
#define l_T 27
#define l_N 28
#define l_K 29
#define l_F 30
#define l__start 31
#define l__eof 20

struct LangEl;

struct Parser
{
	Parser();
	
	void parseLangEl( LangEl *langEl );
	int done( );
	
	void push( LangEl *lel ) {
		lel->prev = stack;
		stack = lel;
	}
	LangEl *pop() {
		LangEl *ret = stack;
		stack = stack->prev;
		return ret;
	}
	int pop( int n );
	void rem( LangEl *lel, int n );
	LangEl *stack;
	int next;
	LangEl *redLel;
	LangEl *rhs[10];
	
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute(  LangEl *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};




static const int  Parser_start  = 1;
static const int  Parser_first_final  = 55;
static const int  Parser_error  = 0;
static const int  Parser_en_main  = 1;
static const char  _Parser_nfa_targs [] = { 0, 0 ,  };
static const char  _Parser_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Parser_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Parser_nfa_pop_trans [] = { 0, 0 ,  };
Parser::Parser( ) 
{ }

int Parser::init( )
{

	{
		cs = ( int ) Parser_start;
	}
	return 0;
}

int Parser::execute( LangEl *_data, int _len )
{
	LangEl *p = _data;
	LangEl *pe = _data+_len;
	
	{
		int _ps = 0;
		if ( p == pe  )
		goto _test_eof;
		
		goto _resume;
		
		_again:
		switch ( cs  ) {
			case 1:
			goto st1;
			case 0:
			goto st0;
			case 2:
			goto st2;
			case 3:
			goto st3;
			case 4:
			goto st4;
			case 55:
			goto st55;
			case 5:
			goto st5;
			case 6:
			goto st6;
			case 7:
			goto st7;
			case 8:
			goto st8;
			case 9:
			goto st9;
			case 10:
			goto st10;
			case 11:
			goto st11;
			case 12:
			goto st12;
			case 13:
			goto st13;
			case 14:
			goto st14;
			case 15:
			goto st15;
			case 16:
			goto st16;
			case 17:
			goto st17;
			case 18:
			goto st18;
			case 19:
			goto st19;
			case 20:
			goto st20;
			case 21:
			goto st21;
			case 22:
			goto st22;
			case 23:
			goto st23;
			case 24:
			goto st24;
			case 25:
			goto st25;
			case 26:
			goto st26;
			case 27:
			goto st27;
			case 28:
			goto st28;
			case 29:
			goto st29;
			case 30:
			goto st30;
			case 31:
			goto st31;
			case 32:
			goto st32;
			case 33:
			goto st33;
			case 34:
			goto st34;
			case 35:
			goto st35;
			case 36:
			goto st36;
			case 37:
			goto st37;
			case 38:
			goto st38;
			case 39:
			goto st39;
			case 40:
			goto st40;
			case 41:
			goto st41;
			case 42:
			goto st42;
			case 43:
			goto st43;
			case 44:
			goto st44;
			case 45:
			goto st45;
			case 46:
			goto st46;
			case 47:
			goto st47;
			case 48:
			goto st48;
			case 49:
			goto st49;
			case 50:
			goto st50;
			case 51:
			goto st51;
			case 52:
			goto st52;
			case 53:
			goto st53;
			case 54:
			goto st54;
			
		}
		_resume:
		switch ( cs  ) {
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 55:
			goto st_case_55;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			case 12:
			goto st_case_12;
			case 13:
			goto st_case_13;
			case 14:
			goto st_case_14;
			case 15:
			goto st_case_15;
			case 16:
			goto st_case_16;
			case 17:
			goto st_case_17;
			case 18:
			goto st_case_18;
			case 19:
			goto st_case_19;
			case 20:
			goto st_case_20;
			case 21:
			goto st_case_21;
			case 22:
			goto st_case_22;
			case 23:
			goto st_case_23;
			case 24:
			goto st_case_24;
			case 25:
			goto st_case_25;
			case 26:
			goto st_case_26;
			case 27:
			goto st_case_27;
			case 28:
			goto st_case_28;
			case 29:
			goto st_case_29;
			case 30:
			goto st_case_30;
			case 31:
			goto st_case_31;
			case 32:
			goto st_case_32;
			case 33:
			goto st_case_33;
			case 34:
			goto st_case_34;
			case 35:
			goto st_case_35;
			case 36:
			goto st_case_36;
			case 37:
			goto st_case_37;
			case 38:
			goto st_case_38;
			case 39:
			goto st_case_39;
			case 40:
			goto st_case_40;
			case 41:
			goto st_case_41;
			case 42:
			goto st_case_42;
			case 43:
			goto st_case_43;
			case 44:
			goto st_case_44;
			case 45:
			goto st_case_45;
			case 46:
			goto st_case_46;
			case 47:
			goto st_case_47;
			case 48:
			goto st_case_48;
			case 49:
			goto st_case_49;
			case 50:
			goto st_case_50;
			case 51:
			goto st_case_51;
			case 52:
			goto st_case_52;
			case 53:
			goto st_case_53;
			case 54:
			goto st_case_54;
			
		}
		goto st_out;
		st1:
		p+= 1;
		if ( p == pe  )
		goto _test_eof1;
		
		st_case_1:
		_ps = 1;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr0;
			}
			case 23:
			{
				goto ctr2;
			}
			case 24:
			{
				goto ctr3;
			}
			case 25:
			{
				goto ctr4;
			}
			
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		ctr0:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe  )
		goto _test_eof2;
		
		st_case_2:
		_ps = 2;
		if ( (p->type) == 1  )
		{
			goto ctr5;
		}
		
		{
			goto st0;
		}
		ctr5:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st3;
		st3:
		p+= 1;
		if ( p == pe  )
		goto _test_eof3;
		
		st_case_3:
		_ps = 3;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 26:
			{
				goto ctr11;
			}
			case 27:
			{
				goto ctr12;
			}
			case 28:
			{
				goto ctr13;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr6:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st4;
		st4:
		p+= 1;
		if ( p == pe  )
		goto _test_eof4;
		
		st_case_4:
		if ( (p->type) == 0  )
		{
			goto ctr16;
		}
		
		if ( (p->type) > 10  )
		{
			if ( 12 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr16;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr16;
		}
		
		{
			goto st0;
		}
		ctr83:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st55;
		ctr16:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 30;
			
		}
		{
			#line 74 "tmp.gmr"
			cout << "F = tt_id;" << endl; 
			#line 431 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr18:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 30;
			
		}
		{
			#line 72 "tmp.gmr"
			cout << "F = tt_andFSM;" << endl; 
			#line 417 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr19:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 30;
			
		}
		{
			#line 73 "tmp.gmr"
			cout << "F = tt_orFSM;" << endl; 
			#line 424 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr26:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 26;
			
		}
		{
			#line 47 "tmp.gmr"
			cout << "E = E tt_pipe T;" << endl; 
			#line 242 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr30:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 27;
			
		}
		{
			#line 51 "tmp.gmr"
			cout << "T = T tt_dot N;" << endl; 
			#line 270 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr37:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 54 "tmp.gmr"
			cout << "N = N tt_colon tt_id;" << endl; 
			#line 291 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr39:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 58 "tmp.gmr"
			cout << "N = N tt_colon tt_minus tt_number;" << endl; 
			#line 319 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr41:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 57 "tmp.gmr"
			cout << "N = N tt_colon tt_plus tt_number;" << endl; 
			#line 312 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr45:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 55 "tmp.gmr"
			cout << "N = N tt_percent tt_id;" << endl; 
			#line 298 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr47:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 60 "tmp.gmr"
			cout << "N = N tt_percent tt_minus tt_number;" << endl; 
			#line 333 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr49:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 59 "tmp.gmr"
			cout << "N = N tt_percent tt_plus tt_number;" << endl; 
			#line 326 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr53:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 56 "tmp.gmr"
			cout << "N = N tt_dollar tt_id;" << endl; 
			#line 305 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr55:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 62 "tmp.gmr"
			cout << "N = N tt_dollar tt_minus tt_number;" << endl; 
			#line 347 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr57:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 61 "tmp.gmr"
			cout << "N = N tt_dollar tt_plus tt_number;" << endl; 
			#line 340 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr58:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 28;
			
		}
		{
			#line 63 "tmp.gmr"
			cout << "N = K;" << endl; 
			#line 354 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr59:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 67 "tmp.gmr"
			cout << "K = F;" << endl; 
			#line 382 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr63:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 66 "tmp.gmr"
			cout << "K = F tt_plus;" << endl; 
			#line 375 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr64:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 64 "tmp.gmr"
			cout << "K = F tt_star;" << endl; 
			#line 361 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr65:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 65 "tmp.gmr"
			cout << "K = F tt_question;" << endl; 
			#line 368 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr66:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 27;
			
		}
		{
			#line 52 "tmp.gmr"
			cout << "T = T N;" << endl; 
			#line 277 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr67:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 27;
			
		}
		{
			#line 53 "tmp.gmr"
			cout << "T = N;" << endl; 
			#line 284 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr69:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 26;
			
		}
		{
			#line 48 "tmp.gmr"
			cout << "E = E tt_amp T;" << endl; 
			#line 249 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr71:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 26;
			
		}
		{
			#line 49 "tmp.gmr"
			cout << "E = E tt_minus T;" << endl; 
			#line 256 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr72:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 30;
			
		}
		{
			#line 75 "tmp.gmr"
			cout << "F = tt_open E tt_close;" << endl; 
			#line 438 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr73:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 26;
			
		}
		{
			#line 50 "tmp.gmr"
			cout << "E = T;" << endl; 
			#line 263 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr74:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 71 "tmp.gmr"
			cout << "K = tt_not F;" << endl; 
			#line 410 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr78:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 70 "tmp.gmr"
			cout << "K = tt_not F tt_plus;" << endl; 
			#line 403 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr79:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 68 "tmp.gmr"
			cout << "K = tt_not F tt_star;" << endl; 
			#line 389 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr80:
		cs = 55;
		{
			cs = (pop(3)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 29;
			
		}
		{
			#line 69 "tmp.gmr"
			cout << "K = tt_not F tt_question;" << endl; 
			#line 396 "tmp.rl"
			
		}
		{
			rem(p, 3); 
		}
		
		
		goto _again;
		ctr82:
		cs = 55;
		{
			cs = (pop(4)); 
		}
		{
			redLel = new LangEl();
			redLel->type = 25;
			
		}
		{
			#line 46 "tmp.gmr"
			cout << "A = tt_id tt_equals E tt_semi;" << endl; 
			#line 235 "tmp.rl"
			
		}
		{
			rem(p, 4); 
		}
		
		
		goto _again;
		ctr84:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new Lel_start();
			redLel->type = 23;
			
		}
		{
			#line 41 "tmp.gmr"
			
			cout << "start = M;" << endl;
			static_cast<Lel_start*>(redLel)->si = static_cast<Lel_M*>(rhs[0])->mi;
			
			#line 214 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		ctr86:
		cs = 55;
		{
			cs = (pop(2)); 
		}
		{
			redLel = new Lel_M();
			redLel->type = 24;
			
		}
		{
			#line 44 "tmp.gmr"
			cout << "M = M A;" << endl; 
			#line 221 "tmp.rl"
			
		}
		{
			rem(p, 2); 
		}
		
		
		goto _again;
		ctr87:
		cs = 55;
		{
			cs = (pop(1)); 
		}
		{
			redLel = new Lel_M();
			redLel->type = 24;
			
		}
		{
			#line 45 "tmp.gmr"
			cout << "M = A;" << endl; 
			#line 228 "tmp.rl"
			
		}
		{
			rem(p, 1); 
		}
		
		
		goto _again;
		st55:
		p+= 1;
		if ( p == pe  )
		goto _test_eof55;
		
		st_case_55:
		{
			goto st0;
		}
		ctr7:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st5;
		st5:
		p+= 1;
		if ( p == pe  )
		goto _test_eof5;
		
		st_case_5:
		_ps = 5;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 30:
			{
				goto ctr17;
			}
			
		}
		{
			goto st0;
		}
		ctr8:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st6;
		st6:
		p+= 1;
		if ( p == pe  )
		goto _test_eof6;
		
		st_case_6:
		if ( (p->type) == 0  )
		{
			goto ctr18;
		}
		
		if ( (p->type) > 10  )
		{
			if ( 12 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr18;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr18;
		}
		
		{
			goto st0;
		}
		ctr9:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st7;
		st7:
		p+= 1;
		if ( p == pe  )
		goto _test_eof7;
		
		st_case_7:
		if ( (p->type) == 0  )
		{
			goto ctr19;
		}
		
		if ( (p->type) > 10  )
		{
			if ( 12 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr19;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr19;
		}
		
		{
			goto st0;
		}
		ctr10:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st8;
		st8:
		p+= 1;
		if ( p == pe  )
		goto _test_eof8;
		
		st_case_8:
		_ps = 8;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 26:
			{
				goto ctr20;
			}
			case 27:
			{
				goto ctr12;
			}
			case 28:
			{
				goto ctr13;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr20:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st9;
		st9:
		p+= 1;
		if ( p == pe  )
		goto _test_eof9;
		
		st_case_9:
		_ps = 9;
		switch ( (p->type) ) {
			case 3:
			{
				goto ctr21;
			}
			case 4:
			{
				goto ctr22;
			}
			case 5:
			{
				goto ctr23;
			}
			case 18:
			{
				goto ctr24;
			}
			
		}
		{
			goto st0;
		}
		ctr21:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st10;
		st10:
		p+= 1;
		if ( p == pe  )
		goto _test_eof10;
		
		st_case_10:
		_ps = 10;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 27:
			{
				goto ctr25;
			}
			case 28:
			{
				goto ctr13;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr25:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st11;
		st11:
		p+= 1;
		if ( p == pe  )
		goto _test_eof11;
		
		st_case_11:
		_ps = 11;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 6:
			{
				goto ctr27;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 18:
			{
				goto ctr26;
			}
			case 28:
			{
				goto ctr28;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		if ( 2 <= (p->type) && (p->type) <= 5  )
		{
			goto ctr26;
		}
		
		{
			goto st0;
		}
		ctr27:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st12;
		st12:
		p+= 1;
		if ( p == pe  )
		goto _test_eof12;
		
		st_case_12:
		_ps = 12;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 28:
			{
				goto ctr29;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr29:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st13;
		st13:
		p+= 1;
		if ( p == pe  )
		goto _test_eof13;
		
		st_case_13:
		_ps = 13;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr30;
			}
			case 7:
			{
				goto ctr31;
			}
			case 8:
			{
				goto ctr32;
			}
			case 9:
			{
				goto ctr33;
			}
			
		}
		if ( (p->type) > 6  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr30;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr30;
		}
		
		{
			goto st0;
		}
		ctr31:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st14;
		st14:
		p+= 1;
		if ( p == pe  )
		goto _test_eof14;
		
		st_case_14:
		_ps = 14;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr34;
			}
			case 5:
			{
				goto ctr35;
			}
			case 10:
			{
				goto ctr36;
			}
			
		}
		{
			goto st0;
		}
		ctr34:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st15;
		st15:
		p+= 1;
		if ( p == pe  )
		goto _test_eof15;
		
		st_case_15:
		if ( (p->type) == 0  )
		{
			goto ctr37;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr37;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr37;
		}
		
		{
			goto st0;
		}
		ctr35:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st16;
		st16:
		p+= 1;
		if ( p == pe  )
		goto _test_eof16;
		
		st_case_16:
		_ps = 16;
		if ( (p->type) == 11  )
		{
			goto ctr38;
		}
		
		{
			goto st0;
		}
		ctr38:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st17;
		st17:
		p+= 1;
		if ( p == pe  )
		goto _test_eof17;
		
		st_case_17:
		if ( (p->type) == 0  )
		{
			goto ctr39;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr39;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr39;
		}
		
		{
			goto st0;
		}
		ctr36:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st18;
		st18:
		p+= 1;
		if ( p == pe  )
		goto _test_eof18;
		
		st_case_18:
		_ps = 18;
		if ( (p->type) == 11  )
		{
			goto ctr40;
		}
		
		{
			goto st0;
		}
		ctr40:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st19;
		st19:
		p+= 1;
		if ( p == pe  )
		goto _test_eof19;
		
		st_case_19:
		if ( (p->type) == 0  )
		{
			goto ctr41;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr41;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr41;
		}
		
		{
			goto st0;
		}
		ctr32:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st20;
		st20:
		p+= 1;
		if ( p == pe  )
		goto _test_eof20;
		
		st_case_20:
		_ps = 20;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr42;
			}
			case 5:
			{
				goto ctr43;
			}
			case 10:
			{
				goto ctr44;
			}
			
		}
		{
			goto st0;
		}
		ctr42:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st21;
		st21:
		p+= 1;
		if ( p == pe  )
		goto _test_eof21;
		
		st_case_21:
		if ( (p->type) == 0  )
		{
			goto ctr45;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr45;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr45;
		}
		
		{
			goto st0;
		}
		ctr43:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st22;
		st22:
		p+= 1;
		if ( p == pe  )
		goto _test_eof22;
		
		st_case_22:
		_ps = 22;
		if ( (p->type) == 11  )
		{
			goto ctr46;
		}
		
		{
			goto st0;
		}
		ctr46:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st23;
		st23:
		p+= 1;
		if ( p == pe  )
		goto _test_eof23;
		
		st_case_23:
		if ( (p->type) == 0  )
		{
			goto ctr47;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr47;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr47;
		}
		
		{
			goto st0;
		}
		ctr44:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st24;
		st24:
		p+= 1;
		if ( p == pe  )
		goto _test_eof24;
		
		st_case_24:
		_ps = 24;
		if ( (p->type) == 11  )
		{
			goto ctr48;
		}
		
		{
			goto st0;
		}
		ctr48:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st25;
		st25:
		p+= 1;
		if ( p == pe  )
		goto _test_eof25;
		
		st_case_25:
		if ( (p->type) == 0  )
		{
			goto ctr49;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr49;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr49;
		}
		
		{
			goto st0;
		}
		ctr33:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st26;
		st26:
		p+= 1;
		if ( p == pe  )
		goto _test_eof26;
		
		st_case_26:
		_ps = 26;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr50;
			}
			case 5:
			{
				goto ctr51;
			}
			case 10:
			{
				goto ctr52;
			}
			
		}
		{
			goto st0;
		}
		ctr50:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st27;
		st27:
		p+= 1;
		if ( p == pe  )
		goto _test_eof27;
		
		st_case_27:
		if ( (p->type) == 0  )
		{
			goto ctr53;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr53;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr53;
		}
		
		{
			goto st0;
		}
		ctr51:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st28;
		st28:
		p+= 1;
		if ( p == pe  )
		goto _test_eof28;
		
		st_case_28:
		_ps = 28;
		if ( (p->type) == 11  )
		{
			goto ctr54;
		}
		
		{
			goto st0;
		}
		ctr54:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st29;
		st29:
		p+= 1;
		if ( p == pe  )
		goto _test_eof29;
		
		st_case_29:
		if ( (p->type) == 0  )
		{
			goto ctr55;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr55;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr55;
		}
		
		{
			goto st0;
		}
		ctr52:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st30;
		st30:
		p+= 1;
		if ( p == pe  )
		goto _test_eof30;
		
		st_case_30:
		_ps = 30;
		if ( (p->type) == 11  )
		{
			goto ctr56;
		}
		
		{
			goto st0;
		}
		ctr56:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st31;
		st31:
		p+= 1;
		if ( p == pe  )
		goto _test_eof31;
		
		st_case_31:
		if ( (p->type) == 0  )
		{
			goto ctr57;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr57;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr57;
		}
		
		{
			goto st0;
		}
		ctr14:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st32;
		st32:
		p+= 1;
		if ( p == pe  )
		goto _test_eof32;
		
		st_case_32:
		if ( (p->type) == 0  )
		{
			goto ctr58;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr58;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr58;
		}
		
		{
			goto st0;
		}
		ctr15:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st33;
		st33:
		p+= 1;
		if ( p == pe  )
		goto _test_eof33;
		
		st_case_33:
		_ps = 33;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr59;
			}
			case 10:
			{
				goto ctr60;
			}
			case 12:
			{
				goto ctr61;
			}
			case 13:
			{
				goto ctr62;
			}
			
		}
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr59;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr59;
		}
		
		{
			goto st0;
		}
		ctr60:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st34;
		st34:
		p+= 1;
		if ( p == pe  )
		goto _test_eof34;
		
		st_case_34:
		if ( (p->type) == 0  )
		{
			goto ctr63;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr63;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr63;
		}
		
		{
			goto st0;
		}
		ctr61:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st35;
		st35:
		p+= 1;
		if ( p == pe  )
		goto _test_eof35;
		
		st_case_35:
		if ( (p->type) == 0  )
		{
			goto ctr64;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr64;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr64;
		}
		
		{
			goto st0;
		}
		ctr62:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st36;
		st36:
		p+= 1;
		if ( p == pe  )
		goto _test_eof36;
		
		st_case_36:
		if ( (p->type) == 0  )
		{
			goto ctr65;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr65;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr65;
		}
		
		{
			goto st0;
		}
		ctr28:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st37;
		st37:
		p+= 1;
		if ( p == pe  )
		goto _test_eof37;
		
		st_case_37:
		_ps = 37;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr66;
			}
			case 7:
			{
				goto ctr31;
			}
			case 8:
			{
				goto ctr32;
			}
			case 9:
			{
				goto ctr33;
			}
			
		}
		if ( (p->type) > 6  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr66;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr66;
		}
		
		{
			goto st0;
		}
		ctr13:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st38;
		st38:
		p+= 1;
		if ( p == pe  )
		goto _test_eof38;
		
		st_case_38:
		_ps = 38;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr67;
			}
			case 7:
			{
				goto ctr31;
			}
			case 8:
			{
				goto ctr32;
			}
			case 9:
			{
				goto ctr33;
			}
			
		}
		if ( (p->type) > 6  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr67;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr67;
		}
		
		{
			goto st0;
		}
		ctr22:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st39;
		st39:
		p+= 1;
		if ( p == pe  )
		goto _test_eof39;
		
		st_case_39:
		_ps = 39;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 27:
			{
				goto ctr68;
			}
			case 28:
			{
				goto ctr13;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr68:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st40;
		st40:
		p+= 1;
		if ( p == pe  )
		goto _test_eof40;
		
		st_case_40:
		_ps = 40;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 6:
			{
				goto ctr27;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 18:
			{
				goto ctr69;
			}
			case 28:
			{
				goto ctr28;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		if ( 2 <= (p->type) && (p->type) <= 5  )
		{
			goto ctr69;
		}
		
		{
			goto st0;
		}
		ctr23:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st41;
		st41:
		p+= 1;
		if ( p == pe  )
		goto _test_eof41;
		
		st_case_41:
		_ps = 41;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 27:
			{
				goto ctr70;
			}
			case 28:
			{
				goto ctr13;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		{
			goto st0;
		}
		ctr70:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st42;
		st42:
		p+= 1;
		if ( p == pe  )
		goto _test_eof42;
		
		st_case_42:
		_ps = 42;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 6:
			{
				goto ctr27;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 18:
			{
				goto ctr71;
			}
			case 28:
			{
				goto ctr28;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		if ( 2 <= (p->type) && (p->type) <= 5  )
		{
			goto ctr71;
		}
		
		{
			goto st0;
		}
		ctr24:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st43;
		st43:
		p+= 1;
		if ( p == pe  )
		goto _test_eof43;
		
		st_case_43:
		if ( (p->type) == 0  )
		{
			goto ctr72;
		}
		
		if ( (p->type) > 10  )
		{
			if ( 12 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr72;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr72;
		}
		
		{
			goto st0;
		}
		ctr12:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st44;
		st44:
		p+= 1;
		if ( p == pe  )
		goto _test_eof44;
		
		st_case_44:
		_ps = 44;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr6;
			}
			case 6:
			{
				goto ctr27;
			}
			case 14:
			{
				goto ctr7;
			}
			case 15:
			{
				goto ctr8;
			}
			case 16:
			{
				goto ctr9;
			}
			case 17:
			{
				goto ctr10;
			}
			case 18:
			{
				goto ctr73;
			}
			case 28:
			{
				goto ctr28;
			}
			case 29:
			{
				goto ctr14;
			}
			case 30:
			{
				goto ctr15;
			}
			
		}
		if ( 2 <= (p->type) && (p->type) <= 5  )
		{
			goto ctr73;
		}
		
		{
			goto st0;
		}
		ctr17:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st45;
		st45:
		p+= 1;
		if ( p == pe  )
		goto _test_eof45;
		
		st_case_45:
		_ps = 45;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr74;
			}
			case 10:
			{
				goto ctr75;
			}
			case 12:
			{
				goto ctr76;
			}
			case 13:
			{
				goto ctr77;
			}
			
		}
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr74;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr74;
		}
		
		{
			goto st0;
		}
		ctr75:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st46;
		st46:
		p+= 1;
		if ( p == pe  )
		goto _test_eof46;
		
		st_case_46:
		if ( (p->type) == 0  )
		{
			goto ctr78;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr78;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr78;
		}
		
		{
			goto st0;
		}
		ctr76:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st47;
		st47:
		p+= 1;
		if ( p == pe  )
		goto _test_eof47;
		
		st_case_47:
		if ( (p->type) == 0  )
		{
			goto ctr79;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr79;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr79;
		}
		
		{
			goto st0;
		}
		ctr77:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st48;
		st48:
		p+= 1;
		if ( p == pe  )
		goto _test_eof48;
		
		st_case_48:
		if ( (p->type) == 0  )
		{
			goto ctr80;
		}
		
		if ( (p->type) > 9  )
		{
			if ( 14 <= (p->type) && (p->type) <= 18  )
			{
				goto ctr80;
			}
			
		} 
		else if ( (p->type) >= 2  )
		{
			goto ctr80;
		}
		
		{
			goto st0;
		}
		ctr11:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st49;
		st49:
		p+= 1;
		if ( p == pe  )
		goto _test_eof49;
		
		st_case_49:
		_ps = 49;
		switch ( (p->type) ) {
			case 2:
			{
				goto ctr81;
			}
			case 3:
			{
				goto ctr21;
			}
			case 4:
			{
				goto ctr22;
			}
			case 5:
			{
				goto ctr23;
			}
			
		}
		{
			goto st0;
		}
		ctr81:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st50;
		st50:
		p+= 1;
		if ( p == pe  )
		goto _test_eof50;
		
		st_case_50:
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr82;
			}
			case 20:
			{
				goto ctr82;
			}
			
		}
		{
			goto st0;
		}
		ctr2:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st51;
		st51:
		p+= 1;
		if ( p == pe  )
		goto _test_eof51;
		
		st_case_51:
		_ps = 51;
		if ( (p->type) == 20  )
		{
			goto ctr83;
		}
		
		{
			goto st0;
		}
		ctr3:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st52;
		st52:
		p+= 1;
		if ( p == pe  )
		goto _test_eof52;
		
		st_case_52:
		_ps = 52;
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr0;
			}
			case 20:
			{
				goto ctr84;
			}
			case 25:
			{
				goto ctr85;
			}
			
		}
		{
			goto st0;
		}
		ctr85:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st53;
		st53:
		p+= 1;
		if ( p == pe  )
		goto _test_eof53;
		
		st_case_53:
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr86;
			}
			case 20:
			{
				goto ctr86;
			}
			
		}
		{
			goto st0;
		}
		ctr4:
		{
			p->state = (_ps);
			push( p );
			
		}
		
		
		goto st54;
		st54:
		p+= 1;
		if ( p == pe  )
		goto _test_eof54;
		
		st_case_54:
		switch ( (p->type) ) {
			case 0:
			{
				goto ctr87;
			}
			case 20:
			{
				goto ctr87;
			}
			
		}
		{
			goto st0;
		}
		st_out:
		_test_eof1: cs = 1;
		goto _test_eof; 
		_test_eof2: cs = 2;
		goto _test_eof; 
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof4: cs = 4;
		goto _test_eof; 
		_test_eof55: cs = 55;
		goto _test_eof; 
		_test_eof5: cs = 5;
		goto _test_eof; 
		_test_eof6: cs = 6;
		goto _test_eof; 
		_test_eof7: cs = 7;
		goto _test_eof; 
		_test_eof8: cs = 8;
		goto _test_eof; 
		_test_eof9: cs = 9;
		goto _test_eof; 
		_test_eof10: cs = 10;
		goto _test_eof; 
		_test_eof11: cs = 11;
		goto _test_eof; 
		_test_eof12: cs = 12;
		goto _test_eof; 
		_test_eof13: cs = 13;
		goto _test_eof; 
		_test_eof14: cs = 14;
		goto _test_eof; 
		_test_eof15: cs = 15;
		goto _test_eof; 
		_test_eof16: cs = 16;
		goto _test_eof; 
		_test_eof17: cs = 17;
		goto _test_eof; 
		_test_eof18: cs = 18;
		goto _test_eof; 
		_test_eof19: cs = 19;
		goto _test_eof; 
		_test_eof20: cs = 20;
		goto _test_eof; 
		_test_eof21: cs = 21;
		goto _test_eof; 
		_test_eof22: cs = 22;
		goto _test_eof; 
		_test_eof23: cs = 23;
		goto _test_eof; 
		_test_eof24: cs = 24;
		goto _test_eof; 
		_test_eof25: cs = 25;
		goto _test_eof; 
		_test_eof26: cs = 26;
		goto _test_eof; 
		_test_eof27: cs = 27;
		goto _test_eof; 
		_test_eof28: cs = 28;
		goto _test_eof; 
		_test_eof29: cs = 29;
		goto _test_eof; 
		_test_eof30: cs = 30;
		goto _test_eof; 
		_test_eof31: cs = 31;
		goto _test_eof; 
		_test_eof32: cs = 32;
		goto _test_eof; 
		_test_eof33: cs = 33;
		goto _test_eof; 
		_test_eof34: cs = 34;
		goto _test_eof; 
		_test_eof35: cs = 35;
		goto _test_eof; 
		_test_eof36: cs = 36;
		goto _test_eof; 
		_test_eof37: cs = 37;
		goto _test_eof; 
		_test_eof38: cs = 38;
		goto _test_eof; 
		_test_eof39: cs = 39;
		goto _test_eof; 
		_test_eof40: cs = 40;
		goto _test_eof; 
		_test_eof41: cs = 41;
		goto _test_eof; 
		_test_eof42: cs = 42;
		goto _test_eof; 
		_test_eof43: cs = 43;
		goto _test_eof; 
		_test_eof44: cs = 44;
		goto _test_eof; 
		_test_eof45: cs = 45;
		goto _test_eof; 
		_test_eof46: cs = 46;
		goto _test_eof; 
		_test_eof47: cs = 47;
		goto _test_eof; 
		_test_eof48: cs = 48;
		goto _test_eof; 
		_test_eof49: cs = 49;
		goto _test_eof; 
		_test_eof50: cs = 50;
		goto _test_eof; 
		_test_eof51: cs = 51;
		goto _test_eof; 
		_test_eof52: cs = 52;
		goto _test_eof; 
		_test_eof53: cs = 53;
		goto _test_eof; 
		_test_eof54: cs = 54;
		goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
	if ( cs == Parser_error )
	return -1;
	if ( cs >= Parser_first_final )
	return 1;
	return 0;
}

int Parser::finish( )
{
	if ( cs == Parser_error )
	return -1;
	if ( cs >= Parser_first_final )
	return 1;
	return 0;
}

void Parser::parseLangEl( LangEl *lel )
{
	redLel = 0;
	execute( lel, 1 );
	while ( redLel != 0 ) {
		execute( redLel, 1 );
		redLel = 0;
		execute( lel, 1 );
	}
}

int Parser::pop( int n )
{
	for ( int i = n-1; i >= 0; i-- )
	rhs[i] = pop();
	return rhs[0]->state;
}

void Parser::rem( LangEl *lel, int n )
{
	for ( int i = n-1; i >= 0; i-- )
	delete rhs[i];
}

int Parser::done( )
{
	Token *eof = new Token;
	eof->type = l__eof;
	eof->line = 0;
	eof->pos = 0;
	parseLangEl( eof );
	return finish();
}

#line 77 "tmp.gmr"


#include <assert.h>
#define MAX_TOKS 10000

struct TokList
{
	TokList() : numToks(0) { }
	
	void append( int type );
	int parse();
	
	Token *toks[MAX_TOKS];
	int numToks;
};

void TokList::append( int type )
{
	assert( numToks < MAX_TOKS );
	toks[numToks] = new Token;
	toks[numToks]->type = type;
	numToks += 1;
}

int TokList::parse()
{
	Parser parser;
	parser.init();
	for ( int i = 0; i < numToks; i++ )
	parser.parseLangEl( toks[i] );
	return parser.done();
}

void test0()
{
	TokList tokList;
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_id );
	tokList.append( tt_star );
	tokList.append( tt_minus );
	tokList.append( tt_andFSM );
	tokList.append( tt_dot );
	tokList.append( tt_id );
	tokList.append( tt_semi );
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_id );
	tokList.append( tt_andFSM );
	tokList.append( tt_id );
	tokList.append( tt_semi );
	cout << tokList.parse() << endl;
}

void test1()
{
	TokList tokList;
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_open );
	tokList.append( tt_orFSM );
	tokList.append( tt_minus );
	tokList.append( tt_andFSM );
	tokList.append( tt_close );
	tokList.append( tt_star );
	tokList.append( tt_semi );
	cout << tokList.parse() << endl;
}
void test2()
{
	TokList tokList;
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_not );
	tokList.append( tt_open );
	tokList.append( tt_orFSM );
	tokList.append( tt_minus );
	tokList.append( tt_not );
	tokList.append( tt_andFSM );
	tokList.append( tt_close );
	tokList.append( tt_star );
	tokList.append( tt_semi );
	cout << tokList.parse() << endl;
}
void test3()
{
	TokList tokList;
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_id );
	tokList.append( tt_colon );
	tokList.append( tt_minus );
	tokList.append( tt_number );
	tokList.append( tt_id );
	tokList.append( tt_colon );
	tokList.append( tt_id );
	tokList.append( tt_id );
	tokList.append( tt_dollar );
	tokList.append( tt_plus );
	tokList.append( tt_number );
	tokList.append( tt_id );
	tokList.append( tt_percent );
	tokList.append( tt_minus );
	tokList.append( tt_number );
	tokList.append( tt_semi );
	cout << tokList.parse() << endl;
}
void test4()
{
	TokList tokList;
	tokList.append( tt_id );
	tokList.append( tt_equals );
	tokList.append( tt_id );
	tokList.append( tt_pipe );
	tokList.append( tt_id );
	tokList.append( tt_amp );
	tokList.append( tt_id );
	tokList.append( tt_minus );
	tokList.append( tt_id );
	tokList.append( tt_semi );
	cout << tokList.parse() << endl;
}

int main()
{
	test0();
	test1();
	test2();
	test3();
	test4();
}

