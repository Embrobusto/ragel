import crack.io cout;
import crack.lang Buffer;

int target;
int last;





const array[int16 ] _next2_actions = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 0 ,  ];
const array[byte ] _next2_trans_keys = [ 1, 0, 15, 15, 13, 13, 8, 8, 13, 13, 11, 11, 6, 6, 5, 5, 9, 9, 8, 8, 6, 6, 12, 12, 14, 14, 9, 9, 12, 12, 7, 7, 10, 10, 6, 6, 6, 6, 0, 4, 1, 0, 1, 0, 1, 0, 1, 0, 0,  ];
const array[int16 ] _next2_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 1, 1, 7, 1, 1, 1, 1, 1, 8, 9, 1, 1, 10, 11, 12, 13, 1, 14, 15, 0 ,  ];
const array[int16 ] _next2_index_offsets = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 23, 23, 23, 0 ,  ];
const array[int16 ] _next2_indicies = [ 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19, 20, 21, 0 ,  ];
const array[int16 ] _next2_index_defaults = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _next2_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _next2_cond_targs = [ 19, 0, 3, 4, 5, 6, 7, 20, 9, 10, 21, 12, 13, 22, 15, 16, 17, 18, 23, 19, 19, 1, 0 ,  ];
const array[int16 ] _next2_cond_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 5, 7, 9, 11, 0 ,  ];
const array[int16 ] _next2_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _next2_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _next2_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _next2_nfa_pop_trans = [ 0, 0 ,  ];
const int  next2_start  = 19;
const int  next2_first_final  = 19;
const int  next2_error  = 0;
const int  next2_en_unused  = 2;
const int  next2_en_one  = 8;
const int  next2_en_two  = 11;
const int  next2_en_three  = 14;
const int  next2_en_main  = 19;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( next2_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _next2_index_offsets[cs];
					if ( (data[p ])<= 120 && (data[p ])>= 10  )
					{
						int _ic = int ( _next2_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _next2_trans_keys[_keys+1 ] )&& _ic >= int ( _next2_trans_keys[_keys ] ) )
						_trans = uint32  ( _next2_indicies[_inds + int ( (_ic - int ( _next2_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _next2_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _next2_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _next2_cond_targs[_trans] );
					if ( _next2_cond_actions[_trans]!= 0  )
					{
						_acts = _next2_cond_actions[_trans];
						_nacts = uint32  ( _next2_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _next2_actions[_acts ] == 0  ) {
								if ( 1 ) {
									cout.format( "one\n" );
									target = 19;
									if ( 1 ) {
										cs = (target);
										
									}
									
								}
								
							}
							else if ( _next2_actions[_acts ] == 1  ) {
								if ( 1 ) {
									cout.format( "two\n" );
									target = 19;
									if ( 1 ) {
										cs = (target);
										
									}
									
								}
								
							}
							else if ( _next2_actions[_acts ] == 2  ) {
								if ( 1 ) {
									cout.format( "three\n" );
									target = 19;
									if ( 1 ) {
										cs = (target);
										
									}
									
								}
								
							}
							else if ( _next2_actions[_acts ] == 3  ) {
								if ( 1 ) {
									target = 8;
									if ( 1 ) {
										cs = (target);
										
									}
									last = 1;
									
								}
								
							}
							else if ( _next2_actions[_acts ] == 4  ) {
								if ( 1 ) {
									target = 11;
									if ( 1 ) {
										cs = (target);
										
									}
									last = 2;
									
								}
								
							}
							else if ( _next2_actions[_acts ] == 5  ) {
								if ( 1 ) {
									if ( last == 2 )
									{
										target = 14;
										if ( 1 ) {
											cs = (target);
											
										}
										
									} 
									last = 3;
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= next2_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "1one3x2two3three\n" );
}

main();
