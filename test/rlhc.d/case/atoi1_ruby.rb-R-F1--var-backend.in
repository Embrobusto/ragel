host( "working/atoi1_ruby.rl", 1 ) @{#
	# @@LANG: ruby
	# @@GENERATED: true
	#
	
	
	
	
	
	
}@
array char _atoi_trans_keys( 0, 4 ) = { 1, 0, 2, 4, 4, 4, 0, 4, 1, 0, 0 };

array s8 _atoi_char_class( 0, 4 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 };

array s8 _atoi_index_offsets( 0, 9 ) = { 0, 0, 3, 4, 9, 0 };

array s8 _atoi_indicies( 0, 5 ) = { 0, 2, 3, 4, 5, 1, 1, 1, 4, 0 };

array s8 _atoi_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _atoi_cond_targs( 0, 4 ) = { 2, 0, 2, 3, 3, 4, 0 };

array s8 _atoi_cond_actions( 0, 5 ) = { 1, 0, 2, 3, 4, 5, 0 };

array s8 _atoi_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int atoi_start = 1;
value int atoi_first_final = 4;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/atoi1_ruby.rl", 40 ) @{
	
	def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	neg = 1
	value = 1
	value = 0;
	neg = 0;
}@
{
	cs = cast(int)atoi_start;
}
host( "working/atoi1_ruby.rl", 55 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index char _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _atoi_trans_keys, (cs<<1) );
				_inds = offset( _atoi_indicies, _atoi_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 57 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_atoi_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _atoi_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _atoi_trans_keys, _keys ) )
					_trans = cast(uint)deref( _atoi_indicies, _inds + cast(int)( _ic - cast(int)deref( _atoi_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_atoi_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_atoi_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_atoi_cond_targs[_trans];
				
				switch ( _atoi_cond_actions[_trans] ) {
					case 1 {
						host( "working/atoi1_ruby.rl", 10 ) ${neg = 0;
							value = 0;
						}$
					}
					case 4 {
						host( "working/atoi1_ruby.rl", 17 ) ${value = value * 10 + ( ={( deref( data, p ))}= - 48 )
							;
						}$
					}
					case 2 {
						host( "working/atoi1_ruby.rl", 10 ) ${neg = 0;
							value = 0;
						}$
						host( "working/atoi1_ruby.rl", 14 ) ${neg = 1;
						}$
					}
					case 3 {
						host( "working/atoi1_ruby.rl", 10 ) ${neg = 0;
							value = 0;
						}$
						host( "working/atoi1_ruby.rl", 17 ) ${value = value * 10 + ( ={( deref( data, p ))}= - 48 )
							;
						}$
					}
					case 5 {
						host( "working/atoi1_ruby.rl", 21 ) ${if ( neg != 0 )
							value = -1 * value;
							
							end
						}$
						host( "working/atoi1_ruby.rl", 26 ) ${print( value );
							print( "\n" );
						}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/atoi1_ruby.rl", 56 ) @{
	if cs >= atoi_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
	end
	end
	
	inp = [
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
	]
	
	inplen = 9
	
	inp.each { |str| run_machine(str) }
	
}@