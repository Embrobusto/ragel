host( "working/clang5.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
	
	
	
}@
array s8 _clang_actions( 0, 17 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 2, 0, 8, 2, 0, 9, 0 };

array int _clang_trans_keys( 0, 13 ) = { 1, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 8, 9, 8, 10, 0, 5, 0, 7, 0, 13, 5, 7, 6, 13, 8, 9, 6, 9, 8, 10, 8, 13, 1, 0, 0 };

array s8 _clang_char_class( 0, 13 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 2, 2, 5, 2, 2, 2, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 12, 2, 2, 11, 2, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 2, 2, 2, 2, 0 };

array s8 _clang_index_offsets( 0, 88 ) = { 0, 0, 13, 14, 27, 28, 29, 31, 34, 40, 48, 62, 65, 73, 75, 79, 82, 88, 0 };

array s8 _clang_indices( 0, 32 ) = { 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 4, 4, 4, 6, 4, 4, 4, 4, 4, 4, 4, 7, 5, 10, 12, 12, 13, 13, 13, 15, 14, 14, 14, 14, 16, 15, 14, 14, 14, 14, 16, 14, 17, 19, 18, 20, 0, 4, 20, 20, 21, 22, 23, 24, 24, 20, 24, 26, 25, 9, 28, 27, 23, 23, 27, 27, 27, 29, 12, 12, 28, 27, 23, 23, 13, 13, 13, 24, 24, 24, 24, 32, 24, 0 };

array s8 _clang_index_defaults( 0, 33 ) = { 0, 0, 0, 4, 4, 9, 11, 11, 14, 14, 18, 25, 27, 30, 27, 31, 32, 33, 0 };

array s8 _clang_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _clang_cond_targs( 0, 17 ) = { 1, 1, 10, 2, 3, 3, 10, 4, 10, 5, 10, 10, 13, 15, 8, 8, 9, 17, 10, 10, 10, 11, 12, 14, 16, 10, 10, 10, 6, 7, 10, 10, 10, 0, 0 };

array s8 _clang_cond_actions( 0, 38 ) = { 0, 1, 15, 0, 0, 1, 13, 0, 31, 0, 38, 33, 0, 0, 0, 1, 0, 3, 17, 35, 11, 9, 9, 9, 0, 21, 19, 25, 0, 0, 27, 29, 23, 0, 0 };

array s8 _clang_to_state_actions( 0, 5 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_from_state_actions( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_eof_trans( 0, 33 ) = { 0, 0, 0, 0, 0, 9, 12, 12, 0, 0, 0, 26, 28, 31, 28, 32, 33, 0, 0 };

array s8 _clang_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int clang_start = 10;
value int clang_first_final = 10;
value int clang_error = 0;

value int clang_en_c_comment = 8;
value int clang_en_main = 10;

host( "working/clang5.rl", 89 ) @{
	
	let clang data =
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let ts = ref 0 in
	let te = ref 0 in
	let eof = pe in 
	let curlin = ref 1 in
	
}@
{
	cs = cast(int)clang_start;
	ts = nil;
	te = nil;
}

{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index int _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _clang_eof_trans[cs] > 0 ) {
					_trans = cast(uint)_clang_eof_trans[cs] - 1;
					_have = 1;
				}
				if ( _have == 0 ) {
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_acts = offset( _clang_actions, _clang_from_state_actions[cs] );
				_nacts = cast(uint)deref( _clang_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _clang_actions, _acts ) ) {
						case 3 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _clang_trans_keys, (cs<<1) );
				_inds = offset( _clang_indices, _clang_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_clang_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _clang_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _clang_trans_keys, _keys ) )
					_trans = cast(uint)deref( _clang_indices, _inds + cast(int)( _ic - cast(int)deref( _clang_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_clang_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_clang_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_clang_cond_targs[_trans];
				
				if ( _clang_cond_actions[_trans] != 0 ) {
					_acts = offset( _clang_actions, _clang_cond_actions[_trans] );
					_nacts = cast(uint)deref( _clang_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _clang_actions, _acts ) )
						{
							case 0 {
								host( "working/clang5.rl", 19 ) ${ incr curlin }$
							}
							case 1 {
								host( "working/clang5.rl", 23 ) ${${cs = 10;}$}$
							}
							case 4 {
								host( "NONE", 1 ) ${${te = p+1;}$}$
							}
							case 5 {
								host( "working/clang5.rl", 35 ) ${${te = p+1;host( "working/clang5.rl", 35 ) ${
											pr "symbol(%i): %c" !curlin data.[!ts];
										}$}$}$
							}
							case 6 {
								host( "working/clang5.rl", 47 ) ${${te = p+1;host( "working/clang5.rl", 47 ) ${
											pr "single_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 7 {
								host( "working/clang5.rl", 53 ) ${${te = p+1;host( "working/clang5.rl", 53 ) ${
											pr "double_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 8 {
								host( "working/clang5.rl", 58 ) ${${te = p+1;}$}$
							}
							case 9 {
								host( "working/clang5.rl", 63 ) ${${te = p+1;}$}$
							}
							case 10 {
								host( "working/clang5.rl", 65 ) ${${te = p+1;host( "working/clang5.rl", 65 ) ${ ${cs = 8;}$}$}$}$
							}
							case 11 {
								host( "working/clang5.rl", 35 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 35 ) ${
											pr "symbol(%i): %c" !curlin data.[!ts];
										}$}$}$
							}
							case 12 {
								host( "working/clang5.rl", 41 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 41 ) ${
											pr "ident(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 13 {
								host( "working/clang5.rl", 69 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 69 ) ${
											pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 14 {
								host( "working/clang5.rl", 75 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 75 ) ${
											pr "float(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 15 {
								host( "working/clang5.rl", 81 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 81 ) ${
											pr "hex(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
							case 16 {
								host( "working/clang5.rl", 35 ) ${${p = ((te))-1;
										host( "working/clang5.rl", 35 ) ${
											pr "symbol(%i): %c" !curlin data.[!ts];
										}$}$}$
							}
							case 17 {
								host( "working/clang5.rl", 69 ) ${${p = ((te))-1;
										host( "working/clang5.rl", 69 ) ${
											pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
										}$}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				_acts = offset( _clang_actions, _clang_to_state_actions[cs] );
				_nacts = cast(uint)deref( _clang_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _clang_actions, _acts ) ) {
						case 2 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/clang5.rl", 102 ) @{
	
	if !cs < clang_first_final then
	fail "atoi: cs %d < %d" !cs clang_first_final;
	;;
	
	let () =
	clang "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n";
	clang "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n";
	()
	;;
	
	
}@