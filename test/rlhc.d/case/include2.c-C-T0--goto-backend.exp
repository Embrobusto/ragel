#include <stdio.h>
#include <string.h>





static const char  _include_test_1_actions [] = { 0, 1, 0, 1, 4, 1, 7, 1, 9, 2, 1, 2, 2, 5, 3, 2, 8, 6, 0 ,  };
static const char  _include_test_1_key_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 0 ,  };
static const char  _include_test_1_trans_keys [] = { 97, 98, 97, 98, 97, 98, 0, 0 ,  };
static const char  _include_test_1_single_lengths [] = { 0, 1, 1, 1, 1, 1, 1, 1, 0, 0 ,  };
static const char  _include_test_1_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _include_test_1_index_offsets [] = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 0 ,  };
static const char  _include_test_1_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _include_test_1_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 ,  };
static const char  _include_test_1_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _include_test_1_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _include_test_1_cond_targs [] = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 0, 0 ,  };
static const char  _include_test_1_cond_actions [] = { 1, 0, 9, 0, 3, 0, 12, 0, 5, 0, 15, 0, 7, 0, 0, 0 ,  };
static const char  _include_test_1_nfa_targs [] = { 0, 0 ,  };
static const char  _include_test_1_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _include_test_1_nfa_push_actions [] = { 0, 0 ,  };
static const char  _include_test_1_nfa_pop_trans [] = { 0, 0 ,  };
static const int  include_test_1_start  = 1;
static const int  include_test_1_first_final  = 8;
static const int  include_test_1_error  = 0;
static const int  include_test_1_en_main  = 1;
void test( char *p )
{
	int cs;
	
	{
		cs = ( int ) include_test_1_start;
	}
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		int _nbreak;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _include_test_1_trans_keys + _include_test_1_key_offsets[cs];
		_trans = ( unsigned int  ) _include_test_1_index_offsets[cs];
		_klen = ( int ) _include_test_1_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _include_test_1_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _include_test_1_cond_keys + _include_test_1_trans_offsets[_trans];
		_klen = ( int ) _include_test_1_trans_lengths[_trans];
		_cond = ( unsigned int  ) _include_test_1_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _include_test_1_cond_targs[_cond];
		if ( _include_test_1_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_nbreak = 0;
		_acts = _include_test_1_actions + _include_test_1_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf(" a1");
				}
				
				break;
				case 1 :
				{
					printf(" b1");
				}
				
				break;
				case 2 :
				{
					printf(" nr1");
				}
				
				break;
				case 3 :
				{
					printf(" nr2");
				}
				
				break;
				case 4 :
				{
					printf(" a2");
				}
				
				break;
				case 5 :
				{
					printf(" b2");
				}
				
				break;
				case 6 :
				{
					printf(" nr3");
				}
				
				break;
				case 7 :
				{
					printf(" a3");
				}
				
				break;
				case 8 :
				{
					printf(" b3");
				}
				
				break;
				case 9 :
				{
					{
						p+= 1;
						_nbreak = 1;
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		if ( _nbreak == 1  )
		goto _out;
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		goto _resume;
		
		_out :
		{}
		
	}
	printf("\n");
}

int main()
{
	test( "ababab" );
	return 0;
}

