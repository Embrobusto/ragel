#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef PERF_TEST

/* Calibrated to 1s on yoho. */
#define perf_iters ( 240984ll * S )

int _perf_dummy = 0;
#define perf_cout(...) ( _perf_dummy += 1 )
#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )

#else

#define perf_cout(...) __VA_ARGS__
#define perf_loop

#endif

using namespace std;

void escapeXML( const char *data )
{
	while ( *data != 0 ) {
		switch ( *data ) {
			case '<': perf_cout( cout << "&lt;" ); break;
			case '>': perf_cout( cout << "&gt;" ); break;
			case '&': perf_cout( cout << "&amp;" ); break;
			default: perf_cout( cout << *data ); break;
		}
		data += 1;
	}
}

void escapeXML( char c )
{
	switch ( c ) {
		case '<': perf_cout( cout << "&lt;" ); break;
		case '>': perf_cout( cout << "&gt;" ); break;
		case '&': perf_cout( cout << "&amp;" ); break;
		default: perf_cout( cout << c ); break;
	}
}

void escapeXML( const char *data, int len )
{
	for ( const char *end = data + len; data != end; data++  ) {
		switch ( *data ) {
			case '<': perf_cout( cout << "&lt;" ); break;
			case '>': perf_cout( cout << "&gt;" ); break;
			case '&': perf_cout( cout << "&amp;" ); break;
			default: perf_cout( cout << *data ); break;
		}
	}
}

inline void write( const char *data )
{
	perf_cout( cout << data );
}

inline void write( char c )
{
	perf_cout( cout << c );
}

inline void write( const char *data, int len )
{
	perf_cout( cout.write( data, len ) );
}




static const char  _RagelScan_trans_keys [] = { 1, 0, 4, 15, 1, 0, 7, 15, 1, 0, 2, 2, 0, 8, 0, 9, 4, 15, 1, 0, 7, 15, 1, 0, 2, 2, 4, 15, 1, 0, 2, 2, 7, 15, 1, 0, 9, 15, 1, 0, 10, 12, 15, 16, 1, 0, 6, 6, 0, 9, 4, 15, 6, 6, 18, 18, 7, 15, 8, 9, 1, 0, 0, 19, 4, 15, 7, 15, 8, 9, 0, 19, 4, 15, 2, 2, 7, 15, 9, 15, 10, 17, 10, 11, 10, 12, 10, 17, 15, 16, 6, 6, 0 ,  };
static const char  _RagelScan_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 3, 6, 3, 7, 3, 3, 8, 3, 3, 3, 3, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 3, 3, 3, 3, 3, 3, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 15, 16, 3, 13, 3, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 17, 13, 13, 18, 3, 19, 3, 0 ,  };
static const short  _RagelScan_index_offsets [] = { 0, 0, 12, 12, 21, 21, 22, 31, 41, 53, 53, 62, 62, 63, 75, 75, 76, 85, 85, 92, 92, 95, 97, 97, 98, 108, 120, 121, 122, 131, 133, 133, 153, 165, 174, 176, 196, 208, 209, 218, 225, 233, 235, 238, 246, 248, 0 ,  };
static const char  _RagelScan_indices [] = { 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 4, 4, 4, 4, 4, 4, 4, 6, 8, 10, 9, 9, 9, 9, 9, 9, 9, 11, 10, 9, 9, 9, 9, 9, 9, 9, 11, 12, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 17, 17, 17, 17, 17, 17, 17, 19, 21, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 27, 29, 28, 28, 28, 28, 28, 28, 28, 30, 32, 31, 31, 31, 31, 31, 33, 35, 35, 35, 37, 38, 39, 41, 40, 40, 40, 42, 40, 43, 44, 40, 45, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 47, 49, 5, 4, 4, 4, 4, 4, 4, 4, 6, 50, 7, 10, 51, 51, 51, 52, 51, 51, 53, 51, 54, 51, 51, 51, 51, 51, 51, 51, 51, 55, 56, 15, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 16, 18, 17, 17, 17, 17, 17, 17, 17, 19, 58, 20, 10, 59, 60, 61, 62, 63, 61, 64, 61, 65, 66, 67, 68, 68, 69, 61, 61, 68, 70, 71, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 25, 27, 29, 28, 28, 28, 28, 28, 28, 28, 30, 32, 31, 31, 31, 31, 31, 33, 67, 67, 73, 73, 73, 73, 73, 74, 67, 67, 35, 35, 35, 68, 68, 68, 68, 76, 76, 76, 68, 37, 38, 77, 0 ,  };
static const char  _RagelScan_index_defaults [] = { 0, 1, 1, 4, 4, 7, 9, 9, 14, 14, 17, 17, 20, 23, 23, 26, 28, 28, 31, 31, 34, 36, 36, 22, 40, 1, 46, 48, 4, 46, 10, 51, 14, 17, 57, 59, 23, 26, 28, 31, 73, 73, 75, 76, 36, 72, 0 ,  };
static const char  _RagelScan_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _RagelScan_cond_targs [] = { 24, 1, 24, 2, 3, 24, 4, 5, 24, 6, 0, 7, 30, 31, 8, 31, 9, 10, 31, 11, 12, 31, 35, 13, 35, 14, 15, 35, 16, 35, 17, 18, 35, 19, 35, 42, 21, 22, 35, 35, 24, 24, 25, 26, 28, 29, 24, 27, 24, 24, 24, 31, 32, 33, 34, 31, 31, 31, 31, 35, 35, 35, 36, 37, 38, 39, 40, 41, 43, 44, 35, 45, 35, 35, 20, 35, 35, 23, 0 ,  };
static const char  _RagelScan_cond_actions [] = { 1, 0, 2, 0, 0, 3, 0, 0, 4, 6, 0, 6, 7, 8, 0, 9, 0, 0, 10, 0, 0, 11, 12, 0, 13, 0, 0, 14, 0, 15, 0, 0, 16, 0, 17, 0, 0, 0, 18, 19, 21, 22, 23, 0, 23, 23, 24, 0, 25, 26, 27, 28, 23, 23, 23, 29, 30, 31, 32, 33, 34, 35, 23, 23, 23, 23, 23, 0, 0, 23, 36, 23, 37, 38, 0, 39, 40, 0, 0 ,  };
static const char  _RagelScan_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_eof_trans [] = { 0, 1, 1, 1, 1, 1, 0, 0, 14, 14, 14, 14, 14, 23, 23, 23, 23, 23, 23, 23, 35, 23, 23, 23, 0, 47, 47, 49, 47, 47, 0, 0, 58, 58, 58, 0, 73, 73, 73, 73, 74, 74, 76, 77, 73, 73, 0 ,  };
static const char  _RagelScan_nfa_targs [] = { 0, 0 ,  };
static const char  _RagelScan_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _RagelScan_nfa_push_actions [] = { 0, 0 ,  };
static const char  _RagelScan_nfa_pop_trans [] = { 0, 0 ,  };
static const int  RagelScan_start  = 24;
static const int  RagelScan_error  = 0;
static const int  RagelScan_en_c_comment  = 6;
static const int  RagelScan_en_ilscan  = 31;
static const int  RagelScan_en_rlscan  = 35;
static const int  RagelScan_en_main  = 24;
void test( const char *data )
{
	std::ios::sync_with_stdio(false);
	
	int cs, act;
	perf_loop
	{
		int len = strlen( data );
		const char *ts, *te;
		int stack[1], top;
		memset( stack, 0, sizeof(stack) );
		
		bool single_line = false;
		int inline_depth = 0;
		
		
		{
			cs = ( int ) RagelScan_start;
			top = 0;
			ts = 0;
			te = 0;
		}
		const char *p = data;
		const char *pe = data + len;
		const char *eof = pe;
		
		
		{
			int _trans = 0;
			const char  *_keys;
			const char  *_inds;
			if ( p == pe  )
			goto _test_eof;
			
			if ( cs == 0  )
			goto _out;
			
			_resume :
			switch ( _RagelScan_from_state_actions[cs] ) {
				case 20 :
				{
					{
						ts = p;
						
					}
					
				}
				
				break;
				
			}
			_keys = _RagelScan_trans_keys + (cs<<1);
			_inds = _RagelScan_indices + _RagelScan_index_offsets[cs];
			if ( ((*( p  ))
			)<= 126 && ((*( p  ))
			)>= 0  )
			{
				int _ic = ( int ) _RagelScan_char_class[( int ) ((*( p  ))
				)- 0];
				if ( _ic <= ( int ) (*( _keys+1  ))
				&& _ic >= ( int ) (*( _keys  ))
				)
				_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
				) ))
				;
				
				else
				_trans = ( int ) _RagelScan_index_defaults[cs];
				
			}
			
			else
			{
				_trans = ( int ) _RagelScan_index_defaults[cs];
			}
			
			
			goto _match_cond;
			
			_match_cond :
			cs = ( int ) _RagelScan_cond_targs[_trans];
			if ( _RagelScan_cond_actions[_trans]== 0  )
			goto _again;
			
			
			switch ( _RagelScan_cond_actions[_trans] ) {
				case 6 :
				{
					escapeXML( (((*( p  ))
					)) ); 
				}
				
				break;
				case 23 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 10 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 9 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 32 :
				{
					{
						te = p+1;
						{
							write( "/*" );
							{
								stack[top] = cs;
								top += 1;
								cs = 6;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 11 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 29 :
				{
					{
						te = p+1;
						{
							write( '{' );
							inline_depth += 1; 
							
						}
						
					}
					
				}
				
				break;
				case 30 :
				{
					{
						te = p+1;
						{
							write( '}' );
							/* If dropping down to the last } then return 
							* to ragel code. */
							if ( --inline_depth == 0 ) {
								write( "</inline>\n" );
								{
									cs = 35;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 28 :
				{
					{
						te = p+1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 31 :
				{
					{
						te = p;
						p = p - 1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 8 :
				{
					{
						p = ((te))-1;
						{
							escapeXML( *ts ); 
						}
						
					}
					
				}
				
				break;
				case 19 :
				{
					{
						te = p+1;
						{
							if ( !single_line ) {
								write( "</section>\n" );
								{
									cs = 24;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 34 :
				{
					{
						te = p+1;
						{
							if ( single_line ) {
								write( "</section>\n" );
								{
									cs = 24;
									goto _again;
								}
							}
							
						}
						
					}
					
				}
				
				break;
				case 14 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 15 :
				{
					{
						te = p+1;
						{
							write( "<single_lit>" );
							escapeXML( ts, te-ts );
							write( "</single_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 13 :
				{
					{
						te = p+1;
						{
							write( "<double_lit>" );
							escapeXML( ts, te-ts );
							write( "</double_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 18 :
				{
					{
						te = p+1;
						{
							write( "<or_lit>" );
							escapeXML( ts, te-ts );
							write( "</or_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 16 :
				{
					{
						te = p+1;
						{
							write( "<re_lit>" );
							escapeXML( ts, te-ts );
							write( "</re_lit>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 36 :
				{
					{
						te = p+1;
						{
							inline_depth = 1;
							write( "<inline>{" );
							{
								cs = 31;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 35 :
				{
					{
						te = p+1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 33 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 40 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<word>" );
							write( ts, te-ts );
							write( "</word>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 38 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<int>" );
							write( ts, te-ts );
							write( "</int>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 39 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<hex>" );
							write( ts, te-ts );
							write( "</hex>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 37 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 17 :
				{
					{
						p = ((te))-1;
						{
							write( "<int>" );
							write( ts, te-ts );
							write( "</int>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 12 :
				{
					{
						p = ((te))-1;
						{
							write( "<symbol>" );
							escapeXML( (((*( p  ))
							)) );
							write( "</symbol>\n" );
							
						}
						
					}
					
				}
				
				break;
				case 3 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 2 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 27 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							{
								stack[top] = cs;
								top += 1;
								cs = 6;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 4 :
				{
					{
						te = p+1;
						{
							escapeXML( ts, te-ts );
							
						}
						
					}
					
				}
				
				break;
				case 26 :
				{
					{
						te = p+1;
						{
							write( "<section>\n" );
							single_line = false;
							{
								cs = 35;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 21 :
				{
					{
						te = p+1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 22 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 25 :
				{
					{
						te = p;
						p = p - 1;
						{
							write( "<section>\n" ); 
							single_line = true; 
							{
								cs = 35;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 24 :
				{
					{
						te = p;
						p = p - 1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 1 :
				{
					{
						p = ((te))-1;
						{
							escapeXML( *ts );
							
						}
						
					}
					
				}
				
				break;
				case 7 :
				{
					escapeXML( (((*( p  ))
					)) ); 
				}
				{
					{
						top -= 1;
						cs = stack[top];
						goto _again;
					}
					
				}
				
				break;
				
			}
			
			_again :
			switch ( _RagelScan_to_state_actions[cs] ) {
				case 5 :
				{
					{
						ts = 0;
						
					}
					
				}
				
				break;
				
			}
			if ( cs == 0  )
			goto _out;
			
			p+= 1;
			if ( p != pe  )
			goto _resume;
			
			
			_test_eof :
			{}
			if ( p == eof  )
			{
				if ( _RagelScan_eof_trans[cs]> 0  )
				{
					_trans = ( int ) _RagelScan_eof_trans[cs]- 1;
					goto _match_cond;
				}
				
			}
			
			
			
			_out :
			{}
			
		}
	}
	
	if ( cs == RagelScan_error ) {
		/* Machine failed before finding a token. */
		perf_cout( cerr << "PARSE ERROR" << endl );
		exit(1);
	}
}

#define BUFSIZE 2048

int main()
{
	std::ios::sync_with_stdio(false);
	
	test(
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	"hi %%{ /'}%%'/ { /*{*/ {} } + '\\'' }%%there\n"
	);
	
	return 0;
}
