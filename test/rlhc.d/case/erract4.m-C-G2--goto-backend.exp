#include <stdio.h>
#include <Foundation/Foundation.h>

#define IDENT_BUFLEN 256

@interface ErrAct : NSObject
{
	@public
	int cs;
};

// Initialize the machine. Invokes any init statement blocks. Returns 0
// if the machine begins in a non-accepting state and 1 if the machine
// begins in an accepting state.
- (int) initFsm;

// Execute the machine on a block of data. Returns -1 if after processing
// the data, the machine is in the error state and can never accept, 0 if
// the machine is in a non-accepting state and 1 if the machine is in an
// accepting state.
- (void) executeWithData:(const char *)data len:(int)len;

// Indicate that there is no more data. Returns -1 if the machine finishes
// in the error state and does not accept, 0 if the machine finishes
// in any other non-accepting state and 1 if the machine finishes in an
// accepting state.
- (int) finish;

@end

@implementation ErrAct



static const int  ErrAct_start  = 0;
static const int  ErrAct_first_final  = 0;
static const int  ErrAct_error  = -1;
static const int  ErrAct_en_main  = 0;
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
- (int) initFsm;
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 1;
}

- (void) executeWithData:(const char *)_data len:(int)_len;
{
	const char *p = _data;
	const char *pe = _data + _len;
	const char *eof = pe;
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		switch ( cs  ) {
			case 0:
			goto st_case_0;
			case 1:
			goto st_case_1;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			
		}
		goto st_out;
		ctr9:
		{
			printf("newline\n");
		}
		
		
		goto st0;
		st0:
		p+= 1;
		if ( p == pe  )
		goto _test_eof0;
		
		st_case_0:
		switch ( ((*( p  ))
		) ) {
			case 10:
			{
				goto ctr1;
			}
			case 104:
			{
				goto st2;
			}
			
		}
		{
			goto ctr0;
		}
		ctr0:
		{
			printf("hello fails\n");
		}
		
		
		goto st1;
		ctr1:
		{
			printf("newline\n");
		}
		{
			printf("hello fails\n");
		}
		
		
		goto st1;
		ctr4:
		{
			printf("newline\n");
		}
		
		
		goto st1;
		st1:
		p+= 1;
		if ( p == pe  )
		goto _test_eof1;
		
		st_case_1:
		if ( ((*( p  ))
		)== 10  )
		{
			goto ctr4;
		}
		
		{
			goto st1;
		}
		st2:
		p+= 1;
		if ( p == pe  )
		goto _test_eof2;
		
		st_case_2:
		switch ( ((*( p  ))
		) ) {
			case 10:
			{
				goto ctr1;
			}
			case 101:
			{
				goto st3;
			}
			
		}
		{
			goto ctr0;
		}
		st3:
		p+= 1;
		if ( p == pe  )
		goto _test_eof3;
		
		st_case_3:
		switch ( ((*( p  ))
		) ) {
			case 10:
			{
				goto ctr1;
			}
			case 108:
			{
				goto st4;
			}
			
		}
		{
			goto ctr0;
		}
		st4:
		p+= 1;
		if ( p == pe  )
		goto _test_eof4;
		
		st_case_4:
		switch ( ((*( p  ))
		) ) {
			case 10:
			{
				goto ctr1;
			}
			case 108:
			{
				goto st5;
			}
			
		}
		{
			goto ctr0;
		}
		st5:
		p+= 1;
		if ( p == pe  )
		goto _test_eof5;
		
		st_case_5:
		switch ( ((*( p  ))
		) ) {
			case 10:
			{
				goto ctr1;
			}
			case 111:
			{
				goto st6;
			}
			
		}
		{
			goto ctr0;
		}
		st6:
		p+= 1;
		if ( p == pe  )
		goto _test_eof6;
		
		st_case_6:
		if ( ((*( p  ))
		)== 10  )
		{
			goto ctr9;
		}
		
		{
			goto ctr0;
		}
		st_out:
		_test_eof0: cs = 0;
		goto _test_eof; 
		_test_eof1: cs = 1;
		goto _test_eof; 
		_test_eof2: cs = 2;
		goto _test_eof; 
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof4: cs = 4;
		goto _test_eof; 
		_test_eof5: cs = 5;
		goto _test_eof; 
		_test_eof6: cs = 6;
		goto _test_eof; 
		
		_test_eof: {}
		if ( p == eof  )
		{
			switch ( cs  ) {
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				{
					printf("hello fails\n");
				}
				
				break;
				
			}
		}
		
		
	}
}

- (int) finish;
{
	if ( cs == ErrAct_error )
	return -1;
	else if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

@end

#include <stdio.h>
#include <string.h>
#define BUFSIZE 2048

ErrAct *fsm;
char buf[BUFSIZE];

void test( char *buf )
{
	int len = strlen(buf);
	fsm = [[ErrAct alloc] init];
	
	[fsm initFsm];
	[fsm executeWithData:buf len:len];
	if ( [fsm finish] > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test(
	"hello\n"
	"hello\n"
	"hello\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"hello there\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"he"	);
	
	test( "" );
	
	return 0;
}

