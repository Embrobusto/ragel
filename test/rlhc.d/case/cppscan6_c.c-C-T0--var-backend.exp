#include <string.h>
#include <stdio.h>

char * ts ;
char * te ;
int act ;
int token ;





static const char  _scanner_actions [] = { 0, 1, 2, 1, 3, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 2, 0, 1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 0 ,  };
static const short  _scanner_key_offsets [] = { 0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0 ,  };
static const char  _scanner_trans_keys [] = { 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0 ,  };
static const char  _scanner_single_lengths [] = { 0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0 ,  };
static const char  _scanner_range_lengths [] = { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0 ,  };
static const short  _scanner_index_offsets [] = { 0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0 ,  };
static const char  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const short  _scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0 ,  };
static const char  _scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _scanner_cond_targs [] = { 12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 ,  };
static const char  _scanner_cond_actions [] = { 79, 7, 0, 0, 0, 79, 5, 0, 0, 0, 51, 77, 0, 0, 0, 79, 0, 79, 0, 0, 0, 55, 0, 57, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 90, 0, 0, 84, 0, 0, 0, 53, 90, 53, 0, 53, 0, 53, 0, 73, 0, 21, 71, 31, 71, 23, 37, 71, 27, 71, 43, 33, 71, 45, 35, 0, 71, 47, 69, 49, 0, 87, 71, 0, 9, 9, 0, 9, 9, 87, 61, 9, 9, 9, 9, 0, 61, 0, 0, 29, 71, 87, 0, 11, 11, 0, 11, 11, 0, 93, 63, 87, 0, 13, 13, 0, 13, 13, 93, 65, 15, 15, 15, 15, 0, 0, 0, 67, 87, 0, 11, 11, 0, 11, 11, 90, 63, 17, 71, 19, 71, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 59, 39, 71, 41, 25, 71, 79, 79, 79, 79, 77, 79, 79, 77, 77, 77, 75, 73, 71, 71, 71, 71, 71, 71, 69, 71, 61, 61, 71, 63, 65, 67, 63, 71, 71, 59, 59, 71, 71, 0 ,  };
static const char  _scanner_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _scanner_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _scanner_eof_trans_indexed [] = { 0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0 ,  };
static const short  _scanner_eof_trans_direct [] = { 0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0 ,  };
static const char  _scanner_nfa_targs [] = { 0, 0 ,  };
static const char  _scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _scanner_nfa_push_actions [] = { 0, 0 ,  };
static const char  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
static const int  scanner_start  = 12;
static const int  scanner_first_final  = 12;
static const int  scanner_error  = 0;
static const int  scanner_en_main  = 12;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) scanner_start;
		ts = 0;
		te = 0;
		act = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _scanner_eof_trans_direct[cs]> 0  )
					{
						_trans = ( unsigned int  ) _scanner_eof_trans_direct[cs]- 1;
						_cond = ( unsigned int  ) _scanner_trans_offsets[_trans];
						_have = 1;
					}
					
					if ( _have == 0  )
					{
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_acts = _scanner_actions + _scanner_from_state_actions[cs];
					_nacts = ( unsigned int  ) (*( _acts  ))
					;
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( (*( _acts  ))
						) {
							case 2 :
							{
								{
									ts = p;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
					_keys = _scanner_trans_keys + _scanner_key_offsets[cs];
					_trans = ( unsigned int  ) _scanner_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _scanner_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _scanner_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _scanner_cond_keys + _scanner_trans_offsets[_trans];
					_klen = ( int ) _scanner_trans_lengths[_trans];
					_cond = ( unsigned int  ) _scanner_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _scanner_cond_targs[_cond];
					if ( _scanner_cond_actions[_cond]!= 0  )
					{
						_acts = _scanner_actions + _scanner_cond_actions[_cond];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 3 :
								{
									{
										te = p+1;
										
									}
									
								}
								
								break;
								case 4 :
								{
									{
										act = 3;
										
									}
									
								}
								
								break;
								case 5 :
								{
									{
										act = 4;
										
									}
									
								}
								
								break;
								case 6 :
								{
									{
										act = 5;
										
									}
									
								}
								
								break;
								case 7 :
								{
									{
										act = 6;
										
									}
									
								}
								
								break;
								case 8 :
								{
									{
										te = p+1;
										{
											token = 193;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 9 :
								{
									{
										te = p+1;
										{
											token = 192;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 10 :
								{
									{
										te = p+1;
										{
											token = 194;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 11 :
								{
									{
										te = p+1;
										{
											token = 218;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 12 :
								{
									{
										te = p+1;
										{
											token = 219;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 13 :
								{
									{
										te = p+1;
										{
											token = 220;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 14 :
								{
									{
										te = p+1;
										{
											token = 197;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 15 :
								{
									{
										te = p+1;
										{
											token = 223;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 16 :
								{
									{
										te = p+1;
										{
											token = 224;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 17 :
								{
									{
										te = p+1;
										{
											token = 225;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 18 :
								{
									{
										te = p+1;
										{
											token = 226;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 19 :
								{
									{
										te = p+1;
										{
											token = 227;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 20 :
								{
									{
										te = p+1;
										{
											token = 228;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 21 :
								{
									{
										te = p+1;
										{
											token = 229;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 22 :
								{
									{
										te = p+1;
										{
											token = 230;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 23 :
								{
									{
										te = p+1;
										{
											token = 231;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 24 :
								{
									{
										te = p+1;
										{
											token = 232;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 25 :
								{
									{
										te = p+1;
										{
											token = 233;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 26 :
								{
									{
										te = p+1;
										{
											token = 234;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 27 :
								{
									{
										te = p+1;
										{
											token = 212;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 28 :
								{
									{
										te = p+1;
										{
											token = 213;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 29 :
								{
									{
										te = p+1;
										{
											token = 214;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 30 :
								{
									{
										te = p+1;
										{
											token = 215;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 31 :
								{
									{
										te = p+1;
										{
											token = 240;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 32 :
								{
									{
										te = p+1;
										{
											token = ( int ) ( ts[0] )
											;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 33 :
								{
									{
										te = p+1;
										{
											token = 242;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 34 :
								{
									{
										te = p+1;
										{
											token = 242;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 35 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 195;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 36 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 194;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 37 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 218;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 38 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 219;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 39 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 220;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 40 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 211;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 41 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = ( int ) ( ts[0] )
											;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 42 :
								{
									{
										te = p;
										p = p - 1;
										{
											token = 241;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 43 :
								{
									{
										p = ((te))-1;
										{
											token = 218;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 44 :
								{
									{
										p = ((te))-1;
										{
											token = ( int ) ( ts[0] )
											;
											printf( "%s", "<" );
											printf( "%d", token );
											printf( "%s", "> " );
											fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
											
										}
										
									}
									
								}
								
								break;
								case 45 :
								{
									{
										switch ( act  ) {
											case 0 :
											{
												{
													cs = 0;
													
												}
												
											}
											
											break;
											case 3 :
											p = ((te))-1;
											{
												token = 195;
												printf( "%s", "<" );
												printf( "%d", token );
												printf( "%s", "> " );
												fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
												
											}
											
											break;
											case 4 :
											p = ((te))-1;
											{
												token = 194;
												printf( "%s", "<" );
												printf( "%d", token );
												printf( "%s", "> " );
												fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
												
											}
											
											break;
											case 5 :
											p = ((te))-1;
											{
												token = 218;
												printf( "%s", "<" );
												printf( "%d", token );
												printf( "%s", "> " );
												fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
												
											}
											
											break;
											case 6 :
											p = ((te))-1;
											{
												token = 219;
												printf( "%s", "<" );
												printf( "%d", token );
												printf( "%s", "> " );
												fwrite ( ts , 1 , te - ts , stdout );printf( "%s", "\n" );
												
											}
											
											break;
											
										}
										
									}
									
									
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					_acts = _scanner_actions + _scanner_to_state_actions[cs];
					_nacts = ( unsigned int  ) (*( _acts  ))
					;
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( (*( _acts  ))
						) {
							case 0 :
							{
								{
									ts = 0;
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									act = 0;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
				
			}
			
		}
		
	}
}

void finish( )
{
	if ( cs >= scanner_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22",
	"'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/",
	"'\n'\n",
};

int inplen = 3;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

