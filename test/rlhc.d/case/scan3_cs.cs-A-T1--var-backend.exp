using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int ts;
		int te;
		int act;
		int token;
		
		
		
		
		static readonly sbyte  []_scanner_key_offsets = { 0, 0, 2, 0,  };
		static readonly char  []_scanner_trans_keys = { '\u0061', '\u0062', '\u0000',  };
		static readonly sbyte  []_scanner_single_lengths = { 0, 2, 0, 0,  };
		static readonly sbyte  []_scanner_range_lengths = { 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_index_offsets = { 0, 0, 3, 0,  };
		static readonly sbyte  []_scanner_trans_cond_spaces = { -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_scanner_trans_offsets = { 0, 1, 2, 3, 4, 0,  };
		static readonly sbyte  []_scanner_trans_lengths = { 1, 1, 1, 1, 1, 0,  };
		static readonly sbyte  []_scanner_cond_keys = { 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_cond_targs = { 2, 2, 0, 2, 1, 0,  };
		static readonly sbyte  []_scanner_cond_actions = { 3, 4, 0, 6, 5, 0,  };
		static readonly sbyte  []_scanner_to_state_actions = { 0, 1, 0, 0,  };
		static readonly sbyte  []_scanner_from_state_actions = { 0, 2, 0, 0,  };
		static readonly sbyte  []_scanner_eof_trans_indexed = { 0, 0, 2, 0,  };
		static readonly sbyte  []_scanner_eof_trans_direct = { 0, 0, 5, 0,  };
		static readonly sbyte  []_scanner_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_scanner_nfa_offsets = { 0, 0, 0, 0,  };
		static readonly sbyte  []_scanner_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_scanner_nfa_pop_trans = { 0, 0,  };
		static readonly int  scanner_start  = 1;
		static readonly int  scanner_first_final  = 1;
		static readonly int  scanner_error  = 0;
		static readonly int  scanner_en_main  = 1;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)scanner_start;
				ts = 0;
				te = 0;
				act = 0;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				int _klen;
				int _keys;
				int _ckeys;
				int _cpc;
				uint _trans;
				uint _cond = 0;
				uint _have = 0;
				uint _cont = 1;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _scanner_eof_trans_direct[cs] > 0 )
							{
								_trans = (uint )_scanner_eof_trans_direct[cs] - 1;
								_cond = (uint )_scanner_trans_offsets[_trans];
								_have = 1;
							}
							
							if ( _have == 0 )
							{
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							switch ( _scanner_from_state_actions[cs]  ) {
								case 2:
								{{ts = p;
									}}
								
								break;
								
							}
							_keys = _scanner_key_offsets[cs] ;
							_trans = (uint )_scanner_index_offsets[cs];
							_have = 0;
							_klen = (int)_scanner_single_lengths[cs];
							if ( _klen > 0 )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + _klen - 1;
								while ( _upper >= _lower && _have == 0 )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
									_upper = _mid - 1;
									
									else if ( ( data[p ]) > _scanner_trans_keys[_mid ] )
									_lower = _mid + 1;
									
									else
									{
										_trans += (uint )(_mid - _keys);
										_have = 1;
									}
									
								}
								
								if ( _have == 0 )
								{
									_keys += _klen;
									_trans += (uint )_klen;
								}
								
							}
							
							
							if ( _have == 0 )
							{
								_klen = (int)_scanner_range_lengths[cs];
								if ( _klen > 0 )
								{
									int _lower;
									int _mid;
									int _upper;
									_lower = _keys;
									_upper = _keys + (_klen<<1) - 2;
									while ( _have == 0&& _lower <= _upper  )
									{
										_mid = _lower + (((_upper-_lower) >> 1) & ~1);
										if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
										_upper = _mid - 2;
										
										else if ( ( data[p ]) > _scanner_trans_keys[_mid + 1] )
										_lower = _mid + 2;
										
										else
										{
											_trans += (uint )((_mid - _keys)>>1);
											_have = 1;
										}
										
									}
									
									if ( _have == 0 )
									_trans += (uint )_klen;
									
								}
								
							}
							
							
							_ckeys = _scanner_trans_offsets[_trans] ;
							_klen = (int)_scanner_trans_lengths[_trans];
							_cond = (uint )_scanner_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0&& _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < (int)_scanner_cond_keys[_mid ] )
									_upper = _mid - 1;
									
									else if ( _cpc > (int)_scanner_cond_keys[_mid ] )
									_lower = _mid + 1;
									
									else
									{
										_cond += (uint )(_mid - _ckeys);
										_have = 1;
									}
									
								}
								
								if ( _have == 0 )
								{
									cs = 0;
									_cont = 0;
								}
								
							}
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_scanner_cond_targs[_cond];
							switch ( _scanner_cond_actions[_cond]  ) {
								case 5:
								{{switch ( act  ) {
											case 1:
											p = ((te))-1;
											{Console.Write( "pat1\n" );}
											
											break;
											case 2:
											p = ((te))-1;
											{Console.Write( "pat2\n" );}
											
											break;
											case 3:
											p = ((te))-1;
											{Console.Write( "pat3\n" );}
											
											break;
											
										}
									}
								}
								
								break;
								case 3:
								{{te = p+1;
									}}
								{{act = 1;
									}}
								
								break;
								case 4:
								{{te = p+1;
									}}
								{{act = 2;
									}}
								
								break;
								case 6:
								{{te = p+1;
									}}
								{{act = 3;
									}}
								
								break;
								
							}
							switch ( _scanner_to_state_actions[cs]  ) {
								case 1:
								{{ts = 0;
									}}
								
								break;
								
							}
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= scanner_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"ab89",
		};
		
		
		static readonly int inplen = 1;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
