package main
import "fmt"

var ts  int ;
var te  int ;
var act  int ;
var token  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _scanner_actions [] int8  = [] int8  { 0, 1, 2, 1, 3, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 2, 0, 1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 0  }
var _scanner_key_offsets [] int16  = [] int16  { 0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0  }
var _scanner_trans_keys [] byte  = [] byte  { 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0 }
var _scanner_single_lengths [] int8  = [] int8  { 0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0  }
var _scanner_range_lengths [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0  }
var _scanner_index_offsets [] int16  = [] int16  { 0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0  }
var _scanner_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _scanner_trans_offsets [] int16  = [] int16  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0  }
var _scanner_trans_lengths [] int8  = [] int8  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _scanner_cond_keys [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _scanner_cond_targs [] int8  = [] int8  { 12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0  }
var _scanner_cond_actions [] int8  = [] int8  { 79, 7, 0, 0, 0, 79, 5, 0, 0, 0, 51, 77, 0, 0, 0, 79, 0, 79, 0, 0, 0, 55, 0, 57, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 90, 0, 0, 84, 0, 0, 0, 53, 90, 53, 0, 53, 0, 53, 0, 73, 0, 21, 71, 31, 71, 23, 37, 71, 27, 71, 43, 33, 71, 45, 35, 0, 71, 47, 69, 49, 0, 87, 71, 0, 9, 9, 0, 9, 9, 87, 61, 9, 9, 9, 9, 0, 61, 0, 0, 29, 71, 87, 0, 11, 11, 0, 11, 11, 0, 93, 63, 87, 0, 13, 13, 0, 13, 13, 93, 65, 15, 15, 15, 15, 0, 0, 0, 67, 87, 0, 11, 11, 0, 11, 11, 90, 63, 17, 71, 19, 71, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 59, 39, 71, 41, 25, 71, 79, 79, 79, 79, 77, 79, 79, 77, 77, 77, 75, 73, 71, 71, 71, 71, 71, 71, 69, 71, 61, 61, 71, 63, 65, 67, 63, 71, 71, 59, 59, 71, 71, 0  }
var _scanner_to_state_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _scanner_from_state_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _scanner_eof_trans_indexed [] int8  = [] int8  { 0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0  }
var _scanner_eof_trans_direct [] int16  = [] int16  { 0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0  }
var _scanner_nfa_targs [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _scanner_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var scanner_start  int  = 12
var scanner_first_final  int  = 12
var scanner_error  int  = 0
var scanner_en_main  int  = 12
func prepare() {

	{
		cs = int(scanner_start);
		ts = 0;
		te = 0;
		act = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _klen int 
		var  _trans  uint   = 0
		var  _cond  uint   = 0
		var  _acts int
		var  _nacts uint 
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_acts = int(_scanner_from_state_actions[cs] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 2 :
					{{ts = p;
						}}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
		}
		_keys = int(_scanner_key_offsets[cs] );
		_trans = uint(_scanner_index_offsets[cs]);
		_klen = int(_scanner_single_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + _klen - 1;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + ((_upper-_lower) >> 1);
						switch {
							case ( data[p ]) < _scanner_trans_keys[_mid ]:
							_upper = _mid - 1;
							
							case ( data[p ]) > _scanner_trans_keys[_mid ]:
							_lower = _mid + 1;
							
							default:
							{
								_trans += uint((_mid - _keys));
								goto _match;
							}
							
						}
					}
					
				}
				_keys += _klen;
				_trans += uint(_klen);
			}
			
			
		}
		_klen = int(_scanner_range_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + (_klen<<1) - 2;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + (((_upper-_lower) >> 1) & ^1);
						switch {
							case ( data[p ]) < _scanner_trans_keys[_mid ]:
							_upper = _mid - 2;
							
							case ( data[p ]) > _scanner_trans_keys[_mid + 1 ]:
							_lower = _mid + 2;
							
							default:
							{
								_trans += uint(((_mid - _keys)>>1));
								goto _match;
							}
							
						}
					}
					
				}
				_trans += uint(_klen);
			}
			
			
		}
		
		_match :
		_ckeys = int(_scanner_trans_offsets[_trans] );
		_klen = int(_scanner_trans_lengths[_trans]);
		_cond = uint(_scanner_trans_offsets[_trans]);
		_cpc = 0;
		{
			var  _lower int
			var  _mid int
			var  _upper int
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			for {
				{
					if _upper < _lower  {
						break;
						
						
					}
					_mid = _lower + ((_upper-_lower) >> 1);
					switch {
						case _cpc < int(_scanner_cond_keys[_mid ]):
						_upper = _mid - 1;
						
						case _cpc > int(_scanner_cond_keys[_mid ]):
						_lower = _mid + 1;
						
						default:
						{
							_cond += uint((_mid - _ckeys));
							goto _match_cond;
						}
						
					}
				}
				
			}
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = int(_scanner_cond_targs[_cond]);
		if _scanner_cond_actions[_cond] == 0  {
			goto _again;
			
			
		}
		_acts = int(_scanner_cond_actions[_cond] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 3 :
					{{te = p+1;
						}}
					
					break;
					case 4 :
					{{act = 3;
						}}
					
					break;
					case 5 :
					{{act = 4;
						}}
					
					break;
					case 6 :
					{{act = 5;
						}}
					
					break;
					case 7 :
					{{act = 6;
						}}
					
					break;
					case 8 :
					{{te = p+1;
							{token = 193;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 9 :
					{{te = p+1;
							{token = 192;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 10 :
					{{te = p+1;
							{token = 194;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 11 :
					{{te = p+1;
							{token = 218;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 12 :
					{{te = p+1;
							{token = 219;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 13 :
					{{te = p+1;
							{token = 220;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 14 :
					{{te = p+1;
							{token = 197;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 15 :
					{{te = p+1;
							{token = 223;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 16 :
					{{te = p+1;
							{token = 224;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 17 :
					{{te = p+1;
							{token = 225;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 18 :
					{{te = p+1;
							{token = 226;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 19 :
					{{te = p+1;
							{token = 227;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 20 :
					{{te = p+1;
							{token = 228;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 21 :
					{{te = p+1;
							{token = 229;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 22 :
					{{te = p+1;
							{token = 230;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 23 :
					{{te = p+1;
							{token = 231;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 24 :
					{{te = p+1;
							{token = 232;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 25 :
					{{te = p+1;
							{token = 233;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 26 :
					{{te = p+1;
							{token = 234;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 27 :
					{{te = p+1;
							{token = 212;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 28 :
					{{te = p+1;
							{token = 213;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 29 :
					{{te = p+1;
							{token = 214;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 30 :
					{{te = p+1;
							{token = 215;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 31 :
					{{te = p+1;
							{token = 240;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 32 :
					{{te = p+1;
							{token = ( int ) ( data[ts] )
								;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 33 :
					{{te = p+1;
							{token = 242;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 34 :
					{{te = p+1;
							{token = 242;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 35 :
					{{te = p;
							p = p - 1;
							{token = 195;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 36 :
					{{te = p;
							p = p - 1;
							{token = 194;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 37 :
					{{te = p;
							p = p - 1;
							{token = 218;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 38 :
					{{te = p;
							p = p - 1;
							{token = 219;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 39 :
					{{te = p;
							p = p - 1;
							{token = 220;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 40 :
					{{te = p;
							p = p - 1;
							{token = 211;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 41 :
					{{te = p;
							p = p - 1;
							{token = ( int ) ( data[ts] )
								;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 42 :
					{{te = p;
							p = p - 1;
							{token = 241;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 43 :
					{{p = ((te))-1;
							{token = 218;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 44 :
					{{p = ((te))-1;
							{token = ( int ) ( data[ts] )
								;
								fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
						}}
					
					break;
					case 45 :
					{{switch act  {
								case 0 :
								{{cs = 0;
										goto _again;}}
								
								break;
								case 3 :
								p = ((te))-1;
								{token = 195;
									fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
								
								break;
								case 4 :
								p = ((te))-1;
								{token = 194;
									fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
								
								break;
								case 5 :
								p = ((te))-1;
								{token = 218;
									fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
								
								break;
								case 6 :
								p = ((te))-1;
								{token = 219;
									fmt.Print( "<" );fmt.Print( token );fmt.Print( "> " );fmt.Print( data[ts:te] );fmt.Print( "\n" );}
								
								break;
								
							}
						}
					}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
			
		}
		
		_again :
		_acts = int(_scanner_to_state_actions[cs] );
		_nacts = uint(_scanner_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _scanner_actions[_acts ] {
					case 0 :
					{{ts = 0;
						}}
					
					break;
					case 1 :
					{{act = 0;
						}}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
		}
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				if _scanner_eof_trans_direct[cs] > 0  {
					{
						_trans = uint(_scanner_eof_trans_direct[cs] )- 1;
						_cond = uint(_scanner_trans_offsets[_trans]);
						goto _match_cond;
					}
					
				}
			}
			
			
		}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= scanner_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22",
	"'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/",
	"'\n'\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
