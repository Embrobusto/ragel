import crack.io cout;
import crack.lang Buffer;

int pos;
int line;





const array[byte ] _clang_trans_keys = [ 1, 0, 0, 12, 0, 12, 0, 0, 0, 2, 0, 7, 0, 0, 8, 9, 8, 10, 0, 0, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0,  ];
const array[int16 ] _clang_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 4, 4, 11, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 4, 4, 4, 4, 0 ,  ];
const array[int16 ] _clang_index_offsets = [ 0, 0, 13, 26, 27, 30, 38, 39, 41, 44, 45, 59, 73, 87, 101, 115, 129, 143, 157, 0 ,  ];
const array[int16 ] _clang_indices = [ 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 6, 5, 8, 7, 9, 8, 7, 9, 7, 7, 7, 7, 10, 12, 13, 13, 15, 15, 15, 1, 12, 10, 16, 17, 16, 18, 16, 19, 20, 21, 22, 22, 16, 22, 24, 23, 25, 26, 25, 27, 25, 28, 29, 30, 31, 31, 25, 31, 33, 32, 34, 35, 34, 36, 34, 37, 38, 39, 40, 40, 34, 40, 24, 23, 7, 26, 25, 27, 25, 11, 29, 30, 31, 31, 25, 31, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 50, 52, 51, 53, 54, 53, 55, 53, 56, 13, 13, 57, 57, 53, 57, 59, 58, 60, 61, 60, 62, 60, 63, 64, 64, 64, 64, 60, 64, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 49, 66, 65, 67, 68, 67, 69, 67, 70, 71, 71, 71, 72, 67, 72, 0 ,  ];
const array[int16 ] _clang_index_defaults = [ 0, 0, 4, 4, 7, 7, 11, 14, 14, 0, 10, 23, 32, 23, 41, 51, 58, 41, 65, 0 ,  ];
const array[int16 ] _clang_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _clang_cond_targs = [ 1, 1, 12, 9, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 0, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0 ,  ];
const array[int16 ] _clang_cond_actions = [ 1, 2, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 3, 1, 0, 4, 4, 5, 5, 4, 4, 4, 4, 6, 7, 8, 9, 9, 8, 8, 8, 8, 10, 11, 12, 13, 13, 12, 12, 12, 12, 14, 15, 16, 17, 17, 1, 16, 1, 16, 0, 18, 19, 20, 21, 21, 20, 20, 22, 23, 24, 25, 25, 24, 1, 26, 27, 28, 29, 29, 28, 1, 28, 0 ,  ];
const array[int16 ] _clang_eof_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 ,  ];
const array[int16 ] _clang_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _clang_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _clang_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _clang_nfa_pop_trans = [ 0, 0 ,  ];
const int  clang_start  = 10;
const int  clang_first_final  = 10;
const int  clang_error  = 0;
const int  clang_en_main  = 10;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	pos = 0;
	line = 1;
	
	if ( 1 ) {
		cs = int ( clang_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						if ( _clang_eof_actions[cs] == 22  ) {
							if ( 1 ) {
								cout.format( "ident(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 10  ) {
							if ( 1 ) {
								cout.format( "literal(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 18  ) {
							if ( 1 ) {
								cout.format( "float(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 14  ) {
							if ( 1 ) {
								cout.format( "int(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 26  ) {
							if ( 1 ) {
								cout.format( "hex(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						else if ( _clang_eof_actions[cs] == 6  ) {
							if ( 1 ) {
								cout.format( "symbol(" );
								cout.format( line );
								cout.format( "," );
								cout.format( buffer.size );
								cout.format( "): " );
								cout.format( buffer );
								cout.format( "\n" );
								
							}
							
						}
						;
						
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _clang_index_offsets[cs];
					if ( (data[p ])<= 126 && (data[p ])>= 10  )
					{
						int _ic = int ( _clang_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _clang_trans_keys[_keys+1 ] )&& _ic >= int ( _clang_trans_keys[_keys ] ) )
						_trans = uint32  ( _clang_indices[_inds + int ( (_ic - int ( _clang_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _clang_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _clang_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _clang_cond_targs[_trans] );
					if ( _clang_cond_actions[_trans] == 1  ) {
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 5  ) {
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 3  ) {
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 22  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 10  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 18  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 14  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 26  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 6  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 2  ) {
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 4  ) {
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 25  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 23  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 13  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 11  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 21  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 19  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 17  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 15  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 29  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 27  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 9  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 7  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							line = line + 1;
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 24  ) {
						if ( 1 ) {
							cout.format( "ident(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 12  ) {
						if ( 1 ) {
							cout.format( "literal(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 20  ) {
						if ( 1 ) {
							cout.format( "float(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 16  ) {
						if ( 1 ) {
							cout.format( "int(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 28  ) {
						if ( 1 ) {
							cout.format( "hex(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					else if ( _clang_cond_actions[_trans] == 8  ) {
						if ( 1 ) {
							cout.format( "symbol(" );
							cout.format( line );
							cout.format( "," );
							cout.format( buffer.size );
							cout.format( "): " );
							cout.format( buffer );
							cout.format( "\n" );
							
						}
						if ( 1 ) {
							buffer = "";
							
						}
						if ( 1 ) {
							buffer = buffer + ((data[p ]));
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= clang_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n" );
	m( "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n" );
}

main();
