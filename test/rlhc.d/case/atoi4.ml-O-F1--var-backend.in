host( "working/atoi4.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
}@
array int _atoi_trans_keys( 0, 4 ) = { 1, 0, 2, 4, 4, 4, 0, 4, 1, 0, 0 };

array s8 _atoi_char_class( 0, 4 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 };

array s8 _atoi_index_offsets( 0, 9 ) = { 0, 0, 3, 4, 9, 0 };

array s8 _atoi_indices( 0, 4 ) = { 0, 2, 3, 3, 4, 1, 1, 1, 3, 0 };

array s8 _atoi_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };

array s8 _atoi_cond_targs( 0, 4 ) = { 2, 0, 2, 3, 4, 0 };

array s8 _atoi_cond_actions( 0, 2 ) = { 0, 0, 1, 2, 0, 0 };

array s8 _atoi_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int atoi_start = 1;
value int atoi_first_final = 3;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/atoi4.rl", 18 ) @{
	
	let fail fmt = Printf.ksprintf failwith fmt
	
	let atoi data =
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let neg = ref false in
	let res = ref 0 in
	
}@
{
	cs = cast(int)atoi_start;
}

{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index int _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _atoi_trans_keys, (cs<<1) );
				_inds = offset( _atoi_indices, _atoi_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 57 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_atoi_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _atoi_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _atoi_trans_keys, _keys ) )
					_trans = cast(uint)deref( _atoi_indices, _inds + cast(int)( _ic - cast(int)deref( _atoi_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_atoi_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_atoi_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_atoi_cond_targs[_trans];
				
				switch ( _atoi_cond_actions[_trans] ) {
					case 1 {
						host( "working/atoi4.rl", 30 ) ${ neg := true; }$
					}
					case 2 {
						host( "working/atoi4.rl", 31 ) ${ res := !res * 10 + (={( deref( data, p ))}= - Char.code '0'); }$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/atoi4.rl", 40 ) @{
	
	if !neg then
	res := (-1) * !res ;
	
	print_int res.contents;
	print_string "\n";
	
	if !cs < atoi_first_final then
	fail "atoi: cs %d < %d" !cs atoi_first_final;
	
	!res 
	;;
	
	let () =
	let t = test atoi in
	t "7" 7;
	t "666" 666;
	t "-666" (-666);
	t "+666" 666;
	t "123456789" 123456789;
	t "+123456789\n" 123456789;
	error atoi "+ 1234567890";
	()
	;;
	
}@