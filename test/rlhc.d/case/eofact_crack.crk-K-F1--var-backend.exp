import crack.io cout;
import crack.lang Buffer;








const array[byte ] _eofact_trans_keys = [ 1, 0, 3, 7, 2, 2, 4, 4, 4, 4, 5, 5, 3, 3, 2, 2, 6, 6, 2, 2, 0, 0, 1, 0, 1, 0, 0,  ];
const array[int16 ] _eofact_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0 ,  ];
const array[int16 ] _eofact_index_offsets = [ 0, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 0 ,  ];
const array[int16 ] _eofact_indicies = [ 0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 ,  ];
const array[int16 ] _eofact_index_defaults = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _eofact_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _eofact_cond_targs = [ 2, 0, 6, 3, 4, 5, 10, 7, 8, 9, 12, 11, 0 ,  ];
const array[int16 ] _eofact_cond_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _eofact_eof_actions = [ 0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 0, 5, 0 ,  ];
const array[int16 ] _eofact_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _eofact_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _eofact_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _eofact_nfa_pop_trans = [ 0, 0 ,  ];
const int  eofact_start  = 1;
const int  eofact_first_final  = 10;
const int  eofact_error  = 0;
const int  eofact_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( eofact_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						if ( _eofact_eof_actions[cs] == 2  ) {
							if ( 1 ) {
								cout.format( "a1\n" );
								
							}
							
						}
						else if ( _eofact_eof_actions[cs] == 4  ) {
							if ( 1 ) {
								cout.format( "a2\n" );
								
							}
							
						}
						else if ( _eofact_eof_actions[cs] == 3  ) {
							if ( 1 ) {
								cout.format( "a3\n" );
								
							}
							
						}
						else if ( _eofact_eof_actions[cs] == 5  ) {
							if ( 1 ) {
								cout.format( "a4\n" );
								
							}
							
						}
						else if ( _eofact_eof_actions[cs] == 1  ) {
							if ( 1 ) {
								cout.format( "a1\n" );
								
							}
							if ( 1 ) {
								cout.format( "a3\n" );
								
							}
							
						}
						;
						
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _eofact_index_offsets[cs];
					if ( (data[p ])<= 116 && (data[p ])>= 10  )
					{
						int _ic = int ( _eofact_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _eofact_trans_keys[_keys+1 ] )&& _ic >= int ( _eofact_trans_keys[_keys ] ) )
						_trans = uint32  ( _eofact_indicies[_inds + int ( (_ic - int ( _eofact_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _eofact_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _eofact_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _eofact_cond_targs[_trans] );
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= eofact_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "" );
	m( "h" );
	m( "hell" );
	m( "hello" );
	m( "hello\n" );
	m( "t" );
	m( "ther" );
	m( "there" );
	m( "friend" );
}

main();
