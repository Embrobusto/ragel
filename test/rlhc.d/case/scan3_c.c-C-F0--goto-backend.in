host( "working/scan3_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	char * ts ;
	char * te ;
	int act ;
	int token ;
	
	
	
	
	
}@
array s8 _scanner_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 6, 2, 2, 3, 2, 2, 4, 2, 2, 5, 0 };

array char _scanner_trans_keys( 0, 1 ) = { 1, 0, 0, 1, 1, 0, 0 };

array s8 _scanner_char_class( 0, 1 ) = { 0, 1, 0 };

array s8 _scanner_index_offsets( 0, 2 ) = { 0, 0, 2, 0 };

array s8 _scanner_indices( 0, 2 ) = { 0, 2, 0 };

array s8 _scanner_index_defaults( 0, 4 ) = { 0, 1, 4, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 2 ) = { 2, 0, 2, 1, 2, 0 };

array s8 _scanner_cond_actions( 0, 13 ) = { 7, 0, 10, 5, 13, 0 };

array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };

array s8 _scanner_from_state_actions( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_eof_trans( 0, 4 ) = { 0, 0, 4, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 1;
value int scanner_first_final = 1;
value int scanner_error = 0;

value int scanner_en_main = 1;

host( "working/scan3_c.rl", 32 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/scan3_c.rl", 39 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
	}@
	{
		int _trans = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
				_nacts = cast(uint)deref( _scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _scanner_actions, _acts ) ) {
						case 1 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _scanner_trans_keys, (cs<<1) );
				_inds = offset( _scanner_indices, _scanner_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 98 && ( deref( data, p )) >= 97 )
				{
					int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
					if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
					_trans = cast(int)deref( _scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_scanner_index_defaults[cs];
				}
				else {
					_trans = cast(int)_scanner_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_scanner_cond_targs[_trans];
				
				if ( _scanner_cond_actions[_trans] == 0 )
				goto _again;
				
				_acts = offset( _scanner_actions, _scanner_cond_actions[_trans] );
				_nacts = cast(uint)deref( _scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _scanner_actions, _acts ) )
					{
						case 2 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
						}
						case 3 {
							host( "working/scan3_c.rl", 20 ) ${${act = 1;}$}$
						}
						case 4 {
							host( "working/scan3_c.rl", 22 ) ${${act = 2;}$}$
						}
						case 5 {
							host( "working/scan3_c.rl", 24 ) ${${act = 3;}$}$
						}
						case 6 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 1 {
											p = ((te))-1;
											host( "working/scan3_c.rl", 20 ) ${printf( "%s", "pat1\n" );
											}$ }
										case 2 {
											p = ((te))-1;
											host( "working/scan3_c.rl", 22 ) ${printf( "%s", "pat2\n" );
											}$ }
										case 3 {
											p = ((te))-1;
											host( "working/scan3_c.rl", 24 ) ${printf( "%s", "pat3\n" );
											}$ }
									}}$
							}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
				_nacts = cast(uint)deref( _scanner_actions, _acts ); _acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _scanner_actions, _acts ) ) {
						case 0 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					if ( _scanner_eof_trans[cs] > 0 ) {
						_trans = cast(int)_scanner_eof_trans[cs] - 1;
						goto _match_cond;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/scan3_c.rl", 47 ) @{
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"ab89",
	};
	
	int inplen = 1;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@