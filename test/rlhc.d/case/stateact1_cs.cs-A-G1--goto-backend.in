host( "working/stateact1_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			
			
			
			
			
			
		}@
		array s8 _state_act_to_state_actions( 0, 6 ) = { 0, 0, 1, 4, 6, 4, 0 };
		
		array s8 _state_act_from_state_actions( 0, 7 ) = { 0, 0, 2, 5, 7, 5, 0 };
		
		array s8 _state_act_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _state_act_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _state_act_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _state_act_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int state_act_start = 4;
		value int state_act_first_final = 4;
		value int state_act_error = 0;
		
		value int state_act_en_main = 4;
		value int state_act_en_main_line_again = 3;
		
		host( "working/stateact1_cs.rl", 43 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)state_act_start;
			}
			host( "working/stateact1_cs.rl", 48 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				_resume:
				switch ( _state_act_from_state_actions[cs] ) {
					case 5{
						host( "working/stateact1_cs.rl", 21 ) ${Console.Write( "b2\n" );}$
					}
					case 2{
						host( "working/stateact1_cs.rl", 23 ) ${Console.Write( "c2\n" );}$
					}
					case 7{
						host( "working/stateact1_cs.rl", 19 ) ${Console.Write( "a2\n" );}$	host( "working/stateact1_cs.rl", 21 ) ${Console.Write( "b2\n" );}$
					}
				}
				
				switch ( cs ) {
					case 4:
					if ( ( deref( data, p )) == c(104) ) {
						goto ctr3;
					}
					{
						goto ctr1;
					}
					case 0:
					goto _out;
					case 1:
					if ( ( deref( data, p )) == c(105) ) {
						goto ctr0;
					}
					{
						goto ctr1;
					}
					case 2:
					if ( ( deref( data, p )) == c(10) ) {
						goto ctr2;
					}
					{
						goto ctr1;
					}
					case 5:
					if ( ( deref( data, p )) == c(104) ) {
						goto ctr3;
					}
					{
						goto ctr1;
					}
					case 3:
					if ( ( deref( data, p )) == c(104) ) {
						goto ctr3;
					}
					{
						goto ctr1;
					}
				}
				
				ctr1: cs = 0; goto _again;
				ctr3: cs = 1; goto _again;
				ctr0: cs = 2; goto _again;
				ctr2: cs = 5; goto f2;
				
				f2:
				host( "working/stateact1_cs.rl", 24 ) ${cs = 3;}$
				goto _again;
				
				_again:
				switch ( _state_act_to_state_actions[cs] ) {
					case 4{
						host( "working/stateact1_cs.rl", 20 ) ${Console.Write( "b1\n" );}$
					}
					case 1{
						host( "working/stateact1_cs.rl", 22 ) ${Console.Write( "c1\n" );}$
					}
					case 6{
						host( "working/stateact1_cs.rl", 18 ) ${Console.Write( "a1\n" );}$	host( "working/stateact1_cs.rl", 20 ) ${Console.Write( "b1\n" );}$
					}
				}
				
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
				_test_eof: {}
				_out: {}
			}
			host( "working/stateact1_cs.rl", 59 ) @{
			}
			
			void finish( )
			{
				if ( cs >= state_act_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"hi\nhi\n",
			};
			
			
			static readonly int inplen = 1;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@