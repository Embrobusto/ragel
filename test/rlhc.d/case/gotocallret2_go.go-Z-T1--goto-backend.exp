package main
import "fmt"

var comm  byte ;
var top  int ;
var stack [32] int ;
var ts  int ;
var te  int ;
var act  int ;
var val  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _GotoCallRet_key_offsets [] int8  = [] int8  { 0, 0, 1, 2, 3, 4, 4, 10, 13, 15, 15, 21, 23, 24, 30, 31, 0  }
var _GotoCallRet_trans_keys [] byte  = [] byte  { 102, 111, 105, 108, 10, 32, 91, 123, 97, 122, 32, 97, 122, 97, 122, 32, 91, 123, 125, 97, 122, 97, 122, 32, 32, 91, 93, 123, 97, 122, 32, 97, 122, 0 }
var _GotoCallRet_single_lengths [] int8  = [] int8  { 0, 1, 1, 1, 1, 0, 4, 1, 0, 0, 4, 0, 1, 4, 1, 0, 0  }
var _GotoCallRet_range_lengths [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0  }
var _GotoCallRet_index_offsets [] int8  = [] int8  { 0, 0, 2, 4, 6, 8, 9, 15, 18, 20, 21, 27, 29, 31, 37, 39, 0  }
var _GotoCallRet_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _GotoCallRet_trans_offsets [] int8  = [] int8  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0  }
var _GotoCallRet_trans_lengths [] int8  = [] int8  { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _GotoCallRet_cond_keys [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _GotoCallRet_cond_targs [] int8  = [] int8  { 2, 6, 3, 6, 4, 6, 6, 6, 9, 6, 6, 6, 6, 7, 0, 1, 8, 6, 8, 6, 0, 10, 10, 10, 12, 11, 0, 11, 10, 12, 10, 13, 13, 14, 13, 15, 0, 14, 13, 15, 13, 6, 6, 6, 6, 6, 6, 10, 10, 13, 13, 0  }
var _GotoCallRet_cond_actions [] int8  = [] int8  { 0, 1, 0, 1, 0, 1, 2, 1, 4, 6, 7, 8, 10, 9, 0, 0, 0, 11, 0, 11, 0, 12, 13, 14, 0, 0, 0, 0, 15, 0, 16, 17, 18, 0, 19, 0, 0, 0, 20, 0, 21, 1, 1, 1, 1, 11, 11, 15, 16, 20, 21, 0  }
var _GotoCallRet_to_state_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0  }
var _GotoCallRet_from_state_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0  }
var _GotoCallRet_eof_trans_indexed [] int8  = [] int8  { 0, 6, 6, 6, 6, 0, 0, 12, 12, 0, 0, 19, 20, 0, 26, 27, 0  }
var _GotoCallRet_eof_trans_direct [] int8  = [] int8  { 0, 42, 43, 44, 45, 0, 0, 46, 47, 0, 0, 48, 49, 0, 50, 51, 0  }
var _GotoCallRet_nfa_targs [] int8  = [] int8  { 0, 0  }
var _GotoCallRet_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _GotoCallRet_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _GotoCallRet_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var GotoCallRet_start  int  = 6
var GotoCallRet_first_final  int  = 6
var GotoCallRet_error  int  = 0
var GotoCallRet_en_handle  int  = 5
var GotoCallRet_en_one  int  = 10
var GotoCallRet_en_two  int  = 13
var GotoCallRet_en_main  int  = 6
func prepare() {

	{
		cs = int(GotoCallRet_start);
		top = 0;
		ts = 0;
		te = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _klen int 
		var  _keys int
		var  _ckeys int
		var  _cpc int 
		var  _trans  uint   = 0
		var  _cond  uint   = 0
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		switch _GotoCallRet_from_state_actions[cs]  {
			case 5 :
			{{ts = p;
				}}
			
			break;
			
		}
		_keys = int(_GotoCallRet_key_offsets[cs] );
		_trans = uint(_GotoCallRet_index_offsets[cs]);
		_klen = int(_GotoCallRet_single_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + _klen - 1;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + ((_upper-_lower) >> 1);
						switch {
							case ( data[p ]) < _GotoCallRet_trans_keys[_mid ]:
							_upper = _mid - 1;
							
							case ( data[p ]) > _GotoCallRet_trans_keys[_mid ]:
							_lower = _mid + 1;
							
							default:
							{
								_trans += uint((_mid - _keys));
								goto _match;
							}
							
						}
					}
					
				}
				_keys += _klen;
				_trans += uint(_klen);
			}
			
			
		}
		_klen = int(_GotoCallRet_range_lengths[cs]);
		if _klen > 0  {
			{
				var  _lower int
				var  _mid int
				var  _upper int
				_lower = _keys;
				_upper = _keys + (_klen<<1) - 2;
				for {
					{
						if _upper < _lower  {
							break;
							
							
						}
						_mid = _lower + (((_upper-_lower) >> 1) & ^1);
						switch {
							case ( data[p ]) < _GotoCallRet_trans_keys[_mid ]:
							_upper = _mid - 2;
							
							case ( data[p ]) > _GotoCallRet_trans_keys[_mid + 1 ]:
							_lower = _mid + 2;
							
							default:
							{
								_trans += uint(((_mid - _keys)>>1));
								goto _match;
							}
							
						}
					}
					
				}
				_trans += uint(_klen);
			}
			
			
		}
		
		_match :
		_ckeys = int(_GotoCallRet_trans_offsets[_trans] );
		_klen = int(_GotoCallRet_trans_lengths[_trans]);
		_cond = uint(_GotoCallRet_trans_offsets[_trans]);
		_cpc = 0;
		{
			var  _lower int
			var  _mid int
			var  _upper int
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			for {
				{
					if _upper < _lower  {
						break;
						
						
					}
					_mid = _lower + ((_upper-_lower) >> 1);
					switch {
						case _cpc < int(_GotoCallRet_cond_keys[_mid ]):
						_upper = _mid - 1;
						
						case _cpc > int(_GotoCallRet_cond_keys[_mid ]):
						_lower = _mid + 1;
						
						default:
						{
							_cond += uint((_mid - _ckeys));
							goto _match_cond;
						}
						
					}
				}
				
			}
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = int(_GotoCallRet_cond_targs[_cond]);
		if _GotoCallRet_cond_actions[_cond] == 0  {
			goto _again;
			
			
		}
		switch _GotoCallRet_cond_actions[_cond]  {
			case 4 :
			{fmt.Print( "handle " );{p = p - 1;
				} 
				
				if ( val == 1 ) {
					{cs = (10);
					} 
					
				}
				if ( val == 2 ) {
					{cs = (13);
					} 
					
				}
				if ( val == 3 ) {
					{cs = 6;
					}}
			}
			
			break;
			case 9 :
			{{te = p+1;
				}}
			
			break;
			case 14 :
			{{te = p+1;
					{fmt.Print( "{ " );{stack[top] = cs;
							top += 1;
							cs = (10);
							goto _again;} 
					}
				}}
			
			break;
			case 13 :
			{{te = p+1;
					{fmt.Print( "[ " );{stack[top] = cs;
							top += 1;
							cs = (13);
							goto _again;} 
					}
				}}
			
			break;
			case 12 :
			{{te = p+1;
					{fmt.Print( "space " );}
				}}
			
			break;
			case 16 :
			{{te = p;
					p = p - 1;
					{fmt.Print( "} " );{top-= 1;
							cs = stack[top];
							goto _again;} 
					}
				}}
			
			break;
			case 15 :
			{{te = p;
					p = p - 1;
					{fmt.Print( "word " );val = 1;
						{cs = (5);
							goto _again;} 
					}
				}}
			
			break;
			case 19 :
			{{te = p+1;
					{fmt.Print( "{ " );{stack[top] = cs;
							top += 1;
							cs = (10);
							goto _again;} 
					}
				}}
			
			break;
			case 18 :
			{{te = p+1;
					{fmt.Print( "[ " );{stack[top] = cs;
							top += 1;
							cs = (13);
							goto _again;} 
					}
				}}
			
			break;
			case 17 :
			{{te = p+1;
					{fmt.Print( "space " );}
				}}
			
			break;
			case 20 :
			{{te = p;
					p = p - 1;
					{fmt.Print( "] " );{top-= 1;
							cs = stack[top];
							goto _again;} 
					}
				}}
			
			break;
			case 21 :
			{{te = p;
					p = p - 1;
					{fmt.Print( "word " );val = 2;
						{cs = (5);
							goto _again;} 
					}
				}}
			
			break;
			case 10 :
			{{te = p+1;
					{fmt.Print( "{ " );{stack[top] = cs;
							top += 1;
							cs = 10;
							goto _again;}}
				}}
			
			break;
			case 8 :
			{{te = p+1;
					{fmt.Print( "[ " );{stack[top] = cs;
							top += 1;
							cs = 13;
							goto _again;}}
				}}
			
			break;
			case 2 :
			{{te = p+1;
					{fmt.Print( "this is the foil" );}
				}}
			
			break;
			case 7 :
			{{te = p+1;
					{fmt.Print( "space " );}
				}}
			
			break;
			case 6 :
			{{te = p+1;
				}}
			
			break;
			case 11 :
			{{te = p;
					p = p - 1;
					{fmt.Print( "word " );val = 3;
						{cs = 5;
							goto _again;}}
				}}
			
			break;
			case 1 :
			{{p = ((te))-1;
					{fmt.Print( "word " );val = 3;
						{cs = 5;
							goto _again;}}
				}}
			
			break;
			
		}
		
		_again :
		switch _GotoCallRet_to_state_actions[cs]  {
			case 3 :
			{{ts = 0;
				}}
			
			break;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				if _GotoCallRet_eof_trans_direct[cs] > 0  {
					{
						_trans = uint(_GotoCallRet_eof_trans_direct[cs] )- 1;
						_cond = uint(_GotoCallRet_trans_offsets[_trans]);
						goto _match_cond;
					}
					
				}
			}
			
			
		}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= GotoCallRet_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"{a{b[c d]d}c}\n",
	"[a{b[c d]d}c}\n",
	"[a[b]c]d{ef{g{h}i}j}l\n",
	"{{[]}}\n",
	"a b c\n",
	"{a b c}\n",
	"[a b c]\n",
	"{]\n",
	"{{}\n",
	"[[[[[[]]]]]]\n",
	"[[[[[[]]}]]]\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
