#
# @LANG: ruby
# @GENERATED: true
#








class << self
	attr_accessor :_any1_trans_keys 
	private :_any1_trans_keys, :_any1_trans_keys=
end
self._any1_trans_keys = [
1, 0, 1, 0, 1, 0, 0 , 
]

class << self
	attr_accessor :_any1_char_class 
	private :_any1_char_class, :_any1_char_class=
end
self._any1_char_class = [
0 , 
]

class << self
	attr_accessor :_any1_index_offsets 
	private :_any1_index_offsets, :_any1_index_offsets=
end
self._any1_index_offsets = [
0, 0, 0, 0 , 
]

class << self
	attr_accessor :_any1_indicies 
	private :_any1_indicies, :_any1_indicies=
end
self._any1_indicies = [
0 , 
]

class << self
	attr_accessor :_any1_index_defaults 
	private :_any1_index_defaults, :_any1_index_defaults=
end
self._any1_index_defaults = [
0, 0, 1, 0 , 
]

class << self
	attr_accessor :_any1_trans_cond_spaces 
	private :_any1_trans_cond_spaces, :_any1_trans_cond_spaces=
end
self._any1_trans_cond_spaces = [
-1, -1, 0 , 
]

class << self
	attr_accessor :_any1_cond_targs 
	private :_any1_cond_targs, :_any1_cond_targs=
end
self._any1_cond_targs = [
2, 0, 0 , 
]

class << self
	attr_accessor :_any1_cond_actions 
	private :_any1_cond_actions, :_any1_cond_actions=
end
self._any1_cond_actions = [
0, 0, 0 , 
]

class << self
	attr_accessor :_any1_nfa_targs 
	private :_any1_nfa_targs, :_any1_nfa_targs=
end
self._any1_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_any1_nfa_offsets 
	private :_any1_nfa_offsets, :_any1_nfa_offsets=
end
self._any1_nfa_offsets = [
0, 0, 0, 0 , 
]

class << self
	attr_accessor :_any1_nfa_push_actions 
	private :_any1_nfa_push_actions, :_any1_nfa_push_actions=
end
self._any1_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_any1_nfa_pop_trans 
	private :_any1_nfa_pop_trans, :_any1_nfa_pop_trans=
end
self._any1_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :any1_start 
end
self.any1_start  = 1;

class << self
	attr_accessor :any1_first_final 
end
self.any1_first_final  = 2;

class << self
	attr_accessor :any1_error 
end
self.any1_error  = 0;

class << self
	attr_accessor :any1_en_main 
end
self.any1_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = any1_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_trans = _any1_index_defaults[cs];
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _any1_cond_targs[_trans];
								if ( cs == 0  )
									_cont = 0;
									
								end
								if ( _cont == 1  )
									p += 1;
									
								end
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	if cs >= any1_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
	end
end

inp = [
"",
"x",
"xx",
]

inplen = 3

inp.each { |str| run_machine(str) }

