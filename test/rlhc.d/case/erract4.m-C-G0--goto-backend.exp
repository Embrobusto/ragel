#include <stdio.h>
#include <Foundation/Foundation.h>

#define IDENT_BUFLEN 256

@interface ErrAct : NSObject
{
	@public
	int cs;
};

// Initialize the machine. Invokes any init statement blocks. Returns 0
// if the machine begins in a non-accepting state and 1 if the machine
// begins in an accepting state.
- (int) initFsm;

// Execute the machine on a block of data. Returns -1 if after processing
// the data, the machine is in the error state and can never accept, 0 if
// the machine is in a non-accepting state and 1 if the machine is in an
// accepting state.
- (void) executeWithData:(const char *)data len:(int)len;

// Indicate that there is no more data. Returns -1 if the machine finishes
// in the error state and does not accept, 0 if the machine finishes
// in any other non-accepting state and 1 if the machine finishes in an
// accepting state.
- (int) finish;

@end

@implementation ErrAct



static const char  _ErrAct_actions [] = { 0, 1, 0, 1, 1, 2, 1, 0, 0 ,  };
static const char  _ErrAct_eof_actions [] = { 0, 0, 1, 1, 1, 1, 1, 0 ,  };
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
static const int  ErrAct_start  = 0;
static const int  ErrAct_first_final  = 0;
static const int  ErrAct_error  = -1;
static const int  ErrAct_en_main  = 0;
- (int) initFsm;
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 1;
}

- (void) executeWithData:(const char *)_data len:(int)_len;
{
	const char *p = _data;
	const char *pe = _data + _len;
	const char *eof = pe;
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		_resume:
		switch ( cs  ) {
			case 0:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr1;
				}
				case 104:
				{
					goto ctr2;
				}
				
			}
			{
				goto ctr0;
			}
			case 1:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr4;
			}
			
			{
				goto ctr3;
			}
			case 2:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr1;
				}
				case 101:
				{
					goto ctr5;
				}
				
			}
			{
				goto ctr0;
			}
			case 3:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr1;
				}
				case 108:
				{
					goto ctr6;
				}
				
			}
			{
				goto ctr0;
			}
			case 4:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr1;
				}
				case 108:
				{
					goto ctr7;
				}
				
			}
			{
				goto ctr0;
			}
			case 5:
			switch ( ((*( p  ))
			) ) {
				case 10:
				{
					goto ctr1;
				}
				case 111:
				{
					goto ctr8;
				}
				
			}
			{
				goto ctr0;
			}
			case 6:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr9;
			}
			
			{
				goto ctr0;
			}
			
		}
		ctr9: cs = 0;
		goto f2;
		ctr3: cs = 1;
		goto _again;
		ctr0: cs = 1;
		goto f0;
		ctr1: cs = 1;
		goto f1;
		ctr4: cs = 1;
		goto f2;
		ctr2: cs = 2;
		goto _again;
		ctr5: cs = 3;
		goto _again;
		ctr6: cs = 4;
		goto _again;
		ctr7: cs = 5;
		goto _again;
		ctr8: cs = 6;
		goto _again;
		
		f0: _acts = _ErrAct_actions + 1 ;
		goto execFuncs;
		f2: _acts = _ErrAct_actions + 3 ;
		goto execFuncs;
		f1: _acts = _ErrAct_actions + 5 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					printf("hello fails\n");
				}
				
				break;
				case 1:
				{
					printf("newline\n");
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _ErrAct_actions + _ErrAct_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 0:
					{
						printf("hello fails\n");
					}
					
					break;
					
				}
				__acts += 1;
				__nacts -= 1;
			}
			
		}
		
		
	}
}

- (int) finish;
{
	if ( cs == ErrAct_error )
	return -1;
	else if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

@end

#include <stdio.h>
#include <string.h>
#define BUFSIZE 2048

ErrAct *fsm;
char buf[BUFSIZE];

void test( char *buf )
{
	int len = strlen(buf);
	fsm = [[ErrAct alloc] init];
	
	[fsm initFsm];
	[fsm executeWithData:buf len:len];
	if ( [fsm finish] > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test(
	"hello\n"
	"hello\n"
	"hello\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"hello there\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"he"	);
	
	test( "" );
	
	return 0;
}

