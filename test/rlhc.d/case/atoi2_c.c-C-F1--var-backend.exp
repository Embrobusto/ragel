#include <string.h>
#include <stdio.h>

int neg ;
int value ;





static const char  _state_chart_trans_keys [] = { 1, 0, 4, 4, 0, 4, 2, 4, 0 ,  };
static const char  _state_chart_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 ,  };
static const char  _state_chart_index_offsets [] = { 0, 0, 1, 6, 0 ,  };
static const char  _state_chart_indices [] = { 0, 2, 1, 1, 1, 0, 3, 4, 5, 0 ,  };
static const char  _state_chart_index_defaults [] = { 0, 1, 1, 1, 0 ,  };
static const char  _state_chart_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _state_chart_cond_targs [] = { 2, 0, 3, 1, 1, 2, 0 ,  };
static const char  _state_chart_cond_actions [] = { 1, 0, 2, 3, 4, 5, 0 ,  };
static const char  _state_chart_nfa_targs [] = { 0, 0 ,  };
static const char  _state_chart_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _state_chart_nfa_push_actions [] = { 0, 0 ,  };
static const char  _state_chart_nfa_pop_trans [] = { 0, 0 ,  };
static const int  state_chart_start  = 3;
static const int  state_chart_first_final  = 3;
static const int  state_chart_error  = 0;
static const int  state_chart_en_main  = 3;
int cs;
int blen;
char buffer[1024];

void init()
{
	value = 0;
	neg = 0;
	
	{
		cs = ( int ) state_chart_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _state_chart_trans_keys + (cs<<1);
					_inds = _state_chart_indices + _state_chart_index_offsets[cs];
					if ( ((*( p  ))
					)<= 57 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _state_chart_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _state_chart_index_defaults[cs];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _state_chart_index_defaults[cs];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _state_chart_cond_targs[_trans];
					switch ( _state_chart_cond_actions[_trans] ) {
						case 3 :
						{
							neg = 0;
							value = 0;
							
						}
						
						break;
						case 1 :
						{
							value = value * 10 + ( int ) ( (((*( p  ))
							)) - 48 )
							;
							
						}
						
						break;
						case 4 :
						{
							neg = 0;
							value = 0;
							
						}
						{
							neg = 1;
							
						}
						
						break;
						case 5 :
						{
							neg = 0;
							value = 0;
							
						}
						{
							value = value * 10 + ( int ) ( (((*( p  ))
							)) - 48 )
							;
							
						}
						
						break;
						case 2 :
						{
							if ( neg != 0 )
							{
								value = -1 * value;
								
							} 
							
						}
						{
							printf( "%d", value );
							printf( "%s", "\n" );
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
}

void finish( )
{
	if ( cs >= state_chart_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
};

int inplen = 9;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

