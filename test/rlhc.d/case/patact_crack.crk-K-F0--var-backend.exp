import crack.io cout;
import crack.lang Buffer;

byte comm;
int top;
array[int] stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
int
ts;
int
te;
int act;
int value;





const array[int16 ] _patact_actions = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 2, 2, 6, 2, 2, 7, 2, 2, 17, 2, 2, 18, 0 ,  ];
const array[byte ] _patact_trans_keys = [ 1, 0, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 0, 11, 2, 5, 2, 5, 2, 11, 0, 11, 4, 5, 7, 11, 0, 11, 2, 5, 2, 5, 2, 11, 6, 6, 0,  ];
const array[int16 ] _patact_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 10, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0 ,  ];
const array[int16 ] _patact_index_offsets = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 32, 36, 46, 58, 60, 65, 77, 81, 85, 95, 0 ,  ];
const array[int16 ] _patact_indicies = [ 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 20, 22, 23, 24, 25, 26, 26, 26, 26, 26, 27, 0, 23, 23, 27, 28, 23, 29, 31, 30, 30, 30, 30, 26, 26, 26, 26, 26, 32, 21, 32, 21, 33, 33, 21, 34, 34, 34, 34, 34, 33, 33, 34, 34, 34, 34, 34, 37, 21, 37, 38, 39, 40, 21, 41, 41, 41, 41, 41, 42, 10, 39, 39, 42, 43, 39, 44, 46, 45, 45, 45, 45, 41, 41, 41, 41, 41, 47, 0 ,  ];
const array[int16 ] _patact_index_defaults = [ 0, 0, 0, 0, 0, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 21, 0, 28, 30, 21, 35, 36, 21, 10, 43, 45, 21, 0 ,  ];
const array[int16 ] _patact_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _patact_cond_targs = [ 17, 2, 3, 4, 17, 17, 6, 7, 8, 17, 24, 10, 11, 12, 24, 24, 14, 15, 16, 24, 17, 0, 17, 18, 19, 17, 20, 1, 17, 18, 17, 5, 21, 22, 23, 21, 21, 24, 24, 25, 26, 27, 9, 24, 25, 24, 13, 28, 0 ,  ];
const array[int16 ] _patact_cond_actions = [ 47, 0, 0, 0, 35, 45, 0, 0, 0, 31, 27, 0, 0, 0, 17, 25, 0, 0, 0, 13, 33, 0, 39, 58, 58, 37, 5, 0, 43, 55, 41, 0, 7, 0, 0, 11, 9, 15, 19, 52, 52, 5, 0, 23, 49, 21, 0, 29, 0 ,  ];
const array[int16 ] _patact_to_state_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0 ,  ];
const array[int16 ] _patact_from_state_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0 ,  ];
const array[int16 ] _patact_eof_trans = [ 0, 1, 1, 1, 1, 6, 6, 6, 6, 11, 11, 11, 11, 16, 16, 16, 16, 0, 1, 29, 31, 0, 36, 37, 0, 11, 44, 46, 0, 0 ,  ];
const array[int16 ] _patact_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _patact_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _patact_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _patact_nfa_pop_trans = [ 0, 0 ,  ];
const int  patact_start  = 17;
const int  patact_first_final  = 17;
const int  patact_error  = 0;
const int  patact_en_other  = 21;
const int  patact_en_exec_test  = 24;
const int  patact_en_semi  = 28;
const int  patact_en_main  = 17;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( patact_start );
		ts = 0;
		te = 0;
		act = 0;
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _patact_eof_trans[cs]> 0  )
					{
						_trans = uint32  ( _patact_eof_trans[cs] )- 1;
						_have = 1;
						
					}
					
					if ( _have == 0  )
					{
					
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_acts = _patact_from_state_actions[cs];
					_nacts = uint32  ( _patact_actions[_acts ] );
					_acts += 1;
					while ( _nacts > 0  )
					{
						if ( _patact_actions[_acts ] == 1  ) {
							if ( 1 ) {
								if ( 1 ) {
									ts = p;
									
								}
								
							}
							
						}
						;
						_nacts -= 1;
						_acts += 1;
						
					}
					
					_keys = (cs<<1);
					_inds = _patact_index_offsets[cs];
					if ( (data[p ])<= 122 && (data[p ])>= 10  )
					{
						int _ic = int ( _patact_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _patact_trans_keys[_keys+1 ] )&& _ic >= int ( _patact_trans_keys[_keys ] ) )
						_trans = uint32  ( _patact_indicies[_inds + int ( (_ic - int ( _patact_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _patact_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _patact_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _patact_cond_targs[_trans] );
					if ( _patact_cond_actions[_trans]!= 0  )
					{
						_acts = _patact_cond_actions[_trans];
						_nacts = uint32  ( _patact_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _patact_actions[_acts ] == 2  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 3  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "space\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 4  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "word\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 5  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "num\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 6  ) {
								if ( 1 ) {
									if ( 1 ) {
										act = 7;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 7  ) {
								if ( 1 ) {
									if ( 1 ) {
										act = 8;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 8  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "word (c/lbh)\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 9  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "space\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 10  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "num (c/switch)\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 11  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 12  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "word (w/lbh)\n" );
											if ( 1 ) {
												p = ((te-1))-1;
												
											}
											
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 13  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "num (w/switch)\n" );
											if ( 1 ) {
												p = ((te-1))-1;
												
											}
											
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 14  ) {
								if ( 1 ) {
									if ( 1 ) {
										p = ((te))-1;
										if ( 1 ) {
											cout.format( "word (w/lbh)\n" );
											if ( 1 ) {
												p = ((te-1))-1;
												
											}
											
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 15  ) {
								if ( 1 ) {
									if ( 1 ) {
										if ( act  == 7  ) {
											p = ((te))-1;
											if ( 1 ) {
												cout.format( "num (w/switch)\n" );
												
											}
											
										}
										else if ( act  == 8  ) {
											p = ((te))-1;
											if ( 1 ) {
												cout.format( "num (w/switch)\n" );
												if ( 1 ) {
													p = ((te-1))-1;
													
												}
												
												if ( 1 ) {
													cs = 21;
													
												}
												
											}
											
										}
										;
										
									}
									
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 16  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "in semi\n" );
											if ( 1 ) {
												cs = 17;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 17  ) {
								if ( 1 ) {
									if ( 1 ) {
										act = 15;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 18  ) {
								if ( 1 ) {
									if ( 1 ) {
										act = 16;
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 19  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "word (c/lbh)\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 20  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "space\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 21  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "num (c/switch)\n" );
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 22  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "going to semi\n" );
											if ( 1 ) {
												p = p - 1;
												
											}
											if ( 1 ) {
												cs = 28;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 23  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p+1;
										if ( 1 ) {
											cout.format( "immdiate\n" );
											if ( 1 ) {
												cs = 24;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 24  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "word (w/lbh)\n" );
											if ( 1 ) {
												p = p - 1;
												
											}
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 25  ) {
								if ( 1 ) {
									if ( 1 ) {
										te = p;
										p = p - 1;
										if ( 1 ) {
											cout.format( "num (w/switch)\n" );
											if ( 1 ) {
												p = p - 1;
												
											}
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 26  ) {
								if ( 1 ) {
									if ( 1 ) {
										p = ((te))-1;
										if ( 1 ) {
											cout.format( "word (w/lbh)\n" );
											if ( 1 ) {
												p = p - 1;
												
											}
											if ( 1 ) {
												cs = 21;
												
											}
											
										}
										
									}
									
								}
								
							}
							else if ( _patact_actions[_acts ] == 27  ) {
								if ( 1 ) {
									if ( 1 ) {
										if ( act  == 15  ) {
											p = ((te))-1;
											if ( 1 ) {
												cout.format( "num (w/switch)\n" );
												
											}
											
										}
										else if ( act  == 16  ) {
											p = ((te))-1;
											if ( 1 ) {
												cout.format( "num (w/switch)\n" );
												if ( 1 ) {
													p = p - 1;
													
												}
												if ( 1 ) {
													cs = 21;
													
												}
												
											}
											
										}
										;
										
									}
									
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					_acts = _patact_to_state_actions[cs];
					_nacts = uint32  ( _patact_actions[_acts ] );
					_acts += 1;
					while ( _nacts > 0  )
					{
						if ( _patact_actions[_acts ] == 0  ) {
							if ( 1 ) {
								if ( 1 ) {
									ts = 0;
									
								}
								
							}
							
						}
						;
						_nacts -= 1;
						_acts += 1;
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= patact_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "abcd foix\n" );
	m( "abcd\nanother\n" );
	m( "123 foix\n" );
	m( "!abcd foix\n" );
	m( "!abcd\nanother\n" );
	m( "!123 foix\n" );
	m( ";" );
}

main();
