host( "working/scan1_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class scan1_java
	{
		int
		ts ;
		int
		te ;
		int act ;
		int token ;
		
		
		
		
		
	}@
	array s8 _scanner_actions( 0, 13 ) = { 0, 1, 2, 1, 3, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 2, 0, 1, 2, 3, 4, 2, 3, 5, 0 };
	
	array char _scanner_trans_keys( 0, 10 ) = { u(1), u(0), u(2), u(9), u(4), u(4), u(10), u(10), u(10), u(10), u(10), u(10), u(2), u(9), u(0), u(9), u(7), u(7), u(9), u(9), u(2), u(9), u(0) };
	
	array s8 _scanner_char_class( 0, 10 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 5, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0 };
	
	array s8 _scanner_index_offsets( 0, 32 ) = { 0, 0, 8, 9, 10, 11, 12, 20, 30, 31, 32, 0 };
	
	array s8 _scanner_indicies( 0, 18 ) = { 1, 2, 2, 2, 0, 0, 0, 2, 3, 6, 7, 8, 1, 2, 9, 10, 4, 4, 4, 2, 11, 4, 4, 2, 2, 2, 12, 13, 14, 15, 13, 18, 1, 2, 2, 2, 0, 0, 0, 2, 0 };
	
	array s8 _scanner_index_defaults( 0, 17 ) = { 0, 0, 4, 5, 5, 5, 4, 4, 16, 17, 0, 0 };
	
	array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _scanner_cond_targs( 0, 10 ) = { 7, 7, 1, 9, 0, 7, 4, 5, 7, 10, 10, 7, 7, 8, 2, 6, 7, 7, 3, 0 };
	
	array s8 _scanner_cond_actions( 0, 27 ) = { 19, 9, 0, 3, 0, 17, 0, 0, 7, 24, 27, 11, 5, 0, 0, 0, 13, 15, 0, 0 };
	
	array s8 _scanner_to_state_actions( 0, 21 ) = { 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0 };
	
	array s8 _scanner_from_state_actions( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
	
	array s8 _scanner_eof_trans( 0, 18 ) = { 0, 1, 0, 6, 6, 6, 0, 0, 17, 18, 1, 0 };
	
	array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int scanner_start = 7;
	value int scanner_first_final = 7;
	value int scanner_error = 0;
	
	value int scanner_en_main = 7;
	
	host( "working/scan1_java.rl", 75 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)scanner_start;
			ts = nil;
			te = nil;
			act = 0;
		}
		host( "working/scan1_java.rl", 80 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			int eof = len;
			String _s;
		}@
		{
			uint _trans = 0;
			uint _have = 0;
			uint _cont = 1;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _inds;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( p == eof )
					{
						if ( _scanner_eof_trans[cs] > 0 ) {
							_trans = cast(uint)_scanner_eof_trans[cs] - 1;
							_have = 1;
						}
						if ( _have == 0 ) {
						}
					}
					
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
						_nacts = cast(uint)deref( _scanner_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 ) {
							switch ( deref( _scanner_actions, _acts ) ) {
								case 2 {
									host( "NONE", 1 ) ${${ts = p;}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						_keys = offset( _scanner_trans_keys, (cs<<1) );
						_inds = offset( _scanner_indicies, _scanner_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 120 && ( deref( data, p )) >= 10 )
						{
							int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 10];
							if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
							_trans = cast(uint)deref( _scanner_indicies, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
							else
							_trans = cast(uint)_scanner_index_defaults[cs];
						}
						else {
							_trans = cast(uint)_scanner_index_defaults[cs];
						}
						
					}
					if ( _cont == 1 ) {
						cs = cast(int)_scanner_cond_targs[_trans];
						
						if ( _scanner_cond_actions[_trans] != 0 ) {
							_acts = offset( _scanner_actions, _scanner_cond_actions[_trans] );
							_nacts = cast(uint)deref( _scanner_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 )
							{
								switch ( deref( _scanner_actions, _acts ) )
								{
									case 3 {
										host( "NONE", 1 ) ${${te = p+1;}$}$
									}
									case 4 {
										host( "working/scan1_java.rl", 49 ) ${${act = 4;}$}$
									}
									case 5 {
										host( "working/scan1_java.rl", 57 ) ${${act = 5;}$}$
									}
									case 6 {
										host( "working/scan1_java.rl", 22 ) ${${te = p+1;host( "working/scan1_java.rl", 22 ) ${System.out.print( "on last     " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$}$}$
									}
									case 7 {
										host( "working/scan1_java.rl", 40 ) ${${te = p+1;host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$}$}$
									}
									case 8 {
										host( "working/scan1_java.rl", 66 ) ${${te = p+1;}$}$
									}
									case 9 {
										host( "working/scan1_java.rl", 68 ) ${${te = p+1;}$}$
									}
									case 10 {
										host( "working/scan1_java.rl", 31 ) ${${te = p;p = p - 1;host( "working/scan1_java.rl", 31 ) ${System.out.print( "on next     " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$}$}$
									}
									case 11 {
										host( "working/scan1_java.rl", 40 ) ${${te = p;p = p - 1;host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$}$}$
									}
									case 12 {
										host( "working/scan1_java.rl", 40 ) ${${p = ((te))-1;
												host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$}$}$
									}
									case 13 {
										host( "NONE", 1 ) ${${switch( act ) {
													case 0 {
														host( "NONE", 1 ) ${${cs = 0;}$}$ }
													case 4 {
														p = ((te))-1;
														host( "working/scan1_java.rl", 49 ) ${System.out.print( "lm switch1  " );
															if ( p + 1 == te )
															{
																System.out.print( "yes" );
																
															} 
															System.out.print( "\n" );
														}$ }
													case 5 {
														p = ((te))-1;
														host( "working/scan1_java.rl", 57 ) ${System.out.print( "lm switch2  " );
															if ( p + 1 == te )
															{
																System.out.print( "yes" );
																
															} 
															System.out.print( "\n" );
														}$ }
												}}$
										}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
						}
						
						_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
						_nacts = cast(uint)deref( _scanner_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 ) {
							switch ( deref( _scanner_actions, _acts ) ) {
								case 0 {
									host( "NONE", 1 ) ${${ts = nil;}$}$
								}
								case 1 {
									host( "NONE", 1 ) ${${act = 0;}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/scan1_java.rl", 92 ) @{
		}
		
		void finish( )
		{
			if ( cs >= scanner_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"abbc1d1d2\n",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			scan1_java machine = new scan1_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@