host( "working/cppscan1.rl", 1 ) @{/*
	* @@LANG: c++
	*
	* Test works with split code gen.
	*/
	
	#include "cppscan1.h"
	
	#ifdef PERF_TEST
	
	/* Calibrated to 1s on yoho. */
	#define perf_iters ( 158428ll * S )
	
	int _perf_dummy = 0;
	#define perf_printf(...) ( _perf_dummy += 1 )
	#define perf_loop long _pi; for ( _pi = 0; _pi < perf_iters; _pi++ )
	
	#else
	
	#define perf_printf(...) printf( __VA_ARGS__ )
	#define perf_loop
	
	#endif
	
	
	
}@
array s8 _Scanner_actions( 0, 37 ) = { 0, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 29, 1, 30, 1, 31, 1, 32, 1, 37, 2, 0, 36, 2, 0, 37, 2, 1, 36, 2, 1, 37, 2, 10, 37, 2, 28, 37, 2, 33, 37, 2, 34, 37, 2, 35, 37, 3, 2, 0, 36, 3, 2, 0, 37, 3, 2, 10, 37, 3, 2, 35, 37, 3, 3, 0, 36, 3, 3, 0, 37, 3, 3, 10, 37, 3, 3, 35, 37, 3, 4, 0, 36, 3, 4, 0, 37, 3, 4, 10, 37, 3, 4, 35, 37, 3, 5, 0, 36, 3, 5, 0, 37, 3, 5, 10, 37, 3, 5, 35, 37, 3, 6, 0, 36, 3, 6, 0, 37, 3, 6, 10, 37, 3, 6, 35, 37, 3, 7, 0, 36, 3, 7, 0, 37, 3, 7, 10, 37, 3, 7, 35, 37, 3, 8, 0, 36, 3, 8, 0, 37, 3, 8, 10, 37, 3, 8, 35, 37, 3, 9, 0, 36, 3, 9, 0, 37, 3, 9, 10, 37, 3, 9, 35, 37, 3, 10, 1, 37, 3, 11, 0, 36, 3, 11, 0, 37, 3, 11, 10, 37, 3, 11, 35, 37, 3, 12, 0, 36, 3, 12, 0, 37, 3, 12, 10, 37, 3, 12, 35, 37, 3, 13, 0, 36, 3, 13, 0, 37, 3, 13, 10, 37, 3, 13, 35, 37, 3, 14, 0, 36, 3, 14, 0, 37, 3, 14, 10, 37, 3, 14, 35, 37, 3, 15, 0, 36, 3, 15, 0, 37, 3, 15, 10, 37, 3, 15, 35, 37, 3, 16, 0, 36, 3, 16, 0, 37, 3, 16, 10, 37, 3, 16, 35, 37, 3, 17, 0, 36, 3, 17, 0, 37, 3, 17, 10, 37, 3, 17, 35, 37, 3, 18, 0, 36, 3, 18, 0, 37, 3, 18, 10, 37, 3, 18, 35, 37, 3, 19, 0, 36, 3, 19, 0, 37, 3, 19, 10, 37, 3, 19, 35, 37, 3, 20, 0, 36, 3, 20, 0, 37, 3, 20, 10, 37, 3, 20, 35, 37, 3, 21, 0, 36, 3, 21, 0, 37, 3, 21, 10, 37, 3, 21, 35, 37, 3, 22, 0, 36, 3, 22, 0, 37, 3, 22, 10, 37, 3, 22, 35, 37, 3, 23, 0, 36, 3, 23, 0, 37, 3, 23, 10, 37, 3, 23, 35, 37, 3, 24, 0, 36, 3, 24, 0, 37, 3, 24, 10, 37, 3, 24, 35, 37, 3, 25, 0, 36, 3, 25, 0, 37, 3, 25, 10, 37, 3, 25, 35, 37, 3, 26, 0, 36, 3, 26, 0, 37, 3, 26, 10, 37, 3, 26, 35, 37, 3, 27, 0, 36, 3, 27, 0, 37, 3, 27, 10, 37, 3, 27, 35, 37, 3, 29, 0, 36, 3, 29, 0, 37, 3, 29, 10, 37, 3, 29, 35, 37, 3, 30, 0, 36, 3, 30, 0, 37, 3, 30, 10, 37, 3, 30, 35, 37, 3, 31, 0, 36, 3, 31, 0, 37, 3, 31, 10, 37, 3, 31, 35, 37, 3, 32, 0, 36, 3, 32, 0, 37, 3, 32, 35, 37, 4, 2, 10, 1, 37, 4, 3, 10, 1, 37, 4, 4, 10, 1, 37, 4, 5, 10, 1, 37, 4, 6, 10, 1, 37, 4, 7, 10, 1, 37, 4, 8, 10, 1, 37, 4, 9, 10, 1, 37, 4, 11, 10, 1, 37, 4, 12, 10, 1, 37, 4, 13, 10, 1, 37, 4, 14, 10, 1, 37, 4, 15, 10, 1, 37, 4, 16, 10, 1, 37, 4, 17, 10, 1, 37, 4, 18, 10, 1, 37, 4, 19, 10, 1, 37, 4, 20, 10, 1, 37, 4, 21, 10, 1, 37, 4, 22, 10, 1, 37, 4, 23, 10, 1, 37, 4, 24, 10, 1, 37, 4, 25, 10, 1, 37, 4, 26, 10, 1, 37, 4, 27, 10, 1, 37, 4, 29, 10, 1, 37, 4, 30, 10, 1, 37, 4, 31, 10, 1, 37, 4, 32, 10, 1, 37, 0 };

array char _Scanner_trans_keys( 0, 29 ) = { 1, 0, 2, 25, 2, 25, 2, 9, 2, 13, 2, 2, 10, 15, 14, 15, 14, 21, 2, 2, 2, 2, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0, 29, 0 };

array s8 _Scanner_char_class( 0, 29 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 5, 6, 7, 8, 5, 5, 9, 10, 5, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 5, 5, 17, 18, 5, 5, 19, 19, 19, 19, 20, 21, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 22, 22, 22, 22, 5, 25, 5, 26, 22, 5, 19, 19, 19, 19, 20, 21, 22, 22, 22, 22, 22, 27, 22, 22, 22, 22, 22, 22, 22, 22, 24, 22, 22, 28, 22, 22, 5, 29, 5, 5, 0 };

array s16 _Scanner_index_offsets( 0, 1617 ) = { 0, 0, 24, 48, 56, 68, 69, 75, 77, 85, 86, 87, 117, 147, 177, 207, 237, 267, 297, 327, 357, 387, 417, 447, 477, 507, 537, 567, 597, 627, 657, 687, 717, 747, 777, 807, 837, 867, 897, 927, 957, 987, 1017, 1047, 1077, 1107, 1137, 1167, 1197, 1227, 1257, 1287, 1317, 1347, 1377, 1407, 1437, 1467, 1497, 1527, 1557, 1587, 1617, 0 };

array s16 _Scanner_indices( 0, 702 ) = { 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 7, 7, 7, 7, 7, 7, 9, 8, 7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 10, 12, 13, 13, 1, 1, 14, 14, 14, 14, 15, 15, 1, 1, 1, 15, 15, 15, 16, 17, 18, 10, 12, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 21, 34, 34, 34, 34, 35, 34, 21, 36, 34, 34, 37, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 65, 78, 78, 78, 78, 79, 78, 65, 80, 78, 78, 81, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 82, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 83, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 39, 38, 40, 41, 42, 43, 44, 84, 46, 47, 48, 49, 50, 51, 52, 53, 54, 85, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 87, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 91, 104, 104, 104, 104, 105, 104, 91, 106, 104, 104, 107, 109, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 113, 126, 126, 126, 126, 127, 126, 113, 128, 126, 126, 129, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 130, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 131, 49, 50, 51, 52, 53, 54, 132, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 134, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 138, 151, 151, 151, 151, 152, 151, 138, 153, 151, 151, 154, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 155, 50, 51, 52, 53, 54, 156, 157, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 159, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 163, 176, 176, 176, 176, 177, 176, 163, 178, 176, 176, 179, 39, 38, 40, 41, 42, 43, 44, 45, 46, 180, 48, 49, 181, 51, 182, 182, 54, 82, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 184, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 188, 201, 201, 201, 201, 202, 201, 188, 203, 201, 201, 204, 206, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 210, 223, 223, 223, 223, 224, 223, 210, 225, 223, 223, 226, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 182, 239, 240, 240, 241, 242, 232, 243, 244, 243, 243, 245, 245, 232, 246, 245, 247, 248, 250, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 182, 182, 263, 264, 254, 265, 244, 266, 265, 266, 265, 254, 267, 266, 265, 268, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 269, 82, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 182, 239, 270, 270, 241, 242, 232, 243, 244, 243, 243, 245, 245, 232, 246, 245, 243, 248, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 271, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 273, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 277, 290, 290, 290, 290, 291, 290, 277, 292, 290, 290, 293, 295, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 308, 309, 310, 299, 308, 308, 308, 308, 308, 308, 299, 311, 308, 308, 312, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 313, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 59, 315, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 319, 332, 332, 332, 332, 333, 332, 319, 334, 332, 332, 335, 295, 294, 296, 297, 0, 299, 300, 301, 4, 303, 304, 305, 306, 307, 308, 308, 309, 310, 299, 308, 308, 308, 308, 308, 308, 299, 311, 308, 308, 312, 39, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 336, 43, 56, 56, 56, 56, 57, 56, 43, 58, 56, 56, 337, 339, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 343, 356, 356, 356, 356, 357, 356, 343, 358, 356, 356, 359, 361, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 365, 378, 378, 378, 378, 379, 378, 365, 380, 378, 378, 381, 250, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 14, 14, 263, 264, 254, 265, 265, 266, 265, 266, 265, 254, 267, 266, 265, 268, 250, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 382, 383, 263, 264, 254, 265, 265, 265, 265, 384, 265, 254, 267, 265, 265, 268, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 385, 239, 386, 387, 241, 242, 232, 243, 243, 243, 243, 388, 388, 232, 246, 388, 243, 248, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 385, 239, 386, 387, 241, 242, 232, 243, 243, 243, 243, 389, 389, 232, 246, 389, 243, 248, 228, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 385, 239, 386, 387, 241, 242, 232, 243, 243, 243, 243, 390, 243, 232, 246, 243, 243, 248, 392, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 396, 409, 409, 409, 409, 410, 409, 396, 411, 409, 409, 412, 414, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 182, 425, 240, 240, 426, 427, 418, 428, 244, 428, 428, 429, 429, 418, 430, 429, 428, 431, 414, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 425, 433, 434, 426, 427, 418, 428, 428, 428, 428, 435, 435, 418, 430, 435, 428, 431, 414, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 432, 425, 433, 434, 426, 427, 418, 428, 428, 428, 428, 436, 428, 418, 430, 428, 428, 431, 438, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 15, 15, 451, 452, 442, 15, 15, 15, 453, 454, 454, 442, 455, 454, 453, 456, 438, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 451, 452, 442, 453, 453, 453, 453, 459, 459, 442, 455, 459, 453, 456, 438, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 451, 452, 442, 453, 453, 453, 453, 460, 453, 442, 455, 453, 453, 456, 462, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 466, 479, 479, 479, 479, 480, 479, 466, 481, 479, 479, 482, 484, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 488, 501, 501, 501, 501, 502, 501, 488, 503, 501, 501, 504, 506, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 510, 523, 523, 523, 523, 524, 523, 510, 525, 523, 523, 526, 528, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 532, 545, 545, 545, 545, 546, 545, 532, 547, 545, 545, 548, 550, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 554, 567, 567, 567, 567, 568, 567, 554, 569, 567, 567, 570, 572, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 576, 589, 589, 589, 589, 590, 589, 576, 591, 589, 589, 592, 594, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 598, 611, 611, 611, 611, 612, 611, 598, 613, 611, 611, 614, 616, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 620, 633, 633, 633, 633, 634, 633, 620, 635, 633, 633, 636, 638, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 642, 655, 655, 655, 655, 656, 655, 642, 657, 655, 655, 658, 660, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 664, 677, 677, 677, 677, 678, 677, 664, 679, 677, 677, 680, 682, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 686, 699, 699, 699, 699, 700, 699, 686, 701, 699, 699, 702, 0 };

array s16 _Scanner_index_defaults( 0, 681 ) = { 0, 0, 4, 7, 7, 11, 1, 1, 1, 4, 0, 10, 38, 60, 38, 38, 38, 86, 108, 38, 38, 133, 38, 158, 38, 183, 205, 227, 249, 38, 227, 38, 272, 294, 38, 314, 294, 38, 338, 360, 249, 249, 227, 227, 227, 391, 413, 413, 413, 437, 437, 437, 461, 483, 505, 527, 549, 571, 593, 615, 637, 659, 681, 0 };

array s8 _Scanner_trans_cond_spaces( -1, 0 ) = {};

array s8 _Scanner_cond_targs( 0, 62 ) = { 1, 0, 13, 10, 2, 18, 9, 3, 3, 4, 11, 5, 11, 7, 40, 49, 2, 1, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 62, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 31, 61, 17, 60, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 59, 21, 58, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 23, 55, 56, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 25, 53, 28, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 3, 20, 22, 24, 5, 27, 30, 29, 52, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 26, 46, 29, 31, 33, 6, 42, 34, 8, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 33, 41, 34, 37, 45, 30, 32, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 33, 29, 31, 34, 37, 35, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 38, 39, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 27, 30, 36, 24, 27, 30, 43, 44, 36, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 26, 29, 31, 33, 47, 34, 37, 24, 27, 30, 48, 36, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 29, 31, 33, 50, 34, 37, 27, 30, 51, 36, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 54, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 57, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 11, 11, 11, 12, 1, 14, 15, 16, 2, 19, 20, 22, 24, 26, 27, 30, 29, 31, 33, 36, 34, 37, 0 };

array s16 _Scanner_cond_actions( 0, 692 ) = { 70, 0, 70, 70, 70, 70, 70, 64, 61, 64, 64, 64, 61, 70, 70, 70, 67, 67, 85, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 73, 216, 216, 216, 216, 216, 216, 216, 216, 204, 212, 200, 587, 587, 587, 587, 587, 587, 587, 587, 587, 587, 208, 587, 587, 587, 70, 587, 587, 587, 587, 108, 116, 104, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 112, 557, 557, 557, 557, 557, 557, 557, 557, 587, 70, 70, 70, 272, 280, 268, 607, 607, 607, 607, 607, 607, 607, 607, 607, 607, 276, 607, 607, 607, 607, 607, 607, 607, 607, 92, 100, 88, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 96, 552, 552, 552, 552, 552, 552, 552, 552, 70, 70, 70, 416, 424, 412, 652, 652, 652, 652, 652, 652, 652, 652, 652, 652, 420, 652, 652, 652, 652, 652, 652, 652, 652, 70, 70, 70, 432, 440, 428, 657, 657, 657, 657, 657, 657, 657, 657, 657, 657, 436, 657, 657, 657, 657, 657, 657, 657, 657, 70, 59, 70, 480, 488, 476, 672, 672, 672, 672, 672, 672, 672, 672, 672, 672, 484, 672, 672, 672, 672, 672, 672, 672, 672, 544, 548, 540, 692, 692, 692, 692, 692, 692, 79, 692, 692, 692, 82, 692, 692, 692, 76, 692, 692, 692, 692, 140, 148, 136, 567, 567, 567, 567, 567, 567, 567, 567, 567, 144, 70, 567, 567, 567, 70, 70, 567, 70, 567, 188, 196, 184, 582, 582, 582, 582, 582, 582, 582, 582, 582, 582, 192, 582, 582, 582, 70, 582, 582, 70, 70, 70, 240, 248, 236, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 244, 597, 597, 597, 597, 597, 597, 597, 597, 124, 132, 120, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 128, 70, 562, 562, 562, 562, 70, 384, 392, 380, 642, 642, 642, 642, 642, 642, 642, 642, 642, 642, 388, 642, 642, 642, 642, 642, 642, 642, 642, 70, 70, 400, 408, 396, 647, 647, 647, 647, 647, 647, 647, 647, 647, 647, 404, 647, 647, 647, 647, 647, 647, 647, 647, 288, 296, 284, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 292, 612, 612, 612, 612, 612, 612, 612, 612, 582, 582, 582, 567, 567, 567, 70, 70, 567, 224, 232, 220, 592, 592, 592, 592, 592, 592, 592, 592, 592, 592, 228, 592, 592, 592, 592, 592, 592, 592, 592, 156, 164, 152, 572, 572, 572, 572, 572, 572, 572, 572, 572, 160, 572, 572, 572, 70, 572, 572, 572, 572, 572, 70, 572, 172, 180, 168, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 176, 577, 577, 577, 70, 577, 577, 577, 577, 70, 577, 496, 504, 492, 677, 677, 677, 677, 677, 677, 677, 677, 677, 677, 500, 677, 677, 677, 677, 677, 677, 677, 677, 512, 520, 508, 682, 682, 682, 682, 682, 682, 682, 682, 682, 59, 516, 682, 682, 682, 682, 682, 682, 682, 682, 528, 536, 524, 687, 687, 687, 687, 687, 687, 687, 687, 687, 687, 532, 687, 687, 687, 687, 687, 687, 687, 687, 352, 360, 348, 632, 632, 632, 632, 632, 632, 632, 632, 632, 632, 356, 632, 632, 632, 632, 632, 632, 632, 632, 448, 456, 444, 662, 662, 662, 662, 662, 662, 70, 662, 662, 662, 452, 662, 662, 662, 662, 662, 662, 662, 662, 464, 472, 460, 667, 667, 667, 667, 667, 667, 667, 667, 667, 667, 468, 667, 667, 667, 667, 667, 667, 667, 667, 336, 344, 332, 627, 627, 627, 627, 627, 627, 627, 627, 627, 627, 340, 627, 627, 627, 627, 627, 627, 627, 627, 304, 312, 300, 617, 617, 617, 617, 617, 617, 617, 617, 617, 617, 308, 617, 617, 617, 617, 617, 617, 617, 617, 368, 376, 364, 637, 637, 637, 637, 637, 637, 637, 637, 637, 637, 372, 637, 637, 637, 637, 637, 637, 637, 637, 320, 328, 316, 622, 622, 622, 622, 622, 622, 622, 622, 622, 622, 324, 622, 622, 622, 622, 622, 622, 622, 622, 256, 264, 252, 602, 602, 602, 602, 602, 602, 602, 602, 602, 602, 260, 602, 602, 602, 602, 602, 602, 602, 602, 0 };

array s8 _Scanner_eof_actions( 0, 57 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 15, 15, 15, 23, 1, 15, 15, 41, 15, 43, 15, 49, 57, 7, 13, 15, 7, 15, 19, 5, 15, 37, 5, 15, 39, 25, 13, 13, 7, 7, 7, 17, 9, 9, 9, 11, 11, 11, 51, 53, 55, 33, 45, 47, 31, 27, 35, 29, 21, 0 };

array s8 _Scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Scanner_start = 11;
value int Scanner_first_final = 11;
value int Scanner_error = 0;

value int Scanner_en_main = 11;

host( "working/cppscan1.rl", 139 ) @{
	
	void Scanner::init( )
	{
	}
	
	int Scanner::execute( const char *data, int len )
	{
		perf_loop
		{
			Scanner *fsm = this;
			
			/* A count of the number of characters in 
			* a token. Used for % sequences. */
			count = 0;
			line = 1;
			col = 1;
			
		}@
		{
			host( "-", 1 ) @{fsm->}@ -> cs = cast(int)Scanner_start;
		}
		host( "working/cppscan1.rl", 157 ) @{
			const char *p = data;
			const char *pe = data + len;
			const char *eof = pe;
			
		}@
		{
			uint _trans = 0;
			uint _have = 0;
			uint _cont = 1;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s16 _inds;
			while ( _cont == 1 ) {
				
				if ( host( "-", 1 ) @{fsm->}@ -> cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( p == eof )
					{
						if ( _have == 0 ) {
							index s8 __acts;
							uint __nacts;
							__acts = offset( _Scanner_actions, _Scanner_eof_actions[host( "-", 1 ) @{fsm->}@ -> cs] );
							__nacts = cast(uint)deref( _Scanner_actions, __acts );
							__acts += 1;
							while ( __nacts > 0 ) {
								switch ( deref( _Scanner_actions, __acts ) ) {
									case 2 {
										host( "working/cppscan1.rl", 32 ) ${ fsm->token( TK_Slit ); }$
									}
									case 3 {
										host( "working/cppscan1.rl", 33 ) ${ fsm->token( TK_Dlit ); }$
									}
									case 4 {
										host( "working/cppscan1.rl", 34 ) ${ fsm->token( TK_Id ); }$
									}
									case 5 {
										host( "working/cppscan1.rl", 35 ) ${ fsm->token( TK_IntegerDecimal ); }$
									}
									case 6 {
										host( "working/cppscan1.rl", 36 ) ${ fsm->token( TK_IntegerOctal ); }$
									}
									case 7 {
										host( "working/cppscan1.rl", 37 ) ${ fsm->token( TK_IntegerHex ); }$
									}
									case 8 {
										host( "working/cppscan1.rl", 38 ) ${ fsm->token( TK_Float ); }$
									}
									case 9 {
										host( "working/cppscan1.rl", 39 ) ${ fsm->token( fsm->tokBuf.data[0] ); }$
									}
									case 11 {
										host( "working/cppscan1.rl", 67 ) ${fsm->token( TK_NameSep );}$
									}
									case 12 {
										host( "working/cppscan1.rl", 68 ) ${fsm->token( TK_EqualsEquals );}$
									}
									case 13 {
										host( "working/cppscan1.rl", 69 ) ${fsm->token( TK_NotEquals );}$
									}
									case 14 {
										host( "working/cppscan1.rl", 70 ) ${fsm->token( TK_AndAnd );}$
									}
									case 15 {
										host( "working/cppscan1.rl", 71 ) ${fsm->token( TK_OrOr );}$
									}
									case 16 {
										host( "working/cppscan1.rl", 72 ) ${fsm->token( TK_MultAssign );}$
									}
									case 17 {
										host( "working/cppscan1.rl", 73 ) ${fsm->token( TK_PercentAssign );}$
									}
									case 18 {
										host( "working/cppscan1.rl", 74 ) ${fsm->token( TK_PlusAssign );}$
									}
									case 19 {
										host( "working/cppscan1.rl", 75 ) ${fsm->token( TK_MinusAssign );}$
									}
									case 20 {
										host( "working/cppscan1.rl", 76 ) ${fsm->token( TK_AmpAssign );}$
									}
									case 21 {
										host( "working/cppscan1.rl", 77 ) ${fsm->token( TK_CaretAssign );}$
									}
									case 22 {
										host( "working/cppscan1.rl", 78 ) ${fsm->token( TK_BarAssign );}$
									}
									case 23 {
										host( "working/cppscan1.rl", 79 ) ${fsm->token( TK_PlusPlus );}$
									}
									case 24 {
										host( "working/cppscan1.rl", 80 ) ${fsm->token( TK_MinusMinus );}$
									}
									case 25 {
										host( "working/cppscan1.rl", 81 ) ${fsm->token( TK_Arrow );}$
									}
									case 26 {
										host( "working/cppscan1.rl", 82 ) ${fsm->token( TK_ArrowStar );}$
									}
									case 27 {
										host( "working/cppscan1.rl", 83 ) ${fsm->token( TK_DotStar );}$
									}
									case 29 {
										host( "working/cppscan1.rl", 86 ) ${fsm->token( TK_DivAssign );}$
									}
									case 30 {
										host( "working/cppscan1.rl", 89 ) ${fsm->token('.'); fsm->buf('.'); fsm->token('.');}$
									}
									case 31 {
										host( "working/cppscan1.rl", 92 ) ${fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );}$
									}
									case 32 {
										host( "working/cppscan1.rl", 104 ) ${ fsm->buf('/'); fsm->token( '/' ); }$
									}
								}
								__nacts -= 1;
								__acts += 1;
							}
						}
					}
					
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _Scanner_trans_keys, (host( "-", 1 ) @{fsm->}@ -> cs<<1) );
						_inds = offset( _Scanner_indices, _Scanner_index_offsets[host( "-", 1 ) @{fsm->}@ -> cs] );
						
						if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 0 )
						{
							int _ic = cast(int)_Scanner_char_class[cast(int)( deref( data, p )) - 0];
							if ( _ic <= cast(int)deref( _Scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Scanner_trans_keys, _keys ) )
							_trans = cast(uint)deref( _Scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _Scanner_trans_keys, _keys ) )  ); 
							else
							_trans = cast(uint)_Scanner_index_defaults[host( "-", 1 ) @{fsm->}@ -> cs];
						}
						else {
							_trans = cast(uint)_Scanner_index_defaults[host( "-", 1 ) @{fsm->}@ -> cs];
						}
						
					}
					if ( _cont == 1 ) {
						host( "-", 1 ) @{fsm->}@ -> cs = cast(int)_Scanner_cond_targs[_trans];
						
						if ( _Scanner_cond_actions[_trans] != 0 ) {
							_acts = offset( _Scanner_actions, _Scanner_cond_actions[_trans] );
							_nacts = cast(uint)deref( _Scanner_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 )
							{
								switch ( deref( _Scanner_actions, _acts ) )
								{
									case 0 {
										host( "working/cppscan1.rl", 29 ) ${ fsm->pass(={( deref( data, p ))}=); }$
									}
									case 1 {
										host( "working/cppscan1.rl", 30 ) ${ fsm->buf(={( deref( data, p ))}=); }$
									}
									case 2 {
										host( "working/cppscan1.rl", 32 ) ${ fsm->token( TK_Slit ); }$
									}
									case 3 {
										host( "working/cppscan1.rl", 33 ) ${ fsm->token( TK_Dlit ); }$
									}
									case 4 {
										host( "working/cppscan1.rl", 34 ) ${ fsm->token( TK_Id ); }$
									}
									case 5 {
										host( "working/cppscan1.rl", 35 ) ${ fsm->token( TK_IntegerDecimal ); }$
									}
									case 6 {
										host( "working/cppscan1.rl", 36 ) ${ fsm->token( TK_IntegerOctal ); }$
									}
									case 7 {
										host( "working/cppscan1.rl", 37 ) ${ fsm->token( TK_IntegerHex ); }$
									}
									case 8 {
										host( "working/cppscan1.rl", 38 ) ${ fsm->token( TK_Float ); }$
									}
									case 9 {
										host( "working/cppscan1.rl", 39 ) ${ fsm->token( fsm->tokBuf.data[0] ); }$
									}
									case 10 {
										host( "working/cppscan1.rl", 40 ) ${ fsm->tokStart = fsm->col; }$
									}
									case 11 {
										host( "working/cppscan1.rl", 67 ) ${fsm->token( TK_NameSep );}$
									}
									case 12 {
										host( "working/cppscan1.rl", 68 ) ${fsm->token( TK_EqualsEquals );}$
									}
									case 13 {
										host( "working/cppscan1.rl", 69 ) ${fsm->token( TK_NotEquals );}$
									}
									case 14 {
										host( "working/cppscan1.rl", 70 ) ${fsm->token( TK_AndAnd );}$
									}
									case 15 {
										host( "working/cppscan1.rl", 71 ) ${fsm->token( TK_OrOr );}$
									}
									case 16 {
										host( "working/cppscan1.rl", 72 ) ${fsm->token( TK_MultAssign );}$
									}
									case 17 {
										host( "working/cppscan1.rl", 73 ) ${fsm->token( TK_PercentAssign );}$
									}
									case 18 {
										host( "working/cppscan1.rl", 74 ) ${fsm->token( TK_PlusAssign );}$
									}
									case 19 {
										host( "working/cppscan1.rl", 75 ) ${fsm->token( TK_MinusAssign );}$
									}
									case 20 {
										host( "working/cppscan1.rl", 76 ) ${fsm->token( TK_AmpAssign );}$
									}
									case 21 {
										host( "working/cppscan1.rl", 77 ) ${fsm->token( TK_CaretAssign );}$
									}
									case 22 {
										host( "working/cppscan1.rl", 78 ) ${fsm->token( TK_BarAssign );}$
									}
									case 23 {
										host( "working/cppscan1.rl", 79 ) ${fsm->token( TK_PlusPlus );}$
									}
									case 24 {
										host( "working/cppscan1.rl", 80 ) ${fsm->token( TK_MinusMinus );}$
									}
									case 25 {
										host( "working/cppscan1.rl", 81 ) ${fsm->token( TK_Arrow );}$
									}
									case 26 {
										host( "working/cppscan1.rl", 82 ) ${fsm->token( TK_ArrowStar );}$
									}
									case 27 {
										host( "working/cppscan1.rl", 83 ) ${fsm->token( TK_DotStar );}$
									}
									case 28 {
										host( "working/cppscan1.rl", 86 ) ${fsm->buf('/');fsm->buf(={( deref( data, p ))}=);}$
									}
									case 29 {
										host( "working/cppscan1.rl", 86 ) ${fsm->token( TK_DivAssign );}$
									}
									case 30 {
										host( "working/cppscan1.rl", 89 ) ${fsm->token('.'); fsm->buf('.'); fsm->token('.');}$
									}
									case 31 {
										host( "working/cppscan1.rl", 92 ) ${fsm->buf('.'); fsm->buf('.'); fsm->token( TK_DotDotDot );}$
									}
									case 32 {
										host( "working/cppscan1.rl", 104 ) ${ fsm->buf('/'); fsm->token( '/' ); }$
									}
									case 33 {
										host( "working/cppscan1.rl", 109 ) ${fsm->pass('/'); fsm->pass('*');}$
									}
									case 34 {
										host( "working/cppscan1.rl", 110 ) ${fsm->pass('/'); fsm->pass('/');}$
									}
									case 35 {
										host( "working/cppscan1.rl", 113 ) ${ 
											/* On EOF char, write out the non token buffer. */
											fsm->nonTokBuf.append(0);
											#ifndef PERF_TEST
											cout << fsm->nonTokBuf.data;
											#endif
											fsm->nonTokBuf.clear();
										}$
									}
									case 36 {
										host( "working/cppscan1.rl", 132 ) ${ fsm->line += 1; fsm->col = 1; }$
									}
									case 37 {
										host( "working/cppscan1.rl", 133 ) ${ fsm->col += 1; }$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
						}
						
						if ( host( "-", 1 ) @{fsm->}@ -> cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/cppscan1.rl", 162 ) @{
		}
		
		if ( cs == Scanner_error )
		return -1;
		if ( cs >= Scanner_first_final )
		return 1;
		return 0;
	}
	
	int Scanner::finish( )
	{
		if ( cs == Scanner_error )
		return -1;
		if ( cs >= Scanner_first_final )
		return 1;
		return 0;
	}
	
	void Scanner::token( int id )
	{
		/* Leader. */
		if ( nonTokBuf.length > 0 ) {
			nonTokBuf.append(0);
			#ifndef PERF_TEST
			cout << nonTokBuf.data;
			#endif
			nonTokBuf.clear();
		}
		
		/* Token data. */
		tokBuf.append(0);
		#ifndef PERF_TEST
		cout << '<' << id << '>' << tokBuf.data;
		#endif
		tokBuf.clear();
	}
	
	void Buffer::empty()
	{
		if ( data != 0 ) {
			free( data );
			
			data = 0;
			length = 0;
			allocated = 0;
		}
	}
	
	void Buffer::upAllocate( int len )
	{
		if ( data == 0 )
		data = (char*) malloc( len );
		else
		data = (char*) realloc( data, len );
		allocated = len;
	}
	
	void test( const char *buf )
	{
		Scanner scanner(cout);
		scanner.execute( buf, strlen(buf) );
		
		/* The last token is ignored (because there is no next token). Send
		* trailing null to force the last token into whitespace. */
		char eof = 0;
		if ( scanner.execute( &eof, 1 ) <= 0 ) {
			#ifndef PERF_TEST
			cerr << "cppscan: scan failed" << endl;
			#endif
			return;
		}
		#ifndef PERF_TEST
		cout.flush();
		#endif
	}
	
	int main()
	{
		test( 
		"/*\n"
		" *  Copyright \n"
		" */\n"
		"\n"
		"/* Construct an fsmmachine from a graph. */\n"
		"RedFsmAp::RedFsmAp( FsmAp *graph, bool complete )\n"
		":\n"
		"	graph(graph),\n"
		"{\n"
			"	assert( sizeof(RedTransAp) <= sizeof(TransAp) );\n"
			"\n"
			"	reduceMachine();\n"
			"}\n"
		"\n"
		"{\n"
			"	/* Get the transition that we want to extend. */\n"
			"	RedTransAp *extendTrans = list[pos].value;\n"
			"\n"
			"	/* Look ahead in the transition list. */\n"
			"	for ( int next = pos + 1; next < list.length(); pos++, next++ ) {\n"
				"		if ( ! keyOps->eq( list[pos].highKey, nextKey ) )\n"
				"			break;\n"
				"	}\n"
			"	return false;\n"
			"}\n"
		"\n" );
		
		test( 
		"->*\n"
		".*\n"
		"/*\"*/\n"
		"\"/*\"\n"
		"L'\"'\n"
		"L\"'\"\n" );
		
		return 0;
	}
	
}@