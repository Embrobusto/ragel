host( "working/minimize1.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	struct min
	{
		int cs;
	};
	
	
	
}@
array s8 _min_actions( 0, 1 ) = { 0, 1, 0, 0 };

array char _min_trans_keys( 0, 2 ) = { 1, 0, 2, 2, 0, 2, 1, 0, 0 };

array s8 _min_char_class( 0, 2 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0 };

array s8 _min_index_offsets( 0, 4 ) = { 0, 0, 1, 4, 0 };

array s8 _min_indicies( 0, 3 ) = { 0, 2, 1, 3, 0 };

array s8 _min_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _min_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0 };

array s8 _min_cond_targs( 0, 3 ) = { 2, 0, 3, 2, 0 };

array s8 _min_cond_actions( 0, 1 ) = { 0, 0, 0, 1, 0 };

array s8 _min_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _min_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _min_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _min_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int min_start = 1;
value int min_first_final = 3;
value int min_error = 0;

value int min_en_main = 1;

host( "working/minimize1.rl", 26 ) @{
	
	void min_init( struct min *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)min_start;
	}
	host( "working/minimize1.rl", 30 ) @{
	}
	
	void min_execute( struct min *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _min_trans_keys, (host( "-", 1 ) ={ fsm->cs}=<<1) );
					_inds = offset( _min_indicies, _min_index_offsets[host( "-", 1 ) ={ fsm->cs}=] );
					
					if ( ( deref( data, p )) <= 98 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_min_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _min_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _min_trans_keys, _keys ) )
						_trans = cast(uint)deref( _min_indicies, _inds + cast(int)( _ic - cast(int)deref( _min_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_min_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					else {
						_trans = cast(uint)_min_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					
				}
				if ( _cont == 1 ) {
					host( "-", 1 ) ={ fsm->cs}= = cast(int)_min_cond_targs[_trans];
					
					if ( _min_cond_actions[_trans] != 0 ) {
						_acts = offset( _min_actions, _min_cond_actions[_trans] );
						_nacts = cast(uint)deref( _min_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _min_actions, _acts ) )
							{
								case 0 {
									host( "working/minimize1.rl", 17 ) ${ printf("a or b\n"); }$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/minimize1.rl", 38 ) @{
	}
	
	int min_finish( struct min *fsm )
	{
		if ( fsm->cs == min_error )
		return -1;
		if ( fsm->cs >= min_first_final )
		return 1;
		return 0;
	}
	
	struct min fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		min_init( &fsm );
		min_execute( &fsm, buf, len );
		if ( min_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test( "aaaaaa\n" );
		test( "a\n" );
		test( "abc\n" );
		return 0;
	}
	
}@