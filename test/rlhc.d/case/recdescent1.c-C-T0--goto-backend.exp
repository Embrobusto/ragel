#include <stdio.h>
#include <stdlib.h>
#include <string.h>



static const char  _recdescent_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0 ,  };
static const char  _recdescent_key_offsets [] = { 0, 0, 1, 13, 25, 0 ,  };
static const char  _recdescent_trans_keys [] = { 125, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 0 ,  };
static const char  _recdescent_single_lengths [] = { 0, 1, 4, 4, 4, 0 ,  };
static const char  _recdescent_range_lengths [] = { 0, 0, 4, 4, 4, 0 ,  };
static const char  _recdescent_index_offsets [] = { 0, 0, 2, 11, 20, 0 ,  };
static const char  _recdescent_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _recdescent_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 ,  };
static const char  _recdescent_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _recdescent_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _recdescent_cond_targs [] = { 2, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 0 ,  };
static const char  _recdescent_cond_actions [] = { 0, 0, 0, 1, 5, 7, 0, 1, 1, 1, 0, 3, 9, 12, 15, 3, 0, 9, 9, 0, 3, 0, 12, 15, 3, 9, 0, 0, 0, 0 ,  };
static const char  _recdescent_eof_actions [] = { 0, 0, 0, 3, 3, 0 ,  };
static const char  _recdescent_nfa_targs [] = { 0, 0 ,  };
static const char  _recdescent_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
static const char  _recdescent_nfa_push_actions [] = { 0, 0 ,  };
static const char  _recdescent_nfa_pop_trans [] = { 0, 0 ,  };
static const int  recdescent_start  = 2;
static const int  recdescent_first_final  = 2;
static const int  recdescent_error  = 0;
static const int  recdescent_en_main  = 2;
void test( char *buf )
{
	int cs;
	int *stack;
	int top, stack_size;
	char *p, *pe, *eof, *item = 0;
	
	int len = strlen( buf );
	
	
	{
		cs = ( int ) recdescent_start;
		top = 0;
	}
	stack_size = 1;
	stack = (int*)malloc( sizeof(int) * stack_size );
	
	p = buf;
	pe = buf + len;
	eof = pe;
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _recdescent_trans_keys + _recdescent_key_offsets[cs];
		_trans = ( unsigned int  ) _recdescent_index_offsets[cs];
		_klen = ( int ) _recdescent_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _recdescent_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _recdescent_cond_keys + _recdescent_trans_offsets[_trans];
		_klen = ( int ) _recdescent_trans_lengths[_trans];
		_cond = ( unsigned int  ) _recdescent_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _recdescent_cond_targs[_cond];
		if ( _recdescent_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _recdescent_actions + _recdescent_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					item = p; 
				}
				
				break;
				case 1 :
				{
					printf( "item: " );
					fwrite( item, 1, p-item, stdout );
					printf( "\n" );
					
				}
				
				break;
				case 2 :
				{
					printf( "calling main\n" );
					{
						{
							if ( top == stack_size ) {
								printf( "growing stack\n" );
								stack_size = top * 2;
								stack = (int*)realloc( stack, sizeof(int)*stack_size );
							}
							
						}
						stack[top] = cs;
						top += 1;
						cs = 2;
						goto _again;
					}
					
				}
				
				break;
				case 3 :
				{
					if ( top == 0 ) {
						printf( "STRAY CLOSE\n" );
						{
							p+= 1;
							goto _out; 
						}
						
					}
					
					printf( "returning from main\n" );
					{
						p = p - 1;
						
					}
					
					{
						top-= 1;
						cs = stack[top];
						{
							if ( stack_size > (top * 4) ) {
								stack_size = top * 2;
								stack = (int*)realloc( stack, sizeof(int)*stack_size );
								printf( "shrinking stack\n" );
							}
							
						}
						goto _again;
					}
					
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _recdescent_actions + _recdescent_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 1 :
					{
						printf( "item: " );
						fwrite( item, 1, p-item, stdout );
						printf( "\n" );
						
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
	if ( cs == recdescent_error ) {
		/* Machine failed before finding a token. */
		printf( "PARSE ERROR\n" );
	}
}

int main()
{
	test( "88 foo { 99 {{{{}}}}{ } }");
	test( "76 } sadf");
	return 0;
}

