host( "working/clang5.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
	
	
	
}@
array s8 _clang_key_offsets( 0, 66 ) = { 0, 0, 3, 4, 7, 8, 9, 11, 17, 19, 22, 42, 44, 48, 50, 53, 59, 66, 0 };

array int _clang_trans_keys( 0, 126 ) = { 10, 34, 92, 10, 10, 39, 92, 10, 10, 48, 57, 48, 57, 65, 70, 97, 102, 10, 42, 10, 42, 47, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 42, 47, 46, 120, 48, 57, 48, 57, 46, 48, 57, 48, 57, 65, 70, 97, 102, 95, 48, 57, 65, 90, 97, 122, 0 };

array s8 _clang_single_lengths( 0, 6 ) = { 0, 3, 1, 3, 1, 1, 0, 0, 2, 3, 6, 2, 2, 0, 1, 0, 1, 0, 0 };

array s8 _clang_range_lengths( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 1, 3, 0, 0, 7, 0, 1, 1, 1, 3, 3, 0, 0 };

array s8 _clang_index_offsets( 0, 62 ) = { 0, 0, 4, 6, 10, 12, 14, 16, 20, 23, 27, 41, 44, 48, 50, 53, 57, 62, 0 };

array s8 _clang_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _clang_trans_offsets( 0, 71 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 0 };

array s8 _clang_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _clang_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_cond_targs( 0, 17 ) = { 1, 10, 2, 1, 1, 1, 3, 10, 4, 3, 3, 3, 10, 5, 13, 10, 15, 15, 15, 10, 8, 9, 8, 8, 9, 17, 8, 10, 1, 3, 11, 12, 16, 10, 14, 10, 16, 10, 16, 10, 10, 10, 5, 10, 6, 7, 14, 10, 13, 10, 6, 14, 10, 15, 15, 15, 10, 16, 16, 16, 16, 10, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0 };

array s8 _clang_cond_actions( 0, 19 ) = { 1, 2, 0, 0, 1, 0, 1, 3, 0, 0, 1, 0, 5, 0, 0, 6, 0, 0, 0, 6, 1, 0, 0, 1, 0, 8, 0, 11, 0, 0, 13, 13, 0, 12, 13, 12, 0, 12, 0, 12, 10, 15, 0, 14, 0, 0, 13, 16, 0, 17, 0, 13, 16, 0, 0, 0, 18, 0, 0, 0, 0, 19, 0, 4, 6, 6, 14, 16, 17, 16, 18, 19, 0 };

array s8 _clang_to_state_actions( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_from_state_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_eof_trans_indexed( 0, 27 ) = { 0, 0, 0, 0, 0, 16, 18, 18, 0, 0, 0, 22, 24, 25, 24, 26, 27, 0, 0 };

array s8 _clang_eof_trans_direct( 0, 72 ) = { 0, 0, 0, 0, 0, 64, 65, 66, 0, 0, 0, 67, 68, 69, 70, 71, 72, 0, 0 };

array s8 _clang_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int clang_start = 10;
value int clang_first_final = 10;
value int clang_error = 0;

value int clang_en_c_comment = 8;
value int clang_en_main = 10;

host( "working/clang5.rl", 89 ) @{
	
	let clang data =
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let ts = ref 0 in
	let te = ref 0 in
	let eof = pe in 
	let curlin = ref 1 in
	
}@
{
	cs = cast(int)clang_start;
	ts = nil;
	te = nil;
}

{
	int _klen;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	uint _trans;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _clang_eof_trans_direct[cs] > 0 ) {
					_trans = cast(uint)_clang_eof_trans_direct[cs] - 1;
					_cond = cast(uint)_clang_trans_offsets[_trans];
					_have = 1;
				}
				if ( _have == 0 ) {
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				switch ( _clang_from_state_actions[cs] ) {
					case 9 {
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				
				_keys = offset( _clang_trans_keys, _clang_key_offsets[cs] );
				_trans = cast(uint)_clang_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_clang_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _clang_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _clang_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_clang_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _clang_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _clang_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _clang_cond_keys, _clang_trans_offsets[_trans] );
				_klen = cast(int)_clang_trans_lengths[_trans];
				_cond = cast(uint)_clang_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _clang_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _clang_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_clang_cond_targs[_cond];
				
				switch ( _clang_cond_actions[_cond] ) {
					case 1 {
						host( "working/clang5.rl", 19 ) ${ incr curlin }$
					}
					case 8 {
						host( "working/clang5.rl", 23 ) ${${cs = 10;}$}$
					}
					case 13 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					}
					case 12 {
						host( "working/clang5.rl", 35 ) ${${te = p+1;host( "working/clang5.rl", 35 ) ${
									pr "symbol(%i): %c" !curlin data.[!ts];
								}$}$}$
					}
					case 3 {
						host( "working/clang5.rl", 47 ) ${${te = p+1;host( "working/clang5.rl", 47 ) ${
									pr "single_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 2 {
						host( "working/clang5.rl", 53 ) ${${te = p+1;host( "working/clang5.rl", 53 ) ${
									pr "double_lit(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 10 {
						host( "working/clang5.rl", 58 ) ${${te = p+1;}$}$
					}
					case 15 {
						host( "working/clang5.rl", 65 ) ${${te = p+1;host( "working/clang5.rl", 65 ) ${ ${cs = 8;}$}$}$}$
					}
					case 14 {
						host( "working/clang5.rl", 35 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 35 ) ${
									pr "symbol(%i): %c" !curlin data.[!ts];
								}$}$}$
					}
					case 19 {
						host( "working/clang5.rl", 41 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 41 ) ${
									pr "ident(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 16 {
						host( "working/clang5.rl", 69 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 69 ) ${
									pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 17 {
						host( "working/clang5.rl", 75 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 75 ) ${
									pr "float(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 18 {
						host( "working/clang5.rl", 81 ) ${${te = p;p = p - 1;host( "working/clang5.rl", 81 ) ${
									pr "hex(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 4 {
						host( "working/clang5.rl", 35 ) ${${p = ((te))-1;
								host( "working/clang5.rl", 35 ) ${
									pr "symbol(%i): %c" !curlin data.[!ts];
								}$}$}$
					}
					case 6 {
						host( "working/clang5.rl", 69 ) ${${p = ((te))-1;
								host( "working/clang5.rl", 69 ) ${
									pr "int(%i): %s" !curlin (String.sub data !ts (!te - !ts));
								}$}$}$
					}
					case 11 {
						host( "working/clang5.rl", 19 ) ${ incr curlin }$
						host( "working/clang5.rl", 58 ) ${${te = p+1;}$}$
					}
					case 5 {
						host( "working/clang5.rl", 19 ) ${ incr curlin }$
						host( "working/clang5.rl", 63 ) ${${te = p+1;}$}$
					}
				}
				
				switch ( _clang_to_state_actions[cs] ) {
					case 7 {
						host( "NONE", 1 ) ${${ts = nil;}$}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/clang5.rl", 102 ) @{
	
	if !cs < clang_first_final then
	fail "atoi: cs %d < %d" !cs clang_first_final;
	;;
	
	let () =
	clang "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n";
	clang "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n";
	()
	;;
	
	
}@