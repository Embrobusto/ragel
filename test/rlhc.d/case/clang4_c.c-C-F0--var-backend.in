host( "working/clang4_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	int pos ;
	int line ;
	
	
	
	
	
}@
array s8 _clang_actions( 0, 8 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 2, 2, 1, 0, 2, 3, 1, 2, 3, 2, 2, 4, 1, 2, 4, 2, 2, 5, 1, 2, 5, 2, 2, 6, 1, 2, 6, 2, 2, 7, 1, 2, 7, 2, 2, 8, 1, 2, 8, 2, 3, 3, 1, 0, 3, 4, 1, 0, 3, 5, 1, 0, 3, 6, 1, 0, 3, 7, 1, 0, 3, 8, 1, 0, 0 };

array char _clang_trans_keys( 0, 13 ) = { 1, 0, 0, 12, 0, 12, 0, 0, 0, 2, 0, 7, 0, 0, 8, 9, 8, 10, 0, 0, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0 };

array s8 _clang_char_class( 0, 13 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 4, 4, 11, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 4, 4, 4, 4, 0 };

array s16 _clang_index_offsets( 0, 157 ) = { 0, 0, 13, 26, 27, 30, 38, 39, 41, 44, 45, 59, 73, 87, 101, 115, 129, 143, 157, 0 };

array s8 _clang_indices( 0, 72 ) = { 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 6, 5, 8, 7, 9, 8, 7, 9, 7, 7, 7, 7, 10, 12, 13, 13, 15, 15, 15, 1, 12, 10, 16, 17, 16, 18, 16, 19, 20, 21, 22, 22, 16, 22, 24, 23, 25, 26, 25, 27, 25, 28, 29, 30, 31, 31, 25, 31, 33, 32, 34, 35, 34, 36, 34, 37, 38, 39, 40, 40, 34, 40, 24, 23, 7, 26, 25, 27, 25, 11, 29, 30, 31, 31, 25, 31, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 50, 52, 51, 53, 54, 53, 55, 53, 56, 13, 13, 57, 57, 53, 57, 59, 58, 60, 61, 60, 62, 60, 63, 64, 64, 64, 64, 60, 64, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 49, 66, 65, 67, 68, 67, 69, 67, 70, 71, 71, 71, 72, 67, 72, 0 };

array s8 _clang_index_defaults( 0, 65 ) = { 0, 0, 4, 4, 7, 7, 11, 14, 14, 0, 10, 23, 32, 23, 41, 51, 58, 41, 65, 0 };

array s8 _clang_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _clang_cond_targs( 0, 18 ) = { 1, 1, 12, 9, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 0, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0 };

array s8 _clang_cond_actions( 0, 81 ) = { 1, 19, 0, 0, 1, 19, 0, 0, 5, 0, 0, 0, 5, 1, 0, 22, 22, 3, 3, 22, 22, 22, 22, 17, 58, 81, 55, 55, 81, 81, 81, 81, 9, 34, 65, 31, 31, 65, 65, 65, 65, 13, 46, 73, 43, 43, 1, 73, 1, 73, 0, 11, 40, 69, 37, 37, 69, 69, 7, 28, 61, 25, 25, 61, 1, 15, 52, 77, 49, 49, 77, 1, 77, 0 };

array s8 _clang_eof_actions( 0, 17 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 17, 13, 11, 7, 13, 15, 0 };

array s8 _clang_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int clang_start = 10;
value int clang_first_final = 10;
value int clang_error = 0;

value int clang_en_main = 10;

host( "working/clang4_c.rl", 158 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
		pos = 0;
		line = 1;
	}@
	{
		cs = cast(int)clang_start;
	}
	host( "working/clang4_c.rl", 167 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _clang_actions, _clang_eof_actions[cs] );
						__nacts = cast(uint)deref( _clang_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _clang_actions, __acts ) ) {
								case 3 {
									host( "working/clang4_c.rl", 28 ) ${printf( "%s", "ident(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 4 {
									host( "working/clang4_c.rl", 36 ) ${printf( "%s", "literal(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 5 {
									host( "working/clang4_c.rl", 44 ) ${printf( "%s", "float(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 6 {
									host( "working/clang4_c.rl", 52 ) ${printf( "%s", "int(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 7 {
									host( "working/clang4_c.rl", 60 ) ${printf( "%s", "hex(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 8 {
									host( "working/clang4_c.rl", 68 ) ${printf( "%s", "symbol(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _clang_trans_keys, (cs<<1) );
					_inds = offset( _clang_indices, _clang_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_clang_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _clang_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _clang_trans_keys, _keys ) )
						_trans = cast(uint)deref( _clang_indices, _inds + cast(int)( _ic - cast(int)deref( _clang_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_clang_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_clang_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_clang_cond_targs[_trans];
					
					if ( _clang_cond_actions[_trans] != 0 ) {
						_acts = offset( _clang_actions, _clang_cond_actions[_trans] );
						_nacts = cast(uint)deref( _clang_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _clang_actions, _acts ) )
							{
								case 0 {
									host( "working/clang4_c.rl", 16 ) ${	buffer[blen++] = *p;
										buffer[blen] = 0;
									}$
								}
								case 1 {
									host( "working/clang4_c.rl", 21 ) ${	blen = 0;
									}$
								}
								case 2 {
									host( "working/clang4_c.rl", 24 ) ${line = line + 1;
									}$
								}
								case 3 {
									host( "working/clang4_c.rl", 28 ) ${printf( "%s", "ident(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 4 {
									host( "working/clang4_c.rl", 36 ) ${printf( "%s", "literal(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 5 {
									host( "working/clang4_c.rl", 44 ) ${printf( "%s", "float(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 6 {
									host( "working/clang4_c.rl", 52 ) ${printf( "%s", "int(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 7 {
									host( "working/clang4_c.rl", 60 ) ${printf( "%s", "hex(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
								case 8 {
									host( "working/clang4_c.rl", 68 ) ${printf( "%s", "symbol(" );
										printf( "%d", line );
										printf( "%s", "," );
										printf( "%d", blen );
										printf( "%s", "): " );
										printf( "%s", buffer );
										printf( "%s", "\n" );
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/clang4_c.rl", 175 ) @{
	}
	
	void finish( )
	{
		if ( cs >= clang_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
		"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
	};
	
	int inplen = 2;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@