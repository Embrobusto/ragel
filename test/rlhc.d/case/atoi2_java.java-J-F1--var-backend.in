host( "working/atoi2_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class atoi2_java
	{
		int neg ;
		int value ;
		
		
		
		
		
	}@
	array char _state_chart_trans_keys( 0, 4 ) = { u(1), u(0), u(4), u(4), u(0), u(4), u(2), u(4), u(0) };
	
	array s8 _state_chart_char_class( 0, 4 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 };
	
	array s8 _state_chart_index_offsets( 0, 6 ) = { 0, 0, 1, 6, 0 };
	
	array s8 _state_chart_indices( 0, 5 ) = { 0, 2, 1, 1, 1, 0, 3, 4, 5, 0 };
	
	array s8 _state_chart_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };
	
	array s8 _state_chart_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _state_chart_cond_targs( 0, 3 ) = { 2, 0, 3, 1, 1, 2, 0 };
	
	array s8 _state_chart_cond_actions( 0, 5 ) = { 1, 0, 2, 3, 4, 5, 0 };
	
	array s8 _state_chart_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _state_chart_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };
	
	array s8 _state_chart_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _state_chart_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int state_chart_start = 3;
	value int state_chart_first_final = 3;
	value int state_chart_error = 0;
	
	value int state_chart_en_main = 3;
	
	host( "working/atoi2_java.rl", 61 ) @{
		int cs;
		
		void init()
		{
			value = 0;
			neg = 0;
		}@
		{
			cs = cast(int)state_chart_start;
		}
		host( "working/atoi2_java.rl", 68 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			String _s;
		}@
		{
			uint _trans = 0;
			uint _have = 0;
			uint _cont = 1;
			index char _keys;
			index s8 _inds;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _state_chart_trans_keys, (cs<<1) );
						_inds = offset( _state_chart_indices, _state_chart_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 57 && ( deref( data, p )) >= 10 )
						{
							int _ic = cast(int)_state_chart_char_class[cast(int)( deref( data, p )) - 10];
							if ( _ic <= cast(int)deref( _state_chart_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _state_chart_trans_keys, _keys ) )
							_trans = cast(uint)deref( _state_chart_indices, _inds + cast(int)( _ic - cast(int)deref( _state_chart_trans_keys, _keys ) )  ); 
							else
							_trans = cast(uint)_state_chart_index_defaults[cs];
						}
						else {
							_trans = cast(uint)_state_chart_index_defaults[cs];
						}
						
					}
					if ( _cont == 1 ) {
						cs = cast(int)_state_chart_cond_targs[_trans];
						
						switch ( _state_chart_cond_actions[_trans] ) {
							case 3 {
								host( "working/atoi2_java.rl", 15 ) ${neg = 0;
									value = 0;
								}$
							}
							case 1 {
								host( "working/atoi2_java.rl", 22 ) ${value = value * 10 + ( int ) ( ={( deref( data, p ))}= - 48 )
									;
								}$
							}
							case 4 {
								host( "working/atoi2_java.rl", 15 ) ${neg = 0;
									value = 0;
								}$
								host( "working/atoi2_java.rl", 19 ) ${neg = 1;
								}$
							}
							case 5 {
								host( "working/atoi2_java.rl", 15 ) ${neg = 0;
									value = 0;
								}$
								host( "working/atoi2_java.rl", 22 ) ${value = value * 10 + ( int ) ( ={( deref( data, p ))}= - 48 )
									;
								}$
							}
							case 2 {
								host( "working/atoi2_java.rl", 26 ) ${if ( neg != 0 )
									{
										value = -1 * value;
										
									} 
								}$
								host( "working/atoi2_java.rl", 52 ) ${System.out.print( value );
									System.out.print( "\n" );
								}$
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/atoi2_java.rl", 79 ) @{
		}
		
		void finish( )
		{
			if ( cs >= state_chart_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"1\n",
			"12\n",
			"222222\n",
			"+2123\n",
			"213 3213\n",
			"-12321\n",
			"--123\n",
			"-99\n",
			" -3000\n",
		};
		
		static final int inplen = 9;
		
		public static void main (String[] args)
		{
			atoi2_java machine = new atoi2_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@