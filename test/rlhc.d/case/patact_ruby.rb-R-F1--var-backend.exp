#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_patact_trans_keys 
	private :_patact_trans_keys, :_patact_trans_keys=
end
self._patact_trans_keys = [
1, 0, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 0, 11, 2, 5, 2, 5, 2, 11, 0, 11, 4, 5, 7, 11, 0, 11, 2, 5, 2, 5, 2, 11, 6, 6, 0 , 
]

class << self
	attr_accessor :_patact_char_class 
	private :_patact_char_class, :_patact_char_class=
end
self._patact_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 10, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0 , 
]

class << self
	attr_accessor :_patact_index_offsets 
	private :_patact_index_offsets, :_patact_index_offsets=
end
self._patact_index_offsets = [
0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 32, 36, 46, 58, 60, 65, 77, 81, 85, 95, 0 , 
]

class << self
	attr_accessor :_patact_indices 
	private :_patact_indices, :_patact_indices=
end
self._patact_indices = [
1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 20, 22, 23, 24, 25, 26, 26, 26, 26, 26, 27, 0, 23, 23, 27, 28, 23, 29, 31, 30, 30, 30, 30, 26, 26, 26, 26, 26, 32, 21, 32, 21, 33, 33, 21, 34, 34, 34, 34, 34, 33, 33, 34, 34, 34, 34, 34, 37, 21, 37, 38, 39, 40, 21, 41, 41, 41, 41, 41, 42, 10, 39, 39, 42, 43, 39, 44, 46, 45, 45, 45, 45, 41, 41, 41, 41, 41, 47, 0 , 
]

class << self
	attr_accessor :_patact_index_defaults 
	private :_patact_index_defaults, :_patact_index_defaults=
end
self._patact_index_defaults = [
0, 0, 0, 0, 0, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 21, 0, 28, 30, 21, 35, 36, 21, 10, 43, 45, 21, 0 , 
]

class << self
	attr_accessor :_patact_trans_cond_spaces 
	private :_patact_trans_cond_spaces, :_patact_trans_cond_spaces=
end
self._patact_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_patact_cond_targs 
	private :_patact_cond_targs, :_patact_cond_targs=
end
self._patact_cond_targs = [
17, 2, 3, 4, 17, 17, 6, 7, 8, 17, 24, 10, 11, 12, 24, 24, 14, 15, 16, 24, 17, 0, 17, 18, 19, 17, 20, 1, 17, 18, 17, 5, 21, 22, 23, 21, 21, 24, 24, 25, 26, 27, 9, 24, 25, 24, 13, 28, 0 , 
]

class << self
	attr_accessor :_patact_cond_actions 
	private :_patact_cond_actions, :_patact_cond_actions=
end
self._patact_cond_actions = [
1, 0, 0, 0, 2, 3, 0, 0, 0, 4, 5, 0, 0, 0, 6, 7, 0, 0, 0, 8, 11, 0, 12, 13, 13, 14, 15, 0, 16, 17, 18, 0, 19, 0, 0, 20, 21, 22, 23, 24, 24, 15, 0, 25, 26, 27, 0, 28, 0 , 
]

class << self
	attr_accessor :_patact_to_state_actions 
	private :_patact_to_state_actions, :_patact_to_state_actions=
end
self._patact_to_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 9, 0 , 
]

class << self
	attr_accessor :_patact_from_state_actions 
	private :_patact_from_state_actions, :_patact_from_state_actions=
end
self._patact_from_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 10, 0 , 
]

class << self
	attr_accessor :_patact_eof_trans 
	private :_patact_eof_trans, :_patact_eof_trans=
end
self._patact_eof_trans = [
0, 1, 1, 1, 1, 6, 6, 6, 6, 11, 11, 11, 11, 16, 16, 16, 16, 0, 1, 29, 31, 0, 36, 37, 0, 11, 44, 46, 0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_targs 
	private :_patact_nfa_targs, :_patact_nfa_targs=
end
self._patact_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_offsets 
	private :_patact_nfa_offsets, :_patact_nfa_offsets=
end
self._patact_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_push_actions 
	private :_patact_nfa_push_actions, :_patact_nfa_push_actions=
end
self._patact_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_pop_trans 
	private :_patact_nfa_pop_trans, :_patact_nfa_pop_trans=
end
self._patact_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :patact_start 
end
self.patact_start  = 17;

class << self
	attr_accessor :patact_first_final 
end
self.patact_first_final  = 17;

class << self
	attr_accessor :patact_error 
end
self.patact_error  = 0;

class << self
	attr_accessor :patact_en_other 
end
self.patact_en_other  = 21;

class << self
	attr_accessor :patact_en_exec_test 
end
self.patact_en_exec_test  = 24;

class << self
	attr_accessor :patact_en_semi 
end
self.patact_en_semi  = 28;

class << self
	attr_accessor :patact_en_main 
end
self.patact_en_main  = 17;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	comm = 1
	top = 1
	stack = Array.new
	ts = 1
	te = 1
	act = 1
	value = 1
	begin
		cs = patact_start;
		ts = 0;
		te = 0;
		act = 0;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _patact_eof_trans[cs] > 0  )
									begin
										_trans = _patact_eof_trans[cs] - 1;
										_have = 1;
										
									end
									
								end
								if ( _have == 0  )
									begin
									
									end
									
								end
								
							end
							
						end
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								case  _patact_from_state_actions[cs]  
								when -2 then
								begin
								end
								when 10  then
								begin
									begin
										begin
											ts = p;
											
										end
										
									end
									
									
								end
							end
							_keys = (cs<<1) ;
							_inds = _patact_index_offsets[cs] ;
							if ( ( data[p ].ord) <= 122 && ( data[p ].ord) >= 10  )
								begin
									_ic = _patact_char_class[( data[p ].ord) - 10];
									if ( _ic <= _patact_trans_keys[_keys+1 ]&& _ic >= _patact_trans_keys[_keys ] )
										_trans = _patact_indices[_inds + ( _ic - _patact_trans_keys[_keys ])  ];
										
										else
										_trans = _patact_index_defaults[cs];
										
									end
									
								end
								
								else
								begin
									_trans = _patact_index_defaults[cs];
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _patact_cond_targs[_trans];
							case  _patact_cond_actions[_trans]  
							when -2 then
							begin
							end
							when 15  then
							begin
								begin
									begin
										te = p+1;
										
									end
									
								end
								
							end
							when 19  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "space\n" );
											
										end
										
									end
									
								end
								
							end
							when 21  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "word\n" );
											
										end
										
									end
									
								end
								
							end
							when 20  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "num\n" );
											
										end
										
									end
									
								end
								
							end
							when 8  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "word (c/lbh)\n" );
											
										end
										
									end
									
								end
								
							end
							when 22  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "space\n" );
											
										end
										
									end
									
								end
								
							end
							when 6  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "num (c/switch)\n" );
											
										end
										
									end
									
								end
								
							end
							when 23  then
							begin
								begin
									begin
										te = p+1;
										
									end
									
								end
								
							end
							when 27  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "word (w/lbh)\n" );
											begin
												p = (( te-1))-1;
												
											end
											
											begin
												cs = 21;
												
											end
											
										end
										
									end
									
								end
								
							end
							when 25  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "num (w/switch)\n" );
											begin
												p = (( te-1))-1;
												
											end
											
											begin
												cs = 21;
												
											end
											
										end
										
									end
									
								end
								
							end
							when 7  then
							begin
								begin
									begin
										p = ((te))-1;
										begin
											print( "word (w/lbh)\n" );
											begin
												p = (( te-1))-1;
												
											end
											
											begin
												cs = 21;
												
											end
											
										end
										
									end
									
								end
								
							end
							when 5  then
							begin
								begin
									begin
										case  act  
										when -2 then
										begin
										end
										when 7  then
										begin
											p = ((te))-1;
											begin
												print( "num (w/switch)\n" );
												
											end
											
										end
										when 8  then
										begin
											p = ((te))-1;
											begin
												print( "num (w/switch)\n" );
												begin
													p = (( te-1))-1;
													
												end
												
												begin
													cs = 21;
													
												end
												
											end
											
											
										end
									end
									
								end
								
								
							end
							
						end
						when 28  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "in semi\n" );
										begin
											cs = 17;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 4  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "word (c/lbh)\n" );
										
									end
									
								end
								
							end
							
						end
						when 11  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "space\n" );
										
									end
									
								end
								
							end
							
						end
						when 2  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "num (c/switch)\n" );
										
									end
									
								end
								
							end
							
						end
						when 14  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "going to semi\n" );
										begin
											p = p - 1;
											
										end
										begin
											cs = 28;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 12  then
						begin
							begin
								begin
									te = p+1;
									begin
										print( "immdiate\n" );
										begin
											cs = 24;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 18  then
						begin
							begin
								begin
									te = p;
									p = p - 1;
									begin
										print( "word (w/lbh)\n" );
										begin
											p = p - 1;
											
										end
										begin
											cs = 21;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 16  then
						begin
							begin
								begin
									te = p;
									p = p - 1;
									begin
										print( "num (w/switch)\n" );
										begin
											p = p - 1;
											
										end
										begin
											cs = 21;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 3  then
						begin
							begin
								begin
									p = ((te))-1;
									begin
										print( "word (w/lbh)\n" );
										begin
											p = p - 1;
											
										end
										begin
											cs = 21;
											
										end
										
									end
									
								end
								
							end
							
						end
						when 1  then
						begin
							begin
								begin
									case  act  
									when -2 then
									begin
									end
									when 15  then
									begin
										p = ((te))-1;
										begin
											print( "num (w/switch)\n" );
											
										end
										
									end
									when 16  then
									begin
										p = ((te))-1;
										begin
											print( "num (w/switch)\n" );
											begin
												p = p - 1;
												
											end
											begin
												cs = 21;
												
											end
											
										end
										
										
									end
								end
								
							end
							
							
						end
						
					end
					when 26  then
					begin
						begin
							begin
								te = p+1;
								
							end
							
						end
						begin
							begin
								act = 7;
								
							end
							
						end
						
					end
					when 24  then
					begin
						begin
							begin
								te = p+1;
								
							end
							
						end
						begin
							begin
								act = 8;
								
							end
							
						end
						
					end
					when 17  then
					begin
						begin
							begin
								te = p+1;
								
							end
							
						end
						begin
							begin
								act = 15;
								
							end
							
						end
						
					end
					when 13  then
					begin
						begin
							begin
								te = p+1;
								
							end
							
						end
						begin
							begin
								act = 16;
								
							end
							
						end
						
						
					end
				end
				case  _patact_to_state_actions[cs]  
				when -2 then
				begin
				end
				when 9  then
				begin
					begin
						begin
							ts = 0;
							
						end
						
					end
					
					
				end
			end
			if ( cs == 0  )
				_cont = 0;
				
			end
			if ( _cont == 1  )
				p += 1;
				
			end
			
		end
		
	end
	
end

end

end

end

end
if cs >= patact_first_final
puts "ACCEPT"
else
puts "FAIL"
end
end

inp = [
"abcd foix\n",
"abcd\nanother\n",
"123 foix\n",
"!abcd foix\n",
"!abcd\nanother\n",
"!123 foix\n",
";",
]

inplen = 7

inp.each { |str| run_machine(str) }

