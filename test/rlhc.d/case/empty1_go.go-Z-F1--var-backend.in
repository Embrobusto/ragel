host( "working/empty1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	
	
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _empty1_trans_keys( 0, 1 ) = { u(1), u(0), u(1), u(0), u(0) };

array s8 _empty1_char_class( 0, 0 ) = { 0 };

array s8 _empty1_index_offsets( 0, 0 ) = { 0, 0, 0 };

array s8 _empty1_indicies( 0, 0 ) = { 0 };

array s8 _empty1_index_defaults( 0, 0 ) = { 0, 0, 0 };

array s8 _empty1_trans_cond_spaces( -1, 0 ) = { -1, 0 };

array s8 _empty1_cond_targs( 0, 0 ) = { 0, 0 };

array s8 _empty1_cond_actions( 0, 0 ) = { 0, 0 };

array s8 _empty1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _empty1_nfa_offsets( 0, 0 ) = { 0, 0, 0 };

array s8 _empty1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _empty1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int empty1_start = 1;
value int empty1_first_final = 2;
value int empty1_error = 0;

value int empty1_en_main = 1;

host( "working/empty1_go.rl", 23 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)empty1_start;
	}
	host( "working/empty1_go.rl", 26 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_trans = cast(uint)_empty1_index_defaults[cs];
				}
				if ( _cont == 1 ) {
					cs = cast(int)_empty1_cond_targs[_trans];
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/empty1_go.rl", 32 ) @{
	}
	func finish() {
		if cs >= empty1_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"",
		"x",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@