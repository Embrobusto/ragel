#include <stdio.h>



static const char  _foo_actions [] = { 0, 1, 0, 1, 1, 0 ,  };
static const char  _foo_trans_keys [] = { 1, 0, 0, 2, 0, 2, 3, 3, 1, 0, 0 ,  };
static const char  _foo_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 3, 6, 7, 0 ,  };
static const char  _foo_indicies [] = { 0, 1, 2, 0, 3, 4, 6, 0 ,  };
static const char  _foo_index_defaults [] = { 0, 1, 3, 5, 1, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, -1, 0, -1, 0, -1, -1, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 2, 4, 5, 7, 8, 0 ,  };
static const char  _foo_cond_targs [] = { 2, 0, 0, 2, 3, 0, 2, 0, 4, 0 ,  };
static const char  _foo_cond_actions [] = { 0, 0, 0, 0, 0, 1, 0, 3, 0, 0 ,  };
static const char  _foo_eof_actions [] = { 0, 0, 1, 3, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 4;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int main()
{
	char buffer[] = " ;";
	
	char *p = buffer;
	char *pe = buffer + sizeof(buffer);
	char *eof = pe;
	int  cs = foo_start;
	
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		int _cpc;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						const char  *__acts;
						unsigned int __nacts;
						__acts = _foo_actions + _foo_eof_actions[cs];
						__nacts = ( unsigned int  ) (*( __acts  ))
						;
						__acts += 1;
						while ( __nacts > 0  )
						{
							switch ( (*( __acts  ))
							) {
								case 0 :
								{
									printf("A\n"); 
								}
								
								break;
								case 1 :
								{
									printf("B\n"); 
								}
								
								break;
								
							}
							__nacts -= 1;
							__acts += 1;
						}
						
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _foo_trans_keys + (cs<<1);
					_inds = _foo_indicies + _foo_index_offsets[cs];
					if ( ((*( p  ))
					)<= 120 && ((*( p  ))
					)>= 32  )
					{
						int _ic = ( int ) _foo_char_class[( int ) ((*( p  ))
						)- 32];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _foo_index_defaults[cs];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _foo_index_defaults[cs];
					}
					
					
					_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
					_cpc = 0;
					switch ( _foo_trans_cond_spaces[_trans] ) {
						case 0 :
						if ( (0 ) )
						_cpc += 1;
						
						
						break;
						
					}
					_cond += ( unsigned int  ) _cpc;
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _foo_cond_targs[_cond];
					if ( _foo_cond_actions[_cond]!= 0  )
					{
						_acts = _foo_actions + _foo_cond_actions[_cond];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									printf("A\n"); 
								}
								
								break;
								case 1 :
								{
									printf("B\n"); 
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	return 0;
} 

