const _rangei_key_offsets = Int8[0, 0, 4, 8, 12, 16, 22, 24, 0 , ]
const _rangei_trans_keys = UInt8[65, 90, 97, 122, 65, 90, 97, 122, 60, 93, 97, 122, 65, 90, 94, 125, 65, 69, 86, 101, 118, 122, 60, 125, 0 , ]
const _rangei_single_lengths = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _rangei_range_lengths = Int8[0, 2, 2, 2, 2, 3, 1, 0, 0 , ]
const _rangei_index_offsets = Int8[0, 0, 3, 6, 9, 12, 16, 18, 0 , ]
const _rangei_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _rangei_trans_offsets = Int8[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 , ]
const _rangei_trans_lengths = Int8[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _rangei_cond_keys = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _rangei_cond_targs = Int8[2, 2, 0, 3, 3, 0, 4, 4, 0, 5, 5, 0, 6, 6, 6, 0, 7, 0, 0, 0 , ]
const _rangei_cond_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _rangei_nfa_targs = Int8[0, 0 , ]
const _rangei_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _rangei_nfa_push_actions = Int8[0, 0 , ]
const _rangei_nfa_pop_trans = Int8[0, 0 , ]
const rangei_start  = 1
const rangei_first_final  = 7
const rangei_error  = 0
const rangei_en_main  = 1
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	
	cs = convert(Int, rangei_start )
	_klen= 0
	;
	_trans = 0;
	_cond = 0;
	_have = 0;
	_cont = 1;
	_keys = 0;
	_ckeys = 0;
	_cpc= 0
	;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = _rangei_key_offsets[1+(cs)]
				_trans = convert(UInt, _rangei_index_offsets[1+(cs)] )
				_have = 0
				_klen = convert(Int, _rangei_single_lengths[1+(cs)] )
				if _klen > 0 
					_lower = 0;
					_mid = 0;
					_upper = 0;
					_lower = _keys
					_upper = _keys + _klen - 1
					while _upper >= _lower && _have == 0 
						_mid = _lower + ((_upper-_lower)>> 1)
						if (data[1+(p )])< _rangei_trans_keys[1+(_mid )]
							_upper = _mid - 1
							
						elseif (data[1+(p )])> _rangei_trans_keys[1+(_mid )]
							_lower = _mid + 1
							
						else
							_trans += convert(UInt, (_mid - _keys) )
							_have = 1
							
						end
						
					end
					if _have == 0 
						_keys += _klen
						_trans += convert(UInt, _klen )
						
					end
					
				end
				if _have == 0 
					_klen = convert(Int, _rangei_range_lengths[1+(cs)] )
					if _klen > 0 
						_lower = 0;
						_mid = 0;
						_upper = 0;
						_lower = _keys
						_upper = _keys + (_klen<<1)- 2
						while _have == 0 && _lower <= _upper 
							_mid = _lower + (((_upper-_lower)>> 1)& ~1)
							if (data[1+(p )])< _rangei_trans_keys[1+(_mid )]
								_upper = _mid - 2
								
							elseif (data[1+(p )])> _rangei_trans_keys[1+(_mid + 1 )]
								_lower = _mid + 2
								
							else
								_trans += convert(UInt, ((_mid - _keys)>>1) )
								_have = 1
								
							end
							
						end
						if _have == 0 
							_trans += convert(UInt, _klen )
							
						end
						
					end
					
				end
				_ckeys = _rangei_trans_offsets[1+(_trans)]
				_klen = convert(Int, _rangei_trans_lengths[1+(_trans)] )
				_cond = convert(UInt, _rangei_trans_offsets[1+(_trans)] )
				_have = 0
				_cpc = 0
				_lower = 0;
				_mid = 0;
				_upper = 0;
				_lower = _ckeys
				_upper = _ckeys + _klen - 1
				while _have == 0 && _lower <= _upper 
					_mid = _lower + ((_upper-_lower)>> 1)
					if _cpc < convert(Int, _rangei_cond_keys[1+(_mid )] )
						_upper = _mid - 1
						
					elseif _cpc > convert(Int, _rangei_cond_keys[1+(_mid )] )
						_lower = _mid + 1
						
					else
						_cond += convert(UInt, (_mid - _ckeys) )
						_have = 1
						
					end
					
				end
				if _have == 0 
					cs = 0
					_cont = 0
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _rangei_cond_targs[1+(_cond)] )
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= rangei_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "AaBbAa" );
m( "Aa`bAa" );
m( "AaB@Aa" );
m( "AaBbMa" );
m( "AaBbma" );
