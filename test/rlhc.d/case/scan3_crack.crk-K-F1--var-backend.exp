import crack.io cout;
import crack.lang Buffer;

int
ts;
int
te;
int act;
int token;





const array[byte ] _scanner_trans_keys = [ 1, 0, 0, 1, 1, 0, 0,  ];
const array[int16 ] _scanner_char_class = [ 0, 1, 0 ,  ];
const array[int16 ] _scanner_index_offsets = [ 0, 0, 2, 0 ,  ];
const array[int16 ] _scanner_indices = [ 0, 2, 0 ,  ];
const array[int16 ] _scanner_index_defaults = [ 0, 1, 4, 0 ,  ];
const array[int16 ] _scanner_trans_cond_spaces = [ -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _scanner_cond_targs = [ 2, 0, 2, 1, 2, 0 ,  ];
const array[int16 ] _scanner_cond_actions = [ 3, 0, 4, 5, 6, 0 ,  ];
const array[int16 ] _scanner_to_state_actions = [ 0, 1, 0, 0 ,  ];
const array[int16 ] _scanner_from_state_actions = [ 0, 2, 0, 0 ,  ];
const array[int16 ] _scanner_eof_trans = [ 0, 0, 4, 0 ,  ];
const array[int16 ] _scanner_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _scanner_nfa_offsets = [ 0, 0, 0, 0 ,  ];
const array[int16 ] _scanner_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _scanner_nfa_pop_trans = [ 0, 0 ,  ];
const int  scanner_start  = 1;
const int  scanner_first_final  = 1;
const int  scanner_error  = 0;
const int  scanner_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( scanner_start );
		ts = 0;
		te = 0;
		act = 0;
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _scanner_eof_trans[cs]> 0  )
					{
						_trans = uint32  ( _scanner_eof_trans[cs] )- 1;
						_have = 1;
						
					}
					
					if ( _have == 0  )
					{
					
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					if ( _scanner_from_state_actions[cs] == 2  ) {
						if ( 1 ) {
							if ( 1 ) {
								ts = p;
								
							}
							
						}
						
					}
					;
					_keys = (cs<<1);
					_inds = _scanner_index_offsets[cs];
					if ( (data[p ])<= 98 && (data[p ])>= 97  )
					{
						int _ic = int ( _scanner_char_class[int ( (data[p ]) )- 97] );
						if ( _ic <= int ( _scanner_trans_keys[_keys+1 ] )&& _ic >= int ( _scanner_trans_keys[_keys ] ) )
						_trans = uint32  ( _scanner_indices[_inds + int ( (_ic - int ( _scanner_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _scanner_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _scanner_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _scanner_cond_targs[_trans] );
					if ( _scanner_cond_actions[_trans] == 5  ) {
						if ( 1 ) {
							if ( 1 ) {
								if ( act  == 1  ) {
									p = ((te))-1;
									if ( 1 ) {
										cout.format( "pat1\n" );
										
									}
									
								}
								else if ( act  == 2  ) {
									p = ((te))-1;
									if ( 1 ) {
										cout.format( "pat2\n" );
										
									}
									
								}
								else if ( act  == 3  ) {
									p = ((te))-1;
									if ( 1 ) {
										cout.format( "pat3\n" );
										
									}
									
								}
								;
								
							}
							
							
						}
						
					}
					else if ( _scanner_cond_actions[_trans] == 3  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 1;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_trans] == 4  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 2;
								
							}
							
						}
						
					}
					else if ( _scanner_cond_actions[_trans] == 6  ) {
						if ( 1 ) {
							if ( 1 ) {
								te = p+1;
								
							}
							
						}
						if ( 1 ) {
							if ( 1 ) {
								act = 3;
								
							}
							
						}
						
					}
					;
					if ( _scanner_to_state_actions[cs] == 1  ) {
						if ( 1 ) {
							if ( 1 ) {
								ts = 0;
								
							}
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= scanner_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "ab89" );
}

main();
