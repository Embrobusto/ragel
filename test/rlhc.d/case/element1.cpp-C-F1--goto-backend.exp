#include <iostream>
using namespace std;

struct LangEl
{
	int key;
	const char *name;
};

struct Fsm
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute(  LangEl *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
	
};



static const int  _Fsm_trans_keys [] = { 1, 0, 0, 0, 1, 2, 1, 0, 0 ,  };
static const char  _Fsm_char_class [] = { 0, 1, 2, 0 ,  };
static const char  _Fsm_index_offsets [] = { 0, 0, 1, 3, 0 ,  };
static const char  _Fsm_indices [] = { 0, 0, 2, 0 ,  };
static const char  _Fsm_index_defaults [] = { 0, 1, 1, 1, 0 ,  };
static const char  _Fsm_trans_cond_spaces [] = { -1, -1, -1, 0 ,  };
static const char  _Fsm_cond_targs [] = { 2, 0, 3, 0 ,  };
static const char  _Fsm_cond_actions [] = { 1, 0, 1, 0 ,  };
static const char  _Fsm_eof_actions [] = { 0, 0, 0, 2, 0 ,  };
static const char  _Fsm_nfa_targs [] = { 0, 0 ,  };
static const char  _Fsm_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _Fsm_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Fsm_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Fsm_start  = 1;
static const int  Fsm_first_final  = 3;
static const int  Fsm_error  = 0;
static const int  Fsm_en_main  = 1;
int Fsm::init( )
{

	{
		cs = ( int ) Fsm_start;
	}
	return 0;
}

int Fsm::execute( LangEl *data, int len )
{
	LangEl *p = data;
	LangEl *pe = data + len;
	LangEl *eof_marker = pe;
	
	{
		int _trans = 0;
		const int  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _Fsm_trans_keys + (cs<<1);
		_inds = _Fsm_indices + _Fsm_index_offsets[cs];
		if ( (p->key) <= 3 && (p->key) >= 1  )
		{
			int _ic = ( int ) _Fsm_char_class[( int ) (p->key) - 1];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _Fsm_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _Fsm_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _Fsm_cond_targs[_trans];
		if ( _Fsm_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _Fsm_cond_actions[_trans] ) {
			case 1 :
			{
				cout << p->name << endl;
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == (eof_marker) )
		{
			switch ( _Fsm_eof_actions[cs] ) {
				case 2 :
				{
					cout << "accept" << endl;
				}
				
				break;
				
			}
		}
		
		
		
		_out :
		{}
		
	}
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

int Fsm::finish( )
{
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

int main( )
{
	static Fsm fsm;
	static LangEl lel[] = { 
		{1, "one"}, 
		{2, "two-a"}, 
		{2, "two-b"}, 
		{2, "two-c"}, 
		{3, "three"}
	};
	
	fsm.init();
	fsm.execute( lel, 5 );
	fsm.finish();
	return 0;
}

