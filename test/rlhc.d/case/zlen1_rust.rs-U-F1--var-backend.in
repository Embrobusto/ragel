host( "working/zlen1_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	
	
	
	
	
	
	
}@
array u8 _zlen1_trans_keys( 0, 1 ) = { 1, 0, 1, 0, 0 };

array s8 _zlen1_char_class( 0, 0 ) = { 0 };

array s8 _zlen1_index_offsets( 0, 0 ) = { 0, 0, 0 };

array s8 _zlen1_indices( 0, 0 ) = { 0 };

array s8 _zlen1_index_defaults( 0, 0 ) = { 0, 0, 0 };

array s8 _zlen1_trans_cond_spaces( -1, 0 ) = { -1, 0 };

array s8 _zlen1_cond_targs( 0, 0 ) = { 0, 0 };

array s8 _zlen1_cond_actions( 0, 0 ) = { 0, 0 };

array s8 _zlen1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _zlen1_nfa_offsets( 0, 0 ) = { 0, 0, 0 };

array s8 _zlen1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _zlen1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int zlen1_start = 1;
value int zlen1_first_final = 1;
value int zlen1_error = 0;

value int zlen1_en_main = 1;

host( "working/zlen1_rust.rl", 17 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)zlen1_start;
	}
	host( "working/zlen1_rust.rl", 28 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_trans = cast(uint)_zlen1_index_defaults[cs];
				}
				if ( _cont == 1 ) {
					cs = cast(int)_zlen1_cond_targs[_trans];
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/zlen1_rust.rl", 29 ) @{
		
		if ( cs >= zlen1_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "".to_string() ); }
		unsafe { m( "x".to_string() ); }
	}
	
}@