#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_next2_trans_keys 
	private :_next2_trans_keys, :_next2_trans_keys=
end
self._next2_trans_keys = [
1, 0, 15, 15, 13, 13, 8, 8, 13, 13, 11, 11, 6, 6, 5, 5, 9, 9, 8, 8, 6, 6, 12, 12, 14, 14, 9, 9, 12, 12, 7, 7, 10, 10, 6, 6, 6, 6, 0, 4, 1, 0, 1, 0, 1, 0, 1, 0, 0 , 
]

class << self
	attr_accessor :_next2_char_class 
	private :_next2_char_class, :_next2_char_class=
end
self._next2_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 1, 1, 7, 1, 1, 1, 1, 1, 8, 9, 1, 1, 10, 11, 12, 13, 1, 14, 15, 0 , 
]

class << self
	attr_accessor :_next2_index_offsets 
	private :_next2_index_offsets, :_next2_index_offsets=
end
self._next2_index_offsets = [
0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 23, 23, 23, 0 , 
]

class << self
	attr_accessor :_next2_indices 
	private :_next2_indices, :_next2_indices=
end
self._next2_indices = [
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19, 20, 21, 0 , 
]

class << self
	attr_accessor :_next2_index_defaults 
	private :_next2_index_defaults, :_next2_index_defaults=
end
self._next2_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_next2_trans_cond_spaces 
	private :_next2_trans_cond_spaces, :_next2_trans_cond_spaces=
end
self._next2_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_next2_cond_targs 
	private :_next2_cond_targs, :_next2_cond_targs=
end
self._next2_cond_targs = [
19, 0, 3, 4, 5, 6, 7, 20, 9, 10, 21, 12, 13, 22, 15, 16, 17, 18, 23, 19, 19, 1, 0 , 
]

class << self
	attr_accessor :_next2_cond_actions 
	private :_next2_cond_actions, :_next2_cond_actions=
end
self._next2_cond_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 3, 4, 5, 6, 0 , 
]

class << self
	attr_accessor :_next2_nfa_targs 
	private :_next2_nfa_targs, :_next2_nfa_targs=
end
self._next2_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_next2_nfa_offsets 
	private :_next2_nfa_offsets, :_next2_nfa_offsets=
end
self._next2_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_next2_nfa_push_actions 
	private :_next2_nfa_push_actions, :_next2_nfa_push_actions=
end
self._next2_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_next2_nfa_pop_trans 
	private :_next2_nfa_pop_trans, :_next2_nfa_pop_trans=
end
self._next2_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :next2_start 
end
self.next2_start  = 19;

class << self
	attr_accessor :next2_first_final 
end
self.next2_first_final  = 19;

class << self
	attr_accessor :next2_error 
end
self.next2_error  = 0;

class << self
	attr_accessor :next2_en_unused 
end
self.next2_en_unused  = 2;

class << self
	attr_accessor :next2_en_one 
end
self.next2_en_one  = 8;

class << self
	attr_accessor :next2_en_two 
end
self.next2_en_two  = 11;

class << self
	attr_accessor :next2_en_three 
end
self.next2_en_three  = 14;

class << self
	attr_accessor :next2_en_main 
end
self.next2_en_main  = 19;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	target = 1
	last = 1
	begin
		cs = next2_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _next2_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 120 && ( data[p ].ord) >= 10  )
									begin
										_ic = _next2_char_class[( data[p ].ord) - 10];
										if ( _ic <= _next2_trans_keys[_keys+1 ]&& _ic >= _next2_trans_keys[_keys ] )
											_trans = _next2_indices[_inds + ( _ic - _next2_trans_keys[_keys ])  ];
											
											else
											_trans = _next2_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _next2_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _next2_cond_targs[_trans];
								case  _next2_cond_actions[_trans]  
								when -2 then
								begin
								end
								when 1  then
								begin
									begin
										print( "one\n" );
										target = 19;
										begin
											cs = (target);
											
										end
										
									end
									
								end
								when 2  then
								begin
									begin
										print( "two\n" );
										target = 19;
										begin
											cs = (target);
											
										end
										
									end
									
								end
								when 3  then
								begin
									begin
										print( "three\n" );
										target = 19;
										begin
											cs = (target);
											
										end
										
									end
									
								end
								when 4  then
								begin
									begin
										target = 8;
										begin
											cs = (target);
											
										end
										last = 1;
										
									end
									
								end
								when 5  then
								begin
									begin
										target = 11;
										begin
											cs = (target);
											
										end
										last = 2;
										
									end
									
								end
								when 6  then
								begin
									begin
										if ( last == 2 )
											target = 14;
											begin
												cs = (target);
												
											end
											
										end
										last = 3;
										
									end
									
									
								end
							end
							if ( cs == 0  )
								_cont = 0;
								
							end
							if ( _cont == 1  )
								p += 1;
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end
if cs >= next2_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"1one3x2two3three\n",
	]
	
	inplen = 1
	
	inp.each { |str| run_machine(str) }
	
