host( "working/erract7.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	
	
}@
array char _foo_trans_keys( 0, 3 ) = { 1, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _foo_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 0 };

array s8 _foo_index_offsets( 0, 5 ) = { 0, 0, 1, 2, 3, 4, 5, 0 };

array s8 _foo_indices( 0, 5 ) = { 1, 2, 3, 4, 5, 0 };

array s8 _foo_index_defaults( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _foo_cond_targs( 0, 6 ) = { 0, 2, 3, 4, 5, 6, 0 };

array s8 _foo_cond_actions( 0, 3 ) = { 2, 3, 3, 3, 3, 3, 0 };

array s8 _foo_to_state_actions( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0 };

array s8 _foo_eof_actions( 0, 2 ) = { 0, 2, 2, 2, 2, 2, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 6;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/erract7.rl", 19 ) @{
	
	int main()
	{
		int cs;
		char *p = "hello", *pe = p + strlen(p);
		char *eof = pe;
	}@
	{
		cs = cast(int)foo_start;
	}
	
	{
		int _trans = 0;
		index char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _foo_trans_keys, (cs<<1) );
				_inds = offset( _foo_indices, _foo_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 104 && ( deref( data, p )) >= 88 )
				{
					int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 88];
					if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
					_trans = cast(int)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_foo_index_defaults[cs];
				}
				else {
					_trans = cast(int)_foo_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_foo_cond_targs[_trans];
				
				if ( _foo_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _foo_cond_actions[_trans] ) {
					case 3 {
						host( "working/erract7.rl", 11 ) ${ printf("char: %c\n", *p); }$
					}
					case 2 {
						host( "working/erract7.rl", 12 ) ${ printf("err: %c\n", *p); }$
					}
				}
				
				
			}
			label _again {
				switch ( _foo_to_state_actions[cs] ) {
					case 1 {
						host( "working/erract7.rl", 13 ) ${ printf("to state: %c\n", *p); }$
					}
				}
				
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					switch ( _foo_eof_actions[cs] ) {
						case 2 {
							host( "working/erract7.rl", 12 ) ${ printf("err: %c\n", *p); }$
						}
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/erract7.rl", 28 ) @{
		
		printf( "rest: %s\n", p );
		
		return 0;
	}
	
}@