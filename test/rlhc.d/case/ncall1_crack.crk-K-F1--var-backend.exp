import crack.io cout;
import crack.lang Buffer;

int top;
array[int] stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
int target;





const array[byte ] _ncall1_trans_keys = [ 1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0,  ];
const array[int16 ] _ncall1_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 ,  ];
const array[int16 ] _ncall1_index_offsets = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 ,  ];
const array[int16 ] _ncall1_indices = [ 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 ,  ];
const array[int16 ] _ncall1_index_defaults = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _ncall1_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _ncall1_cond_targs = [ 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 ,  ];
const array[int16 ] _ncall1_cond_actions = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 4, 0 ,  ];
const array[int16 ] _ncall1_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _ncall1_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _ncall1_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _ncall1_nfa_pop_trans = [ 0, 0 ,  ];
const int  ncall1_start  = 13;
const int  ncall1_first_final  = 13;
const int  ncall1_error  = 0;
const int  ncall1_en_unused  = 1;
const int  ncall1_en_one  = 7;
const int  ncall1_en_two  = 10;
const int  ncall1_en_main  = 13;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( ncall1_start );
		top = 0;
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _ncall1_index_offsets[cs];
					if ( (data[p ])<= 119 && (data[p ])>= 10  )
					{
						int _ic = int ( _ncall1_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _ncall1_trans_keys[_keys+1 ] )&& _ic >= int ( _ncall1_trans_keys[_keys ] ) )
						_trans = uint32  ( _ncall1_indices[_inds + int ( (_ic - int ( _ncall1_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _ncall1_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _ncall1_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _ncall1_cond_targs[_trans] );
					if ( _ncall1_cond_actions[_trans] == 1  ) {
						if ( 1 ) {
							cout.format( "one\n" );
							if ( 1 ) {
								top-= 1;
								cs = stack[top];
								
							}
							
						}
						
					}
					else if ( _ncall1_cond_actions[_trans] == 2  ) {
						if ( 1 ) {
							cout.format( "two\n" );
							if ( 1 ) {
								top-= 1;
								cs = stack[top];
								
							}
							
						}
						
					}
					else if ( _ncall1_cond_actions[_trans] == 3  ) {
						if ( 1 ) {
							target = 7;
							if ( 1 ) {
								stack[top] = cs;
								top += 1;
								cs = (target);
								
							}
							
						}
						
					}
					else if ( _ncall1_cond_actions[_trans] == 4  ) {
						if ( 1 ) {
							target = 10;
							if ( 1 ) {
								stack[top] = cs;
								top += 1;
								cs = (target);
								
							}
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= ncall1_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "1one2two1one\n" );
}

main();
