host( "working/minimize1.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	struct min
	{
		int cs;
	};
	
	
	
}@
value int min_start = 1;
value int min_first_final = 3;
value int min_error = 0;

value int min_en_main = 1;

array s8 _min_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _min_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _min_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _min_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/minimize1.rl", 26 ) @{
	
	void min_init( struct min *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)min_start;
	}
	host( "working/minimize1.rl", 30 ) @{
	}
	
	void min_execute( struct min *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( host( "-", 1 ) ={ fsm->cs}= )
		{
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
		}
		goto st_out;
		st_case_1:
		if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 98 ) {
			goto st2;
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		host( "-", 1 ) ={ fsm->cs}= = 0;
		goto _out;
		ctr3:
		host( "working/minimize1.rl", 17 ) ${ printf("a or b\n"); }$
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		if ( ( deref( data, p )) == 10 ) {
			goto st3;
		}
		if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 98 ) {
			goto ctr3;
		}
		{
			goto st0;
		}
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		{
			goto st0;
		}
		st_out:
		_test_eof2: host( "-", 1 ) ={ fsm->cs}= = 2; goto _test_eof; 
		_test_eof3: host( "-", 1 ) ={ fsm->cs}= = 3; goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
	host( "working/minimize1.rl", 38 ) @{
	}
	
	int min_finish( struct min *fsm )
	{
		if ( fsm->cs == min_error )
		return -1;
		if ( fsm->cs >= min_first_final )
		return 1;
		return 0;
	}
	
	struct min fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		min_init( &fsm );
		min_execute( &fsm, buf, len );
		if ( min_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test( "aaaaaa\n" );
		test( "a\n" );
		test( "abc\n" );
		return 0;
	}
	
}@