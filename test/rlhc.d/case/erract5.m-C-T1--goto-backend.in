host( "working/erract5.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	/*
	* Test error actions.
	*/
	
	#include <stdio.h>
	#include <string.h>
	#include <Foundation/Foundation.h>
	
	@@interface ErrAct : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation ErrAct
	
	
	
}@
array s8 _ErrAct_key_offsets( 0, 15 ) = { 0, 0, 4, 6, 10, 12, 15, 0 };

array char _ErrAct_trans_keys( 0, 57 ) = { 43, 45, 48, 57, 48, 57, 10, 46, 48, 57, 48, 57, 10, 48, 57, 0 };

array s8 _ErrAct_single_lengths( 0, 2 ) = { 0, 2, 0, 2, 0, 1, 0, 0 };

array s8 _ErrAct_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 0, 0 };

array s8 _ErrAct_index_offsets( 0, 15 ) = { 0, 0, 4, 6, 10, 12, 15, 0 };

array s8 _ErrAct_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _ErrAct_trans_offsets( 0, 15 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 };

array s8 _ErrAct_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _ErrAct_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_cond_targs( 0, 6 ) = { 2, 2, 3, 0, 3, 0, 6, 4, 3, 0, 5, 0, 6, 5, 0, 0, 0 };

array s8 _ErrAct_cond_actions( 0, 3 ) = { 0, 0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0 };

array s8 _ErrAct_eof_actions( 0, 3 ) = { 0, 1, 2, 3, 2, 2, 0, 0 };

array s8 _ErrAct_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ErrAct_start = 1;
value int ErrAct_first_final = 6;
value int ErrAct_error = 0;

value int ErrAct_en_main = 1;

host( "working/erract5.rl", 60 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)ErrAct_start;
	}
	host( "working/erract5.rl", 64 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const char *)_data len:(int)_len;
	{
		const char *p = _data;
		const char *pe = _data + _len;
		const char *eof = pe;
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				_keys = offset( _ErrAct_trans_keys, _ErrAct_key_offsets[cs] );
				_trans = cast(uint)_ErrAct_index_offsets[cs];
				
				_klen = cast(int)_ErrAct_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _ErrAct_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _ErrAct_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_ErrAct_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _ErrAct_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _ErrAct_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _ErrAct_cond_keys, _ErrAct_trans_offsets[_trans] );
				_klen = cast(int)_ErrAct_trans_lengths[_trans];
				_cond = cast(uint)_ErrAct_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _ErrAct_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _ErrAct_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_ErrAct_cond_targs[_cond];
				
				if ( _ErrAct_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _ErrAct_cond_actions[_cond] ) {
					case 1 {
						host( "working/erract5.rl", 43 ) ${ printf(" DIGIT PLUS MINUS\n"); }$
					}
					case 2 {
						host( "working/erract5.rl", 44 ) ${ printf(" DIGIT\n"); }$
					}
					case 3 {
						host( "working/erract5.rl", 45 ) ${ printf(" DIGIT DECIMAL\n"); }$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					switch ( _ErrAct_eof_actions[cs] ) {
						case 1 {
							host( "working/erract5.rl", 43 ) ${ printf(" DIGIT PLUS MINUS\n"); }$
						}
						case 2 {
							host( "working/erract5.rl", 44 ) ${ printf(" DIGIT\n"); }$
						}
						case 3 {
							host( "working/erract5.rl", 45 ) ${ printf(" DIGIT DECIMAL\n"); }$
						}
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/erract5.rl", 73 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == ErrAct_error )
		return -1;
		else if ( cs >= ErrAct_first_final )
		return 1;
		return 0;
	}
	
	
	@@end
	
	#define BUFSIZE 1024
	
	void test( char *buf )
	{
		ErrAct *errAct = [[ErrAct alloc] init];
		[errAct initFsm];
		[errAct executeWithData:buf len:strlen(buf)];
		if ( [errAct finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "1\n" );
		test( "+1\n" );
		test( "-1\n" );
		test( "1.1\n" );
		test( "+1.1\n" );
		test( "-1.1\n" );
		test( "a\n" );
		test( "-\n" );
		test( "+\n" );
		test( "-a\n" );
		test( "+b\n" );
		test( "1.\n" );
		test( "1d\n" );
		test( "1.d\n" );
		test( "1.1d\n" );
		return 0;
	}
	
}@