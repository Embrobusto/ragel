static _indep_trans_keys: [u8 ; 30] = [ 1, 0, 2, 3, 9, 9, 8, 8, 10, 10, 10, 10, 11, 11, 0, 0, 5, 9, 4, 8, 6, 10, 6, 10, 7, 11, 1, 0, 0 , 0 ];
static _indep_char_class: [i8 ; 104] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 1, 1, 1, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 1, 1, 1, 10, 1, 1, 11, 0 , 0 ];
static _indep_index_offsets: [i8 ; 16] = [ 0, 0, 2, 3, 4, 5, 6, 7, 8, 13, 18, 23, 28, 33, 0 , 0 ];
static _indep_indices: [i8 ; 35] = [ 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 9, 10, 1, 1, 1, 10, 11, 1, 1, 1, 11, 12, 1, 1, 1, 12, 7, 1, 1, 1, 7, 0 , 0 ];
static _indep_index_defaults: [i8 ; 16] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _indep_trans_cond_spaces: [i8 ; 15] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _indep_cond_targs: [i8 ; 15] = [ 2, 0, 8, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 0 , 0 ];
static _indep_cond_actions: [i8 ; 15] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _indep_nfa_offsets: [i8 ; 16] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _indep_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static indep_start : i32 = 1;
static indep_first_final : i32 = 13;
static indep_error : i32 = 0;
static indep_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( indep_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _indep_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 111 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _indep_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _indep_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _indep_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _indep_indices[(_inds + ( ( _ic - ( _indep_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _indep_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _indep_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _indep_cond_targs[(_trans) as usize] ) as i32;
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= indep_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "1hello\n".to_string() ); }
	unsafe { m( "1HELLO\n".to_string() ); }
	unsafe { m( "1HeLLo\n".to_string() ); }
	unsafe { m( "2hello\n".to_string() ); }
	unsafe { m( "2HELLO\n".to_string() ); }
	unsafe { m( "2HeLLo\n".to_string() ); }
	unsafe { m( "3hello\n".to_string() ); }
	unsafe { m( "3HELLO\n".to_string() ); }
	unsafe { m( "3HeLLo\n".to_string() ); }
	unsafe { m( "4hello\n".to_string() ); }
	unsafe { m( "4HELLO\n".to_string() ); }
	unsafe { m( "4HeLLo\n".to_string() ); }
	unsafe { m( "5hello\n".to_string() ); }
	unsafe { m( "5HELLO\n".to_string() ); }
	unsafe { m( "5HeLLo\n".to_string() ); }
	unsafe { m( "6hello\n".to_string() ); }
	unsafe { m( "6HELLO\n".to_string() ); }
	unsafe { m( "6HeLLo\n".to_string() ); }
}

