class ncall1_java
{
	int top ;
	int stack [] = new int[32];
	int target ;
	
	
	
	
	
	private static char  _ncall1_trans_keys [] = { 1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0,  };
	private static byte  _ncall1_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 ,  };
	private static byte  _ncall1_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 ,  };
	private static byte  _ncall1_indices [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 ,  };
	private static byte  _ncall1_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _ncall1_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _ncall1_cond_targs [] = { 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 ,  };
	private static byte  _ncall1_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 4, 0 ,  };
	private static byte  _ncall1_nfa_targs [] = { 0, 0 ,  };
	private static byte  _ncall1_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _ncall1_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _ncall1_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  ncall1_start  = 13;
	private static int  ncall1_first_final  = 13;
	private static int  ncall1_error  = 0;
	private static int  ncall1_en_unused  = 1;
	private static int  ncall1_en_one  = 7;
	private static int  ncall1_en_two  = 10;
	private static int  ncall1_en_main  = 13;
	int cs;
	
	void init()
	{
		{
			cs = (int)ncall1_start;
			top = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _trans = 0;
			int _have = 0;
			int _cont = 1;
			int _keys;
			int _inds;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = (cs<<1) ;
						_inds = _ncall1_index_offsets[cs] ;
						if ( ( data[p ]) <= 119 && ( data[p ]) >= 10  )
						{
							int _ic = (int)_ncall1_char_class[(int)( data[p ]) - 10];
							if ( _ic <= (int)_ncall1_trans_keys[_keys+1 ]&& _ic >= (int)_ncall1_trans_keys[_keys ] )
							_trans = (int )_ncall1_indices[_inds + (int)( _ic - (int)_ncall1_trans_keys[_keys ])  ];
							
							else
							_trans = (int )_ncall1_index_defaults[cs];
							
							
						}
						
						else
						{
							_trans = (int )_ncall1_index_defaults[cs];
							
						}
						
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_ncall1_cond_targs[_trans];
						switch ( _ncall1_cond_actions[_trans]  ) {
							case 1 :
							{
								System.out.print( "one\n" );
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 2 :
							{
								System.out.print( "two\n" );
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 3 :
							{
								target = 7;
								{
									stack[top] = cs;
									top += 1;
									cs = (target);
									
								}
								
							}
							
							break;
							case 4 :
							{
								target = 10;
								{
									stack[top] = cs;
									top += 1;
									cs = (target);
									
								}
								
							}
							
							break;
							
						}
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= ncall1_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"1one2two1one\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		ncall1_java machine = new ncall1_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
