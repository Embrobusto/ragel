#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_scanner_actions 
	private :_scanner_actions, :_scanner_actions=
end
self._scanner_actions = [
0, 1, 2, 1, 3, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 2, 0, 1, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 3, 7, 0 , 
]

class << self
	attr_accessor :_scanner_key_offsets 
	private :_scanner_key_offsets, :_scanner_key_offsets=
end
self._scanner_key_offsets = [
0, 0, 3, 3, 6, 6, 7, 11, 13, 14, 16, 17, 23, 54, 56, 57, 58, 60, 61, 63, 66, 67, 71, 79, 85, 88, 98, 107, 117, 126, 127, 128, 135, 144, 145, 0 , 
]

class << self
	attr_accessor :_scanner_trans_keys 
	private :_scanner_trans_keys, :_scanner_trans_keys=
end
self._scanner_trans_keys = [
10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 33, 33, 47, 10, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 33, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 0 , 
]

class << self
	attr_accessor :_scanner_single_lengths 
	private :_scanner_single_lengths, :_scanner_single_lengths=
end
self._scanner_single_lengths = [
0, 3, 0, 3, 0, 1, 2, 0, 1, 2, 1, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 7, 1, 1, 1, 3, 1, 2, 0 , 
]

class << self
	attr_accessor :_scanner_range_lengths 
	private :_scanner_range_lengths, :_scanner_range_lengths=
end
self._scanner_range_lengths = [
0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 0, 0, 3, 3, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_index_offsets 
	private :_scanner_index_offsets, :_scanner_index_offsets=
end
self._scanner_index_offsets = [
0, 0, 4, 5, 9, 10, 12, 16, 18, 20, 23, 25, 29, 54, 56, 58, 60, 63, 65, 68, 72, 74, 78, 86, 92, 96, 106, 115, 123, 132, 134, 136, 141, 148, 150, 0 , 
]

class << self
	attr_accessor :_scanner_trans_cond_spaces 
	private :_scanner_trans_cond_spaces, :_scanner_trans_cond_spaces=
end
self._scanner_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_scanner_trans_offsets 
	private :_scanner_trans_offsets, :_scanner_trans_offsets=
end
self._scanner_trans_offsets = [
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 0 , 
]

class << self
	attr_accessor :_scanner_trans_lengths 
	private :_scanner_trans_lengths, :_scanner_trans_lengths=
end
self._scanner_trans_lengths = [
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_scanner_cond_keys 
	private :_scanner_cond_keys, :_scanner_cond_keys=
end
self._scanner_cond_keys = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_cond_targs 
	private :_scanner_cond_targs, :_scanner_cond_targs=
end
self._scanner_cond_targs = [
12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 23, 12, 23, 12, 9, 8, 9, 12, 8, 12, 10, 27, 27, 27, 12, 14, 1, 15, 16, 3, 17, 18, 19, 21, 24, 25, 29, 30, 32, 33, 31, 34, 12, 28, 12, 31, 12, 31, 12, 13, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20, 12, 12, 12, 12, 5, 22, 12, 6, 12, 12, 6, 12, 12, 22, 12, 12, 12, 12, 12, 23, 12, 8, 10, 12, 12, 22, 6, 12, 12, 6, 12, 12, 11, 26, 12, 22, 6, 12, 12, 6, 12, 12, 26, 12, 12, 12, 12, 12, 27, 27, 27, 12, 22, 6, 12, 12, 6, 12, 12, 28, 12, 12, 12, 12, 12, 31, 31, 31, 31, 12, 1, 3, 31, 31, 31, 31, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 , 
]

class << self
	attr_accessor :_scanner_cond_actions 
	private :_scanner_cond_actions, :_scanner_cond_actions=
end
self._scanner_cond_actions = [
79, 7, 0, 0, 0, 79, 5, 0, 0, 0, 51, 77, 0, 0, 0, 79, 0, 79, 0, 0, 0, 55, 0, 57, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 90, 0, 0, 84, 0, 0, 0, 53, 90, 53, 0, 53, 0, 53, 0, 73, 0, 21, 71, 31, 71, 23, 37, 71, 27, 71, 43, 33, 71, 45, 35, 0, 71, 47, 69, 49, 0, 87, 71, 0, 9, 9, 0, 9, 9, 87, 61, 9, 9, 9, 9, 0, 61, 0, 0, 29, 71, 87, 0, 11, 11, 0, 11, 11, 0, 93, 63, 87, 0, 13, 13, 0, 13, 13, 93, 65, 15, 15, 15, 15, 0, 0, 0, 67, 87, 0, 11, 11, 0, 11, 11, 90, 63, 17, 71, 19, 71, 0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 59, 39, 71, 41, 25, 71, 79, 79, 79, 79, 77, 79, 79, 77, 77, 77, 75, 73, 71, 71, 71, 71, 71, 71, 69, 71, 61, 61, 71, 63, 65, 67, 63, 71, 71, 59, 59, 71, 71, 0 , 
]

class << self
	attr_accessor :_scanner_to_state_actions 
	private :_scanner_to_state_actions, :_scanner_to_state_actions=
end
self._scanner_to_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_from_state_actions 
	private :_scanner_from_state_actions, :_scanner_from_state_actions=
end
self._scanner_from_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_eof_trans_indexed 
	private :_scanner_eof_trans_indexed, :_scanner_eof_trans_indexed=
end
self._scanner_eof_trans_indexed = [
0, 12, 12, 12, 12, 15, 12, 12, 15, 15, 15, 19, 0, 21, 22, 22, 22, 22, 22, 22, 32, 22, 35, 35, 22, 38, 40, 42, 38, 22, 22, 46, 46, 22, 22, 0 , 
]

class << self
	attr_accessor :_scanner_eof_trans_direct 
	private :_scanner_eof_trans_direct, :_scanner_eof_trans_direct=
end
self._scanner_eof_trans_direct = [
0, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 0, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_targs 
	private :_scanner_nfa_targs, :_scanner_nfa_targs=
end
self._scanner_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_offsets 
	private :_scanner_nfa_offsets, :_scanner_nfa_offsets=
end
self._scanner_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_push_actions 
	private :_scanner_nfa_push_actions, :_scanner_nfa_push_actions=
end
self._scanner_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_pop_trans 
	private :_scanner_nfa_pop_trans, :_scanner_nfa_pop_trans=
end
self._scanner_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :scanner_start 
end
self.scanner_start  = 12;

class << self
	attr_accessor :scanner_first_final 
end
self.scanner_first_final  = 12;

class << self
	attr_accessor :scanner_error 
end
self.scanner_error  = 0;

class << self
	attr_accessor :scanner_en_main 
end
self.scanner_en_main  = 12;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	ts = 1
	te = 1
	act = 1
	token = 1
	begin
		cs = scanner_start;
		ts = 0;
		te = 0;
		act = 0;
		
	end
	begin
		_klen= 0
		;
		_trans = 0;
		_cond = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _scanner_eof_trans_direct[cs] > 0  )
									begin
										_trans = _scanner_eof_trans_direct[cs] - 1;
										_cond = _scanner_trans_offsets[_trans];
										_have = 1;
										
									end
									
								end
								if ( _have == 0  )
									begin
									
									end
									
								end
								
							end
							
						end
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_acts = _scanner_from_state_actions[cs] ;
								_nacts = _scanner_actions[_acts ];
								_acts += 1;
								while ( _nacts > 0  )
									begin
										case  _scanner_actions[_acts ] 
										when -2 then
										begin
										end
										when 2  then
										begin
											begin
												begin
													ts = p;
													
												end
												
											end
											
											
										end
									end
									_nacts -= 1;
									_acts += 1;
									
								end
								
							end
							_keys = _scanner_key_offsets[cs] ;
							_trans = _scanner_index_offsets[cs];
							_have = 0;
							_klen = _scanner_single_lengths[cs];
							if ( _klen > 0  )
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[p ].ord) < _scanner_trans_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( ( data[p ].ord) > _scanner_trans_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_trans += (_mid - _keys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											_keys += _klen;
											_trans += _klen;
											
										end
										
									end
									
								end
								
							end
							if ( _have == 0  )
								begin
									_klen = _scanner_range_lengths[cs];
									if ( _klen > 0  )
										begin
											_lower = 0;
											_mid = 0;
											_upper = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
												begin
													_mid = _lower + (((_upper-_lower) >> 1) & ~1);
													if ( ( data[p ].ord) < _scanner_trans_keys[_mid ] )
														_upper = _mid - 2;
														
														elsif ( ( data[p ].ord) > _scanner_trans_keys[_mid + 1 ] )
														_lower = _mid + 2;
														
														else
														begin
															_trans += ((_mid - _keys)>>1);
															_have = 1;
															
														end
														
													end
													
												end
												
											end
											if ( _have == 0  )
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								
							end
							_ckeys = _scanner_trans_offsets[_trans] ;
							_klen = _scanner_trans_lengths[_trans];
							_cond = _scanner_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							begin
								_lower = 0;
								_mid = 0;
								_upper = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
									begin
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( _cpc < _scanner_cond_keys[_mid ] )
											_upper = _mid - 1;
											
											elsif ( _cpc > _scanner_cond_keys[_mid ] )
											_lower = _mid + 1;
											
											else
											begin
												_cond += (_mid - _ckeys);
												_have = 1;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										cs = 0;
										_cont = 0;
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _scanner_cond_targs[_cond];
							if ( _scanner_cond_actions[_cond] != 0  )
								begin
									_acts = _scanner_cond_actions[_cond] ;
									_nacts = _scanner_actions[_acts ];
									_acts += 1;
									while ( _nacts > 0  )
										begin
											case  _scanner_actions[_acts ] 
											when -2 then
											begin
											end
											when 3  then
											begin
												begin
													begin
														te = p+1;
														
													end
													
												end
												
											end
											when 4  then
											begin
												begin
													begin
														act = 3;
														
													end
													
												end
												
											end
											when 5  then
											begin
												begin
													begin
														act = 4;
														
													end
													
												end
												
											end
											when 6  then
											begin
												begin
													begin
														act = 5;
														
													end
													
												end
												
											end
											when 7  then
											begin
												begin
													begin
														act = 6;
														
													end
													
												end
												
											end
											when 8  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 193;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 9  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 192;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 10  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 194;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 11  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 218;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 12  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 219;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 13  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 220;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 14  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 197;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 15  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 223;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 16  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 224;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 17  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 225;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 18  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 226;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 19  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 227;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 20  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 228;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 21  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 229;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 22  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 230;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 23  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 231;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 24  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 232;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 25  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 233;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 26  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 234;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 27  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 212;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 28  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 213;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 29  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 214;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 30  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 215;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 31  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 240;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 32  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = ( data[ts].ord )
															;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 33  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 242;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 34  then
											begin
												begin
													begin
														te = p+1;
														begin
															token = 242;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 35  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 195;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 36  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 194;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 37  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 218;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 38  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 219;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 39  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 220;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 40  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 211;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 41  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = ( data[ts].ord )
															;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 42  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															token = 241;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 43  then
											begin
												begin
													begin
														p = ((te))-1;
														begin
															token = 218;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 44  then
											begin
												begin
													begin
														p = ((te))-1;
														begin
															token = ( data[ts].ord )
															;
															print( "<" );
															print( token );
															print( "> " );
															_m = data[ts..te-1];
															print( _m );
															print( "\n" );
															
														end
														
													end
													
												end
												
											end
											when 45  then
											begin
												begin
													begin
														case  act  
														when -2 then
														begin
														end
														when 0  then
														begin
															begin
																begin
																	cs = 0;
																	
																end
																
															end
															
														end
														when 3  then
														begin
															p = ((te))-1;
															begin
																token = 195;
																print( "<" );
																print( token );
																print( "> " );
																_m = data[ts..te-1];
																print( _m );
																print( "\n" );
																
															end
															
														end
														when 4  then
														begin
															p = ((te))-1;
															begin
																token = 194;
																print( "<" );
																print( token );
																print( "> " );
																_m = data[ts..te-1];
																print( _m );
																print( "\n" );
																
															end
															
														end
														when 5  then
														begin
															p = ((te))-1;
															begin
																token = 218;
																print( "<" );
																print( token );
																print( "> " );
																_m = data[ts..te-1];
																print( _m );
																print( "\n" );
																
															end
															
														end
														when 6  then
														begin
															p = ((te))-1;
															begin
																token = 219;
																print( "<" );
																print( token );
																print( "> " );
																_m = data[ts..te-1];
																print( _m );
																print( "\n" );
																
															end
															
															
														end
													end
													
												end
												
												
											end
											
											
										end
									end
									_nacts -= 1;
									_acts += 1;
									
								end
								
							end
							
						end
						
					end
					_acts = _scanner_to_state_actions[cs] ;
					_nacts = _scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
						begin
							case  _scanner_actions[_acts ] 
							when -2 then
							begin
							end
							when 0  then
							begin
								begin
									begin
										ts = 0;
										
									end
									
								end
								
							end
							when 1  then
							begin
								begin
									begin
										act = 0;
										
									end
									
								end
								
								
							end
						end
						_nacts -= 1;
						_acts += 1;
						
					end
					
				end
				if ( cs == 0  )
					_cont = 0;
					
				end
				if ( _cont == 1  )
					p += 1;
					
				end
				
			end
			
		end
		
	end
	
end

end

end

end
if cs >= scanner_first_final
puts "ACCEPT"
else
puts "FAIL"
end
end

inp = [
"\"\\\"hi\" /!\n!/\n44 .44\n44. 44\n44 . 44\n44.44\n_hithere22",
"'\\''\"\\n\\d'\\\"\"\nhi\n99\n.99\n99e-4\n->*\n||\n0x98\n0x\n//\n/! * !/",
"'\n'\n",
]

inplen = 3

inp.each { |str| run_machine(str) }

