package main
import "fmt"

var target  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _next1_trans_keys [] byte  = [] byte  { 1, 0, 0, 3, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 0 }
var _next1_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0  }
var _next1_index_offsets [] int8  = [] int8  { 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 0  }
var _next1_indices [] int8  = [] int8  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0  }
var _next1_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _next1_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _next1_cond_targs [] int8  = [] int8  { 14, 0, 14, 14, 3, 4, 5, 6, 7, 15, 9, 10, 16, 12, 13, 17, 0  }
var _next1_cond_actions [] int8  = [] int8  { 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0  }
var _next1_nfa_targs [] int8  = [] int8  { 0, 0  }
var _next1_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _next1_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _next1_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var next1_start  int  = 1
var next1_first_final  int  = 14
var next1_error  int  = 0
var next1_en_unused  int  = 2
var next1_en_one  int  = 8
var next1_en_two  int  = 11
var next1_en_main  int  = 1
func prepare() {

	{
		cs = int(next1_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  int   = 0
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int((cs<<1) );
		_inds = int(_next1_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 119 && ( data[p ]) >= 10 :
			{
				var  _ic  int   = int(_next1_char_class[int(( data[p ]) )- 10])
				switch {
					case _ic <= int(_next1_trans_keys[_keys+1 ])&& _ic >= int(_next1_trans_keys[_keys ]):
					_trans = int(_next1_indices[_inds + int(( _ic - int(_next1_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_next1_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_next1_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_next1_cond_targs[_trans]);
		if _next1_cond_actions[_trans] == 0  {
			goto _again;
			
			
		}
		switch _next1_cond_actions[_trans]  {
			case 3 :
			{fmt.Print( "one\n" );target = 1;
				{cs = (target);
				}
				
			}
			
			break;
			case 4 :
			{fmt.Print( "two\n" );target = 1;
				{cs = (target);
				}
				
			}
			
			break;
			case 1 :
			{target = 8;
				{cs = (target);
				} 
			}
			
			break;
			case 2 :
			{target = 11;
				{cs = (target);
				} 
			}
			
			break;
			
		}
		
		_again :
		if cs == 0  {
			goto _out;
			
		}
		p+= 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= next1_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1one2two1one\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
