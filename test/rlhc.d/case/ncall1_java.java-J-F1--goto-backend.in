host( "working/ncall1_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class ncall1_java
	{
		int top ;
		int stack [] = new int[32];
		int target ;
		
		
		
		
		
	}@
	array char _ncall1_trans_keys( 0, 11 ) = { u(1), u(0), u(10), u(10), u(6), u(6), u(10), u(10), u(8), u(8), u(5), u(5), u(4), u(4), u(7), u(7), u(6), u(6), u(5), u(5), u(9), u(9), u(11), u(11), u(7), u(7), u(0), u(3), u(1), u(0), u(1), u(0), u(1), u(0), u(0) };
	
	array s8 _ncall1_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 };
	
	array s8 _ncall1_index_offsets( 0, 16 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 };
	
	array s8 _ncall1_indicies( 0, 15 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 };
	
	array s8 _ncall1_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _ncall1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _ncall1_cond_targs( 0, 16 ) = { 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 };
	
	array s8 _ncall1_cond_actions( 0, 4 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 4, 0 };
	
	array s8 _ncall1_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _ncall1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _ncall1_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _ncall1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int ncall1_start = 13;
	value int ncall1_first_final = 13;
	value int ncall1_error = 0;
	
	value int ncall1_en_unused = 1;
	value int ncall1_en_one = 7;
	value int ncall1_en_two = 10;
	value int ncall1_en_main = 13;
	
	host( "working/ncall1_java.rl", 36 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)ncall1_start;
			top = 0;
		}
		host( "working/ncall1_java.rl", 41 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			String _s;
		}@
		{
			int _trans = 0;
			index char _keys;
			index s8 _inds;
			entry {
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume {
					_keys = offset( _ncall1_trans_keys, (cs<<1) );
					_inds = offset( _ncall1_indicies, _ncall1_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 119 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_ncall1_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _ncall1_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _ncall1_trans_keys, _keys ) )
						_trans = cast(int)deref( _ncall1_indicies, _inds + cast(int)( _ic - cast(int)deref( _ncall1_trans_keys, _keys ) )  ); 
						else
						_trans = cast(int)_ncall1_index_defaults[cs];
					}
					else {
						_trans = cast(int)_ncall1_index_defaults[cs];
					}
					
					goto _match_cond;
				}
				label _match_cond {
					cs = cast(int)_ncall1_cond_targs[_trans];
					
					if ( _ncall1_cond_actions[_trans] == 0 )
					goto _again;
					
					switch ( _ncall1_cond_actions[_trans] ) {
						case 1 {
							host( "working/ncall1_java.rl", 18 ) ${System.out.print( "one\n" );
								${top -= 1;cs = stack[top];}$}$
						}
						case 2 {
							host( "working/ncall1_java.rl", 21 ) ${System.out.print( "two\n" );
								${top -= 1;cs = stack[top];}$}$
						}
						case 3 {
							host( "working/ncall1_java.rl", 25 ) ${target = 7;
								${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=; }$}$
						}
						case 4 {
							host( "working/ncall1_java.rl", 27 ) ${target = 10;
								${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=; }$}$
						}
					}
					
					
				}
				label _again {
					if ( cs == 0 )
					goto _out;
					p+= 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
				}
				label _out { {}
				}
			}
		}
		host( "working/ncall1_java.rl", 52 ) @{
		}
		
		void finish( )
		{
			if ( cs >= ncall1_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"1one2two1one\n",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			ncall1_java machine = new ncall1_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@