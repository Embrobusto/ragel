host( "working/gotocallret3_ruby.rl", 1 ) @{#
	# @@LANG: ruby
	# @@GENERATED: true
	#
	
	
	
	
	
	
}@
array char _gotocallret_trans_keys( 0, 5 ) = { 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0 };

array s8 _gotocallret_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 };

array s8 _gotocallret_index_offsets( 0, 12 ) = { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 };

array s8 _gotocallret_indices( 0, 10 ) = { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 };

array s8 _gotocallret_index_defaults( 0, 11 ) = { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 };

array s8 _gotocallret_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _gotocallret_cond_targs( 0, 10 ) = { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 };

array s8 _gotocallret_cond_actions( 0, 9 ) = { 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0 };

array s8 _gotocallret_eof_actions( 0, 8 ) = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 };

array s8 _gotocallret_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _gotocallret_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int gotocallret_start = 7;
value int gotocallret_first_final = 7;
value int gotocallret_error = 0;

value int gotocallret_en_garble_line = 3;
value int gotocallret_en_alp_comm = 5;
value int gotocallret_en_dig_comm = 6;
value int gotocallret_en_main = 7;

host( "working/gotocallret3_ruby.rl", 58 ) @{
	
	def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	comm = 1
	top = 1
	stack = Array.new
}@
{
	cs = cast(int)gotocallret_start;
	top = 0;
}
host( "working/gotocallret3_ruby.rl", 72 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index char _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _have == 0 ) {
					switch ( _gotocallret_eof_actions[cs] ) {
						case 4 {
							host( "working/gotocallret3_ruby.rl", 17 ) ${print( "error: failed to recover\n" );
							}$
						}
						case 8 {
							host( "working/gotocallret3_ruby.rl", 27 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
						}
						case 1 {
							host( "working/gotocallret3_ruby.rl", 52 ) ${${p = p - 1; }$${cs = 3;}$}$
						}
					}
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _gotocallret_trans_keys, (cs<<1) );
				_inds = offset( _gotocallret_indices, _gotocallret_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_gotocallret_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _gotocallret_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _gotocallret_trans_keys, _keys ) )
					_trans = cast(uint)deref( _gotocallret_indices, _inds + cast(int)( _ic - cast(int)deref( _gotocallret_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_gotocallret_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_gotocallret_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_gotocallret_cond_targs[_trans];
				
				switch ( _gotocallret_cond_actions[_trans] ) {
					case 5 {
						host( "working/gotocallret3_ruby.rl", 14 ) ${print( "error: garbling line\n" );
						}$
					}
					case 7 {
						host( "working/gotocallret3_ruby.rl", 16 ) ${${cs = 7;}$}$
					}
					case 8 {
						host( "working/gotocallret3_ruby.rl", 27 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
					}
					case 9 {
						host( "working/gotocallret3_ruby.rl", 44 ) ${comm = ={( deref( data, p ))}=;
						}$
					}
					case 3 {
						host( "working/gotocallret3_ruby.rl", 47 ) ${print( "correct command\n" );
						}$
					}
					case 1 {
						host( "working/gotocallret3_ruby.rl", 52 ) ${${p = p - 1; }$${cs = 3;}$}$
					}
					case 6 {
						host( "working/gotocallret3_ruby.rl", 14 ) ${print( "error: garbling line\n" );
						}$
						host( "working/gotocallret3_ruby.rl", 16 ) ${${cs = 7;}$}$
					}
					case 2 {
						host( "working/gotocallret3_ruby.rl", 35 ) ${if ( comm >= 97 )
							${stack[top] = cs; top += 1;cs = 5;}$else 
							${stack[top] = cs; top += 1;cs = 6;}$end
						}$
						host( "working/gotocallret3_ruby.rl", 45 ) ${print( "prints\n" );
						}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/gotocallret3_ruby.rl", 73 ) @{
	if cs >= gotocallret_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
	end
	end
	
	inp = [
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
	]
	
	inplen = 17
	
	inp.each { |str| run_machine(str) }
	
}@