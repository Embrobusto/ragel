#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct high
{
	int cs;
};



static const int  high_start  = 0;
static const int  high_first_final  = 0;
static const int  high_error  = -1;
static const int  high_en_main  = 0;
static const char  _high_nfa_targs [] = { 0, 0 ,  };
static const char  _high_nfa_offsets [] = { 0, 0 ,  };
static const char  _high_nfa_push_actions [] = { 0, 0 ,  };
static const char  _high_nfa_pop_trans [] = { 0, 0 ,  };
void high_init( struct high *fsm )
{

	{
		(fsm->cs) = ( int ) high_start;
	}
}

void high_execute( struct high *fsm, const unsigned int *_data, int _len )
{
	const unsigned int *p = _data;
	const unsigned int *pe = _data+_len;
	
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		switch ( (fsm->cs) ) {
			case 0:
			goto st_case_0;
			
		}
		goto st_out;
		ctr0:
		{
			printf("else\n");
		}
		
		
		goto st0;
		ctr1:
		{
			printf("gothigh1\n");
		}
		
		
		goto st0;
		ctr2:
		{
			printf("gothigh1\n");
		}
		{
			printf("gothigh2\n");
		}
		
		
		goto st0;
		ctr3:
		{
			printf("gothigh1\n");
		}
		{
			printf("gothigh2\n");
		}
		
		
		goto st0;
		ctr4:
		{
			printf("gothigh2\n");
		}
		
		
		goto st0;
		st0:
		p+= 1;
		if ( p == pe  )
		goto _test_eof0;
		
		st_case_0:
		if ( ((*( p  ))
		)== 4026531840u )
		{
			goto ctr3;
		}
		
		if ( ((*( p  ))
		)< 32u )
		{
			{
				goto ctr0;
			}
		} 
		else if ( ((*( p  ))
		)> 511u )
		{
			if ( ((*( p  ))
			)> 4261412864u )
			{
				{
					goto ctr0;
				}
			} 
			else if ( ((*( p  ))
			)>= 4026531841u )
			{
				goto ctr4;
			}
			
		} 
		else
		{
			goto ctr1;
		}
		
		{
			goto ctr2;
		}
		st_out:
		_test_eof0: (fsm->cs) = 0;
		goto _test_eof; 
		
		_test_eof: {}
	}
}

int high_finish( struct high *fsm )
{
	if ( fsm->cs == high_error )
	return -1;
	if ( fsm->cs >= high_first_final )
	return 1;
	return 0;
}

struct high high;

#define BUFSIZE 1024
char cbuf[BUFSIZE];
unsigned int buf[BUFSIZE];
int buflen = 0;
char numbuf[9];
int numlen = 0;

struct tokenizer
{
	int cs;
};



static const int  tokenizer_start  = 1;
static const int  tokenizer_first_final  = 1;
static const int  tokenizer_error  = 0;
static const int  tokenizer_en_main  = 1;
static const char  _tokenizer_nfa_targs [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_offsets [] = { 0, 0, 0, 0 ,  };
static const char  _tokenizer_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_pop_trans [] = { 0, 0 ,  };
void tokenizer_init( struct tokenizer *fsm )
{

	{
		(fsm->cs) = ( int ) tokenizer_start;
	}
}

void tokenizer_execute( struct tokenizer *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		switch ( (fsm->cs) ) {
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			
		}
		goto st_out;
		ctr3:
		{
			numbuf[numlen] = 0;
			numlen = 0;
			
			/* Store the number in the buf. If the buf is full then 
			* flush and reset the buffer. */
			buf[buflen++] = strtoul( numbuf, 0, 16 );
			if ( buflen == BUFSIZE ) {
				high_execute( &high, buf, BUFSIZE );
				buflen = 0;
			}
			
		}
		
		
		goto st1;
		st1:
		p+= 1;
		if ( p == pe  )
		goto _test_eof1;
		
		st_case_1:
		if ( ((*( p  ))
		)== 32  )
		{
			goto st1;
		}
		
		if ( ((*( p  ))
		)< 48  )
		{
			if ( 9 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 13  )
			{
				goto st1;
			}
			
		} 
		else if ( ((*( p  ))
		)> 57  )
		{
			if ( 97 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 102  )
			{
				goto ctr2;
			}
			
		} 
		else
		{
			goto ctr2;
		}
		
		{
			goto st0;
		}
		st_case_0:
		st0:
		(fsm->cs) = 0;
		goto _out;
		ctr2:
		{
			if ( numlen < 8 )
			numbuf[numlen++] = (((*( p  ))
			));
			
		}
		
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe  )
		goto _test_eof2;
		
		st_case_2:
		if ( ((*( p  ))
		)== 32  )
		{
			goto ctr3;
		}
		
		if ( ((*( p  ))
		)< 48  )
		{
			if ( 9 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 13  )
			{
				goto ctr3;
			}
			
		} 
		else if ( ((*( p  ))
		)> 57  )
		{
			if ( 97 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 102  )
			{
				goto ctr2;
			}
			
		} 
		else
		{
			goto ctr2;
		}
		
		{
			goto st0;
		}
		st_out:
		_test_eof1: (fsm->cs) = 1;
		goto _test_eof; 
		_test_eof2: (fsm->cs) = 2;
		goto _test_eof; 
		
		_test_eof: {}
		if ( p == eof  )
		{
			switch ( (fsm->cs) ) {
				case 1:
				{
					if ( buflen > 0 )
					high_execute( &high, buf, buflen );
					if ( high_finish( &high ) > 0 )
					printf("ACCEPT\n");
					else
					printf("FAIL\n");
					
				}
				
				break;
				case 2:
				{
					numbuf[numlen] = 0;
					numlen = 0;
					
					/* Store the number in the buf. If the buf is full then 
					* flush and reset the buffer. */
					buf[buflen++] = strtoul( numbuf, 0, 16 );
					if ( buflen == BUFSIZE ) {
						high_execute( &high, buf, BUFSIZE );
						buflen = 0;
					}
					
				}
				{
					if ( buflen > 0 )
					high_execute( &high, buf, buflen );
					if ( high_finish( &high ) > 0 )
					printf("ACCEPT\n");
					else
					printf("FAIL\n");
					
				}
				
				break;
				
			}
		}
		
		
		_out: {}
	}
}

int tokenizer_finish( struct tokenizer *fsm )
{
	if ( fsm->cs == tokenizer_error )
	return -1;
	if ( fsm->cs >= tokenizer_first_final )
	return 1;
	return 0;
}

struct tokenizer tok;

void test( char *cbuf )
{
	int len = strlen( cbuf );
	high_init( &high );
	tokenizer_init( &tok );
	tokenizer_execute( &tok, cbuf, len );
	if ( tokenizer_finish( &tok ) <= 0 )
	printf("Tokenizer FAIL\n");
}

char data[] =
"10 20 30 40 50 200 300 400 \n"
"d0000000 f0000000 fd000000 fe000000\n"
"ff000000 ffffffffffffffffffffffffff\n"
"ff\n";

int main()
{
	test( data );
	return 0;
}

