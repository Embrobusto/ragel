const _erract_actions = Int8[0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 , ]
const _erract_trans_keys = UInt8[1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0 , ]
const _erract_char_class = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 , ]
const _erract_index_offsets = Int8[0, 0, 1, 2, 3, 4, 5, 6, 0 , ]
const _erract_indices = Int8[1, 3, 4, 5, 6, 8, 0 , ]
const _erract_index_defaults = Int8[0, 0, 2, 2, 2, 2, 7, 9, 0 , ]
const _erract_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _erract_cond_targs = Int8[0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 , ]
const _erract_cond_actions = Int8[1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 , ]
const _erract_eof_actions = Int8[0, 10, 15, 15, 15, 15, 20, 0, 0 , ]
const _erract_nfa_targs = Int8[0, 0 , ]
const _erract_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _erract_nfa_push_actions = Int8[0, 0 , ]
const _erract_nfa_pop_trans = Int8[0, 0 , ]
const erract_start  = 1
const erract_first_final  = 7
const erract_error  = 0
const erract_en_main  = 1
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	
	cs = convert(Int, erract_start )
	_trans = 0;
	_have = 0;
	_cont = 1;
	_acts = 0;
	_nacts= 0
	;
	_keys = 0;
	_inds = 0;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if p == eof 
				if _have == 0 
					__acts = 0;
					__nacts= 0
					;
					__acts = _erract_eof_actions[1+(cs)]
					__nacts = convert(UInt, _erract_actions[1+(__acts )] )
					__acts += 1
					while __nacts > 0 
						if _erract_actions[1+(__acts )] == 0 
							print( "err_start\n" );
							
						elseif _erract_actions[1+(__acts )] == 1 
							print( "err_all\n" );
							
						elseif _erract_actions[1+(__acts )] == 2 
							print( "err_middle\n" );
							
						elseif _erract_actions[1+(__acts )] == 3 
							print( "err_out\n" );
							
						elseif _erract_actions[1+(__acts )] == 4 
							print( "eof_start\n" );
							
						elseif _erract_actions[1+(__acts )] == 5 
							print( "eof_all\n" );
							
						elseif _erract_actions[1+(__acts )] == 6 
							print( "eof_middle\n" );
							
						elseif _erract_actions[1+(__acts )] == 7 
							print( "eof_out\n" );
							
						end
						__nacts -= 1
						__acts += 1
						
					end
					
				end
				
			end
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = (cs<<1)
				_inds = _erract_index_offsets[1+(cs)]
				if (data[1+(p )])<= 111 && (data[1+(p )])>= 10 
					_ic = convert(Int, _erract_char_class[1+(convert(Int, (data[1+(p )]) )- 10)] );
					if _ic <= convert(Int, _erract_trans_keys[1+(_keys+1 )] )&& _ic >= convert(Int, _erract_trans_keys[1+(_keys )] )
						_trans = convert(UInt, _erract_indices[1+(_inds + convert(Int, (_ic - convert(Int, _erract_trans_keys[1+(_keys )] )) ))] )
						
					else
						_trans = convert(UInt, _erract_index_defaults[1+(cs)] )
						
					end
					
				else
					_trans = convert(UInt, _erract_index_defaults[1+(cs)] )
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _erract_cond_targs[1+(_trans)] )
				if _erract_cond_actions[1+(_trans)]!= 0 
					_acts = _erract_cond_actions[1+(_trans)]
					_nacts = convert(UInt, _erract_actions[1+(_acts )] )
					_acts += 1
					while _nacts > 0 
						if _erract_actions[1+(_acts )] == 0 
							print( "err_start\n" );
							
						elseif _erract_actions[1+(_acts )] == 1 
							print( "err_all\n" );
							
						elseif _erract_actions[1+(_acts )] == 2 
							print( "err_middle\n" );
							
						elseif _erract_actions[1+(_acts )] == 3 
							print( "err_out\n" );
							
						end
						_nacts -= 1
						_acts += 1
						
					end
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= erract_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "" );
m( "h" );
m( "x" );
m( "he" );
m( "hx" );
m( "hel" );
m( "hex" );
m( "hell" );
m( "helx" );
m( "hello" );
m( "hellx" );
m( "hello\n" );
m( "hellox" );
