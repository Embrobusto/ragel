class gotocallret3_java
{
	char comm ;
	int top ;
	int stack [] = new int[32];
	
	
	
	
	
	private static byte  _gotocallret_key_offsets [] = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 ,  };
	private static char  _gotocallret_trans_keys [] = { 32, 10, 10, 10, 65, 90, 97, 122, 48, 57, 48, 57, 97, 122, 65, 90, 97, 122, 48, 57, 0,  };
	private static byte  _gotocallret_single_lengths [] = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_range_lengths [] = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 ,  };
	private static byte  _gotocallret_index_offsets [] = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 ,  };
	private static byte  _gotocallret_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _gotocallret_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 ,  };
	private static byte  _gotocallret_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _gotocallret_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_cond_targs [] = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 ,  };
	private static byte  _gotocallret_cond_actions [] = { 2, 1, 3, 1, 6, 5, 7, 0, 0, 0, 8, 0, 8, 9, 9, 1, 0, 0, 0, 8, 0, 8, 0 ,  };
	private static byte  _gotocallret_eof_actions [] = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 ,  };
	private static byte  _gotocallret_nfa_targs [] = { 0, 0 ,  };
	private static byte  _gotocallret_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _gotocallret_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _gotocallret_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  gotocallret_start  = 7;
	private static int  gotocallret_first_final  = 7;
	private static int  gotocallret_error  = 0;
	private static int  gotocallret_en_garble_line  = 3;
	private static int  gotocallret_en_alp_comm  = 5;
	private static int  gotocallret_en_dig_comm  = 6;
	private static int  gotocallret_en_main  = 7;
	int cs;
	
	void init()
	{
		{
			cs = (int)gotocallret_start;
			top = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = _gotocallret_key_offsets[cs] ;
					_trans = (int )_gotocallret_index_offsets[cs];
					_klen = (int)_gotocallret_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _gotocallret_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _gotocallret_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_gotocallret_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _gotocallret_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _gotocallret_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _gotocallret_trans_offsets[_trans] ;
					_klen = (int)_gotocallret_trans_lengths[_trans];
					_cond = (int )_gotocallret_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_gotocallret_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_gotocallret_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_gotocallret_cond_targs[_cond];
					if ( _gotocallret_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					switch ( _gotocallret_cond_actions[_cond]  ) {
						case 5 :
						{
							System.out.print( "error: garbling line\n" );
							
						}
						
						break;
						case 7 :
						{
							{
								cs = 7;
								
							}
							
						}
						
						break;
						case 8 :
						{
							{
								p = p - 1;
								
							}
							{
								top-= 1;
								cs = stack[top];
								
							}
							
						}
						
						break;
						case 9 :
						{
							comm = (( data[p ]));
							
						}
						
						break;
						case 3 :
						{
							System.out.print( "correct command\n" );
							
						}
						
						break;
						case 1 :
						{
							{
								p = p - 1;
								
							}
							{
								cs = 3;
								
							}
							
						}
						
						break;
						case 6 :
						{
							System.out.print( "error: garbling line\n" );
							
						}
						{
							{
								cs = 7;
								
							}
							
						}
						
						break;
						case 2 :
						{
							if ( comm >= 97 )
							{
								{
									stack[top] = cs;
									top += 1;
									cs = 5;
									
								}
							} 
							else {
								{
									stack[top] = cs;
									top += 1;
									cs = 6;
									
								}
							}
							
						}
						{
							System.out.print( "prints\n" );
							
						}
						
						break;
						
					}
					
					case 4:
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					if ( p == eof  )
					{
						switch ( _gotocallret_eof_actions[cs]  ) {
							case 4 :
							{
								System.out.print( "error: failed to recover\n" );
								
							}
							
							break;
							case 8 :
							{
								{
									p = p - 1;
									
								}
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									p = p - 1;
									
								}
								{
									cs = 3;
									
								}
								
							}
							
							break;
							
						}
						
					}
					
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= gotocallret_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"lkajsdf\n",
		"2134\n",
		"(\n",
		"\n",
		"*234234()0909 092 -234aslkf09`1 11\n",
		"1\n",
		"909\n",
		"1 a\n",
		"11 1\n",
		"a 1\n",
		"aa a\n",
		"1 1\n",
		"1 123456\n",
		"a a\n",
		"a abcdef\n",
		"h",
		"a aa1",
	};
	
	static final int inplen = 17;
	
	public static void main (String[] args)
	{
		gotocallret3_java machine = new gotocallret3_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
