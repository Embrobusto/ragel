using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int pos;
		int line;
		
		
		
		
		static readonly sbyte  []_clang_actions = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 2, 2, 1, 0, 2, 3, 1, 2, 3, 2, 2, 4, 1, 2, 4, 2, 2, 5, 1, 2, 5, 2, 2, 6, 1, 2, 6, 2, 2, 7, 1, 2, 7, 2, 2, 8, 1, 2, 8, 2, 3, 3, 1, 0, 3, 4, 1, 0, 3, 5, 1, 0, 3, 6, 1, 0, 3, 7, 1, 0, 3, 8, 1, 0, 0,  };
		static readonly char  []_clang_trans_keys = { '\u0001', '\u0000', '\u0000', '\u000d', '\u0000', '\u000d', '\u0000', '\u000d', '\u0000', '\u000d', '\u0000', '\u000d', '\u0000', '\u000d', '\u0008', '\u0009', '\u0008', '\u000a', '\u0000', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0001', '\u000d', '\u0000',  };
		static readonly sbyte  []_clang_char_class = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 4, 4, 11, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly short  []_clang_index_offsets = { 0, 0, 14, 28, 42, 56, 70, 84, 86, 89, 103, 116, 129, 142, 155, 168, 181, 194, 207, 0,  };
		static readonly sbyte  []_clang_indices = { 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 6, 5, 5, 5, 2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 8, 9, 10, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 8, 8, 8, 8, 11, 8, 8, 8, 8, 8, 8, 12, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 15, 15, 15, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 16, 17, 16, 18, 16, 19, 20, 21, 22, 22, 16, 22, 24, 25, 26, 25, 27, 25, 28, 29, 30, 31, 31, 25, 31, 33, 34, 35, 34, 36, 34, 37, 38, 39, 40, 40, 34, 40, 24, 8, 26, 25, 27, 25, 12, 29, 30, 31, 31, 25, 31, 42, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 50, 52, 53, 54, 53, 55, 53, 56, 14, 14, 57, 57, 53, 57, 59, 60, 61, 60, 62, 60, 63, 64, 64, 64, 64, 60, 64, 42, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 49, 66, 67, 68, 67, 69, 67, 70, 71, 71, 71, 72, 67, 72, 0,  };
		static readonly sbyte  []_clang_index_defaults = { 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 23, 32, 23, 41, 51, 58, 41, 65, 0,  };
		static readonly sbyte  []_clang_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_clang_cond_targs = { 1, 1, 12, 9, 0, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0,  };
		static readonly sbyte  []_clang_cond_actions = { 1, 19, 0, 0, 0, 1, 19, 0, 0, 5, 0, 0, 0, 5, 1, 22, 22, 3, 3, 22, 22, 22, 22, 17, 58, 81, 55, 55, 81, 81, 81, 81, 9, 34, 65, 31, 31, 65, 65, 65, 65, 13, 46, 73, 43, 43, 1, 73, 1, 73, 0, 11, 40, 69, 37, 37, 69, 69, 7, 28, 61, 25, 25, 61, 1, 15, 52, 77, 49, 49, 77, 1, 77, 0,  };
		static readonly sbyte  []_clang_eof_actions = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 17, 13, 11, 7, 13, 15, 0,  };
		static readonly sbyte  []_clang_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_clang_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_clang_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_clang_nfa_pop_trans = { 0, 0,  };
		static readonly int  clang_start  = 10;
		static readonly int  clang_first_final  = 10;
		static readonly int  clang_error  = 0;
		static readonly int  clang_en_main  = 10;
		int cs;
		
		void init()
		{
			pos = 0;
			line = 1;
			
			{
				cs = (int)clang_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				int _acts;
				uint _nacts;
				int _keys;
				int _inds;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _have == 0 )
							{
								int __acts;
								uint __nacts;
								__acts = _clang_eof_actions[cs] ;
								__nacts = (uint )_clang_actions[__acts ];
								__acts += 1;
								while ( __nacts > 0 )
								{
									switch ( _clang_actions[__acts ] ) {
										case 3:
										{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 4:
										{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 5:
										{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 6:
										{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 7:
										{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 8:
										{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										
									}
									__nacts -= 1;
									__acts += 1;
								}
								
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							_keys = (cs<<1) ;
							_inds = _clang_index_offsets[cs] ;
							if ( ( data[p ]) <= 255 )
							{
								int _ic = (int)_clang_char_class[(int)( data[p ]) - 0];
								if ( _ic <= (int)_clang_trans_keys[_keys+1]&& _ic >= (int)_clang_trans_keys[_keys ] )
								_trans = (uint )_clang_indices[_inds + (int)( _ic - (int)_clang_trans_keys[_keys ])  ];
								
								else
								_trans = (uint )_clang_index_defaults[cs];
								
							}
							
							else
							{
								_trans = (uint )_clang_index_defaults[cs];
							}
							
							
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_clang_cond_targs[_trans];
							if ( _clang_cond_actions[_trans] != 0 )
							{
								_acts = _clang_cond_actions[_trans] ;
								_nacts = (uint )_clang_actions[_acts ];
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( _clang_actions[_acts ] ) {
										case 0:
										{buffer[blen++] = (( data[p ]));
										}
										
										break;
										case 1:
										{blen = 0;
										}
										
										break;
										case 2:
										{line = line + 1;
										}
										
										break;
										case 3:
										{Console.Write( "ident(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 4:
										{Console.Write( "literal(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 5:
										{Console.Write( "float(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 6:
										{Console.Write( "int(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 7:
										{Console.Write( "hex(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										case 8:
										{Console.Write( "symbol(" );Console.Write( line );Console.Write( "," );Console.Write( blen );Console.Write( "): " );Console.Write( new String( buffer, 0, blen )
											);Console.Write( "\n" );}
										
										break;
										
									}
									_nacts -= 1;
									_acts += 1;
								}
								
							}
							
							
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= clang_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
			"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
		};
		
		
		static readonly int inplen = 2;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
