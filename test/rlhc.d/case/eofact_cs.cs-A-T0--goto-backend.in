host( "working/eofact_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			
			
			
			
			
			
		}@
		array s8 _eofact_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 2, 0, 2, 0 };
		
		array s8 _eofact_key_offsets( 0, 11 ) = { 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 0 };
		
		array char _eofact_trans_keys( 0, 116 ) = { c(104), c(116), c(101), c(108), c(108), c(111), c(104), c(101), c(114), c(101), c(10), c(0) };
		
		array s8 _eofact_single_lengths( 0, 2 ) = { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 };
		
		array s8 _eofact_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _eofact_index_offsets( 0, 22 ) = { 0, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22, 0 };
		
		array s8 _eofact_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _eofact_trans_offsets( 0, 22 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 };
		
		array s8 _eofact_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _eofact_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _eofact_cond_targs( 0, 12 ) = { 2, 6, 0, 3, 0, 4, 0, 5, 0, 10, 0, 7, 0, 8, 0, 9, 0, 12, 0, 11, 0, 0, 0, 0 };
		
		array s8 _eofact_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _eofact_eof_actions( 0, 9 ) = { 0, 9, 1, 1, 1, 1, 5, 5, 5, 5, 3, 0, 7, 0 };
		
		array s8 _eofact_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _eofact_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _eofact_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _eofact_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int eofact_start = 1;
		value int eofact_first_final = 10;
		value int eofact_error = 0;
		
		value int eofact_en_main = 1;
		
		host( "working/eofact_cs.rl", 33 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)eofact_start;
			}
			host( "working/eofact_cs.rl", 38 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _klen;
				uint _trans = 0;
				uint _cond = 0;
				index char _keys;
				index s8 _ckeys;
				int _cpc;
				entry {
					
					if ( p == pe )
					goto _test_eof;
					if ( cs == 0 )
					goto _out;
					label _resume {
						_keys = offset( _eofact_trans_keys, _eofact_key_offsets[cs] );
						_trans = cast(uint)_eofact_index_offsets[cs];
						
						_klen = cast(int)_eofact_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _eofact_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _eofact_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									goto _match;
								}
							}
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
						
						_klen = cast(int)_eofact_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _eofact_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _eofact_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									goto _match;
								}
							}
							_trans += cast(uint)_klen;
						}
						
					}
					label _match {
						_ckeys = offset( _eofact_cond_keys, _eofact_trans_offsets[_trans] );
						_klen = cast(int)_eofact_trans_lengths[_trans];
						_cond = cast(uint)_eofact_trans_offsets[_trans];
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _eofact_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _eofact_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									goto _match_cond;
								}
							}
							cs = 0;
							goto _again;
						}
					}
					label _match_cond {
						cs = cast(int)_eofact_cond_targs[_cond];
						
					}
					label _again {
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
						if ( p == eof )
						{
							index s8 __acts;
							uint __nacts;
							__acts = offset( _eofact_actions, _eofact_eof_actions[cs] );
							__nacts = cast(uint)deref( _eofact_actions, __acts );
							__acts += 1;
							while ( __nacts > 0 ) {
								switch ( deref( _eofact_actions, __acts ) ) {
									case 0 {
										host( "working/eofact_cs.rl", 18 ) ${Console.Write( "a1\n" );}$
									}
									case 1 {
										host( "working/eofact_cs.rl", 19 ) ${Console.Write( "a2\n" );}$
									}
									case 2 {
										host( "working/eofact_cs.rl", 20 ) ${Console.Write( "a3\n" );}$
									}
									case 3 {
										host( "working/eofact_cs.rl", 21 ) ${Console.Write( "a4\n" );}$
									}
								}
								__nacts -= 1;
								__acts += 1;
							}
						}
						
					}
					label _out { {}
					}
				}
			}
			host( "working/eofact_cs.rl", 49 ) @{
			}
			
			void finish( )
			{
				if ( cs >= eofact_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"",
				"h",
				"hell",
				"hello",
				"hello\n",
				"t",
				"ther",
				"there",
				"friend",
			};
			
			
			static readonly int inplen = 9;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@