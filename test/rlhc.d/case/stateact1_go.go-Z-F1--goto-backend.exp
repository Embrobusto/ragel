package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var _state_act_trans_keys [] byte  = [] byte  { 1, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0 }
var _state_act_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0  }
var _state_act_index_offsets [] int8  = [] int8  { 0, 0, 1, 2, 3, 4, 0  }
var _state_act_indicies [] int8  = [] int8  { 0, 2, 3, 3, 3, 0  }
var _state_act_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 0  }
var _state_act_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, 0  }
var _state_act_cond_targs [] int8  = [] int8  { 2, 0, 5, 1, 0  }
var _state_act_cond_actions [] int8  = [] int8  { 0, 0, 3, 0, 0  }
var _state_act_to_state_actions [] int8  = [] int8  { 0, 0, 1, 4, 6, 4, 0  }
var _state_act_from_state_actions [] int8  = [] int8  { 0, 0, 2, 5, 7, 5, 0  }
var _state_act_nfa_targs [] int8  = [] int8  { 0, 0  }
var _state_act_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0  }
var _state_act_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _state_act_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var state_act_start  int  = 4
var state_act_first_final  int  = 4
var state_act_error  int  = 0
var state_act_en_main  int  = 4
var state_act_en_main_line_again  int  = 3
func prepare() {

	{
		cs = int(state_act_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  int   = 0
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		switch _state_act_from_state_actions[cs]  {
			case 5 :
			{fmt.Print( "b2\n" );}
			
			break;
			case 2 :
			{fmt.Print( "c2\n" );}
			
			break;
			case 7 :
			{fmt.Print( "a2\n" );}
			{fmt.Print( "b2\n" );}
			
			break;
			
		}
		_keys = int((cs<<1) );
		_inds = int(_state_act_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 105 && ( data[p ]) >= 10 :
			{
				var  _ic  int   = int(_state_act_char_class[int(( data[p ]) )- 10])
				switch {
					case _ic <= int(_state_act_trans_keys[_keys+1 ])&& _ic >= int(_state_act_trans_keys[_keys ]):
					_trans = int(_state_act_indicies[_inds + int(( _ic - int(_state_act_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_state_act_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_state_act_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_state_act_cond_targs[_trans]);
		if _state_act_cond_actions[_trans] == 0  {
			goto _again;
			
			
		}
		switch _state_act_cond_actions[_trans]  {
			case 3 :
			{{cs = 3;
				}}
			
			break;
			
		}
		
		_again :
		switch _state_act_to_state_actions[cs]  {
			case 4 :
			{fmt.Print( "b1\n" );}
			
			break;
			case 1 :
			{fmt.Print( "c1\n" );}
			
			break;
			case 6 :
			{fmt.Print( "a1\n" );}
			{fmt.Print( "b1\n" );}
			
			break;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		p+= 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= state_act_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"hi\nhi\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
