import crack.io cout;
import crack.lang Buffer;

int i;
int c;





const array[int16 ] _foo_actions = [ 0, 1, 0, 1, 1, 0 ,  ];
const array[byte ] _foo_trans_keys = [ 1, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0,  ];
const array[int16 ] _foo_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 ,  ];
const array[int16 ] _foo_index_offsets = [ 0, 0, 1, 2, 5, 0 ,  ];
const array[int16 ] _foo_indicies = [ 0, 2, 3, 1, 4, 0 ,  ];
const array[int16 ] _foo_index_defaults = [ 0, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _foo_trans_cond_spaces = [ -1, -1, 0, 0, 0, 0 ,  ];
const array[int16 ] _foo_trans_offsets = [ 0, 1, 2, 4, 6, 0 ,  ];
const array[int16 ] _foo_cond_targs = [ 2, 0, 3, 2, 4, 0, 0, 3, 0 ,  ];
const array[int16 ] _foo_cond_actions = [ 3, 0, 3, 1, 0, 0, 0, 1, 0 ,  ];
const array[int16 ] _foo_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _foo_nfa_offsets = [ 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _foo_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _foo_nfa_pop_trans = [ 0, 0 ,  ];
const int  foo_start  = 1;
const int  foo_first_final  = 4;
const int  foo_error  = 0;
const int  foo_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( foo_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		uint32 _cond = 0;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _inds = 0;
		int _cpc;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _foo_index_offsets[cs];
					if ( (data[p ])<= 57 && (data[p ])>= 10  )
					{
						int _ic = int ( _foo_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _foo_trans_keys[_keys+1 ] )&& _ic >= int ( _foo_trans_keys[_keys ] ) )
						_trans = uint32  ( _foo_indicies[_inds + int ( (_ic - int ( _foo_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _foo_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _foo_index_defaults[cs] );
						
					}
					
					_cond = uint32  ( _foo_trans_offsets[_trans] );
					_cpc = 0;
					if ( _foo_trans_cond_spaces[_trans] == 0  ) {
						if ( (i > 0) )
						_cpc += 1;
						
						
					}
					;
					_cond += uint32  ( _cpc );
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _foo_cond_targs[_cond] );
					if ( _foo_cond_actions[_cond]!= 0  )
					{
						_acts = _foo_cond_actions[_cond];
						_nacts = uint32  ( _foo_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _foo_actions[_acts ] == 0  ) {
								if ( 1 ) {
									i = i - 1;
									c = ( int ( ((data[p ])) ) ) 
									;
									cout.format( "item: " );
									cout.format( c );
									cout.format( "\n" );
									
								}
								
							}
							else if ( _foo_actions[_acts ] == 1  ) {
								if ( 1 ) {
									i = ( int ( ((data[p ])) - 48 ) ) 
									;
									cout.format( "count: " );
									cout.format( i );
									cout.format( "\n" );
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= foo_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "00\n" );
	m( "019\n" );
	m( "190\n" );
	m( "1719\n" );
	m( "1040000\n" );
	m( "104000a\n" );
	m( "104000\n" );
}

main();
