class scan4_java
{
	int
	ts ;
	int
	te ;
	int act ;
	int token ;
	
	
	
	
	
	private static byte  _scanner_key_offsets [] = { 0, 3, 5, 0 ,  };
	private static char  _scanner_trans_keys [] = { 99, 97, 98, 97, 98, 99, 97, 98, 0,  };
	private static byte  _scanner_single_lengths [] = { 1, 2, 1, 0 ,  };
	private static byte  _scanner_range_lengths [] = { 1, 0, 1, 0 ,  };
	private static byte  _scanner_index_offsets [] = { 0, 3, 6, 0 ,  };
	private static byte  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 ,  };
	private static byte  _scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_cond_targs [] = { 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0 ,  };
	private static byte  _scanner_cond_actions [] = { 2, 0, 1, 6, 7, 5, 2, 0, 1, 1, 1, 0 ,  };
	private static byte  _scanner_to_state_actions [] = { 0, 3, 0, 0 ,  };
	private static byte  _scanner_from_state_actions [] = { 0, 4, 0, 0 ,  };
	private static byte  _scanner_eof_trans_indexed [] = { 2, 0, 2, 0 ,  };
	private static byte  _scanner_eof_trans_direct [] = { 10, 0, 11, 0 ,  };
	private static byte  _scanner_nfa_targs [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_offsets [] = { 0, 0, 0, 0 ,  };
	private static byte  _scanner_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  scanner_start  = 1;
	private static int  scanner_first_final  = 1;
	private static int  scanner_error  = -1;
	private static int  scanner_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)scanner_start;
			ts = 0;
			te = 0;
			act = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			while ( _cont == 1  )
			{
				_have = 0;
				if ( p == pe  )
				{
					if ( p == eof  )
					{
						if ( _scanner_eof_trans_direct[cs] > 0  )
						{
							_trans = (int )_scanner_eof_trans_direct[cs] - 1;
							_cond = (int )_scanner_trans_offsets[_trans];
							_have = 1;
							
						}
						
						if ( _have == 0  )
						{
						
						}
						
						
					}
					
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						switch ( _scanner_from_state_actions[cs]  ) {
							case 4 :
							{
								{
									ts = p;
									
								}
								
							}
							
							break;
							
						}
						_keys = _scanner_key_offsets[cs] ;
						_trans = (int )_scanner_index_offsets[cs];
						_have = 0;
						_klen = (int)_scanner_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _scanner_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_scanner_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _scanner_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _scanner_trans_offsets[_trans] ;
						_klen = (int)_scanner_trans_lengths[_trans];
						_cond = (int )_scanner_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_scanner_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_scanner_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = -1;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_scanner_cond_targs[_cond];
						switch ( _scanner_cond_actions[_cond]  ) {
							case 2 :
							{
								{
									te = p+1;
									{
										System.out.print( "pat2\n" );
										
									}
									
								}
								
							}
							
							break;
							case 5 :
							{
								{
									te = p+1;
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									switch ( act  ) {
										case 1 :
										p = ((te))-1;
										{
											System.out.print( "pat1\n" );
											
										}
										
										break;
										default:
										p = ((te))-1;
										
										break;
										
									}
									
								}
								
								
							}
							
							break;
							case 6 :
							{
								{
									te = p+1;
									
								}
								
							}
							{
								{
									act = 1;
									
								}
								
							}
							
							break;
							case 7 :
							{
								{
									te = p+1;
									
								}
								
							}
							{
								{
									act = 3;
									
								}
								
							}
							
							break;
							
						}
						switch ( _scanner_to_state_actions[cs]  ) {
							case 3 :
							{
								{
									ts = 0;
									
								}
								
							}
							
							break;
							
						}
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"ba a",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		scan4_java machine = new scan4_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
