host( "working/erract2_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	
	
	
	
	
	
	
}@
array s8 _erract_key_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };

array u8 _erract_trans_keys( 0, 111 ) = { 104, 101, 108, 108, 111, 10, 0 };

array s8 _erract_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0, 0 };

array s8 _erract_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_index_offsets( 0, 12 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 0 };

array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract_trans_offsets( 0, 12 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 };

array s8 _erract_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _erract_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_cond_targs( 0, 7 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 0, 0 };

array s8 _erract_cond_actions( 0, 6 ) = { 0, 2, 0, 4, 0, 4, 0, 4, 0, 4, 0, 6, 0, 0 };

array s8 _erract_eof_actions( 0, 5 ) = { 0, 1, 3, 3, 3, 3, 5, 0, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 1;
value int erract_first_final = 7;
value int erract_error = 0;

value int erract_en_main = 1;

host( "working/erract2_rust.rl", 39 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)erract_start;
	}
	host( "working/erract2_rust.rl", 50 ) @{
	}@
	{
		int _klen;
		index u8 _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _erract_eof_actions[cs] ) {
							case 1 {
								host( "working/erract2_rust.rl", 12 ) ${print!( "{}", "err_start\n" );
								}$
								host( "working/erract2_rust.rl", 21 ) ${print!( "{}", "eof_start\n" );
								}$
								host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
								}$
								host( "working/erract2_rust.rl", 23 ) ${print!( "{}", "eof_all\n" );
								}$
							}
							case 3 {
								host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
								}$
								host( "working/erract2_rust.rl", 16 ) ${print!( "{}", "err_middle\n" );
								}$
								host( "working/erract2_rust.rl", 23 ) ${print!( "{}", "eof_all\n" );
								}$
								host( "working/erract2_rust.rl", 25 ) ${print!( "{}", "eof_middle\n" );
								}$
							}
							case 5 {
								host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
								}$
								host( "working/erract2_rust.rl", 18 ) ${print!( "{}", "err_out\n" );
								}$
								host( "working/erract2_rust.rl", 23 ) ${print!( "{}", "eof_all\n" );
								}$
								host( "working/erract2_rust.rl", 27 ) ${print!( "{}", "eof_out\n" );
								}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _erract_trans_keys, _erract_key_offsets[cs] );
					_trans = cast(uint)_erract_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_erract_single_lengths[cs];
					if ( _klen > 0 ) {
						index u8 _lower;
						index u8 _mid;
						index u8 _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_erract_range_lengths[cs];
						if ( _klen > 0 ) {
							index u8 _lower;
							index u8 _mid;
							index u8 _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _erract_cond_keys, _erract_trans_offsets[_trans] );
					_klen = cast(int)_erract_trans_lengths[_trans];
					_cond = cast(uint)_erract_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _erract_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _erract_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_erract_cond_targs[_cond];
					
					switch ( _erract_cond_actions[_cond] ) {
						case 2 {
							host( "working/erract2_rust.rl", 12 ) ${print!( "{}", "err_start\n" );
							}$
							host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
							}$
						}
						case 4 {
							host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
							}$
							host( "working/erract2_rust.rl", 16 ) ${print!( "{}", "err_middle\n" );
							}$
						}
						case 6 {
							host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
							}$
							host( "working/erract2_rust.rl", 18 ) ${print!( "{}", "err_out\n" );
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/erract2_rust.rl", 51 ) @{
		
		if ( cs >= erract_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "".to_string() ); }
		unsafe { m( "h".to_string() ); }
		unsafe { m( "x".to_string() ); }
		unsafe { m( "he".to_string() ); }
		unsafe { m( "hx".to_string() ); }
		unsafe { m( "hel".to_string() ); }
		unsafe { m( "hex".to_string() ); }
		unsafe { m( "hell".to_string() ); }
		unsafe { m( "helx".to_string() ); }
		unsafe { m( "hello".to_string() ); }
		unsafe { m( "hellx".to_string() ); }
		unsafe { m( "hello\n".to_string() ); }
		unsafe { m( "hellox".to_string() ); }
	}
	
}@