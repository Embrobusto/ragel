package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var _eofact_actions [] int8  = [] int8  { 0, 1, 0, 1, 1, 1, 2, 1, 3, 2, 0, 2, 0  }
var _eofact_trans_keys [] byte  = [] byte  { 1, 0, 3, 7, 2, 2, 4, 4, 4, 4, 5, 5, 3, 3, 2, 2, 6, 6, 2, 2, 0, 0, 1, 0, 1, 0, 0 }
var _eofact_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0  }
var _eofact_index_offsets [] int8  = [] int8  { 0, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 0  }
var _eofact_indices [] int8  = [] int8  { 0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0  }
var _eofact_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _eofact_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _eofact_cond_targs [] int8  = [] int8  { 2, 0, 6, 3, 4, 5, 10, 7, 8, 9, 12, 11, 0  }
var _eofact_cond_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_eof_actions [] int8  = [] int8  { 0, 9, 1, 1, 1, 1, 5, 5, 5, 5, 3, 0, 7, 0  }
var _eofact_nfa_targs [] int8  = [] int8  { 0, 0  }
var _eofact_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _eofact_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _eofact_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var eofact_start  int  = 1
var eofact_first_final  int  = 10
var eofact_error  int  = 0
var eofact_en_main  int  = 1
func prepare() {

	{
		cs = int(eofact_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _trans  int   = 0
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int((cs<<1) );
		_inds = int(_eofact_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 116 && ( data[p ]) >= 10 :
			{
				var  _ic  int   = int(_eofact_char_class[int(( data[p ]) )- 10])
				switch {
					case _ic <= int(_eofact_trans_keys[_keys+1 ])&& _ic >= int(_eofact_trans_keys[_keys ]):
					_trans = int(_eofact_indices[_inds + int(( _ic - int(_eofact_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_eofact_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_eofact_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_eofact_cond_targs[_trans]);
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				var  __acts int
				var  __nacts uint 
				__acts = int(_eofact_eof_actions[cs] );
				__nacts = uint(_eofact_actions[__acts ]);
				__acts += 1;
				for __nacts > 0  {
					{
						switch _eofact_actions[__acts ] {
							case 0 :
							{fmt.Print( "a1\n" );}
							
							break;
							case 1 :
							{fmt.Print( "a2\n" );}
							
							break;
							case 2 :
							{fmt.Print( "a3\n" );}
							
							break;
							case 3 :
							{fmt.Print( "a4\n" );}
							
							break;
							
						}
						__nacts -= 1;
						__acts += 1;
					}
					
				}
			}
			
			
		}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= eofact_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"",
	"h",
	"hell",
	"hello",
	"hello\n",
	"t",
	"ther",
	"there",
	"friend",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
