host( "working/range.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	struct range
	{
		int cs;
	};
	
	
	
}@
array char _range_trans_keys( 0, 2 ) = { 1, 0, 2, 2, 0, 0, 1, 0, 0 };

array s8 _range_char_class( 0, 2 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

array s8 _range_index_offsets( 0, 2 ) = { 0, 0, 1, 2, 0 };

array s8 _range_indices( 0, 2 ) = { 0, 2, 0 };

array s8 _range_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _range_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, 0 };

array s8 _range_cond_targs( 0, 3 ) = { 2, 0, 3, 0 };

array s8 _range_cond_actions( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _range_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _range_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _range_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _range_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int range_start = 1;
value int range_first_final = 3;
value int range_error = 0;

value int range_en_main = 1;

host( "working/range.rl", 21 ) @{
	
	void range_init( struct range *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)range_start;
	}
	host( "working/range.rl", 25 ) @{
	}
	
	void range_execute( struct range *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _range_trans_keys, (host( "-", 1 ) ={ fsm->cs}=<<1) );
					_inds = offset( _range_indices, _range_index_offsets[host( "-", 1 ) ={ fsm->cs}=] );
					
					if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_range_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _range_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _range_trans_keys, _keys ) )
						_trans = cast(uint)deref( _range_indices, _inds + cast(int)( _ic - cast(int)deref( _range_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_range_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					else {
						_trans = cast(uint)_range_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					
				}
				if ( _cont == 1 ) {
					host( "-", 1 ) ={ fsm->cs}= = cast(int)_range_cond_targs[_trans];
					
					if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/range.rl", 33 ) @{
	}
	
	int range_finish( struct range *fsm )
	{
		if ( fsm->cs == range_error )
		return -1;
		if ( fsm->cs >= range_first_final )
		return 1;
		return 0;
	}
	
	struct range fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		range_init( &fsm );
		range_execute( &fsm, buf, len );
		if ( range_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "a\n" );
		test( "z\n" );
		test( "g\n" );
		test( "no\n" );
		test( "1\n" );
		
		return 0;
	}
	
}@