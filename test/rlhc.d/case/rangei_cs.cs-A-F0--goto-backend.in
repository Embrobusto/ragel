host( "working/rangei_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			
			
			
			
			
		}@
		array char _rangei_trans_keys( 0, 5 ) = { c(1), c(0), c(1), c(2), c(1), c(2), c(0), c(3), c(1), c(5), c(1), c(4), c(0), c(5), c(1), c(0), c(0) };
		
		array s8 _rangei_char_class( 0, 5 ) = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 5, 5, 5, 0 };
		
		array s8 _rangei_index_offsets( 0, 23 ) = { 0, 0, 2, 4, 8, 13, 17, 23, 0 };
		
		array s8 _rangei_indicies( 0, 6 ) = { 0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 1, 4, 4, 5, 1, 5, 5, 6, 6, 6, 6, 6, 6, 0 };
		
		array s8 _rangei_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _rangei_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _rangei_cond_targs( 0, 7 ) = { 2, 0, 3, 4, 5, 6, 7, 0 };
		
		array s8 _rangei_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _rangei_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _rangei_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _rangei_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _rangei_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int rangei_start = 1;
		value int rangei_first_final = 7;
		value int rangei_error = 0;
		
		value int rangei_en_main = 1;
		
		host( "working/rangei_cs.rl", 29 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)rangei_start;
			}
			host( "working/rangei_cs.rl", 34 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _trans = 0;
				index char _keys;
				index s8 _inds;
				entry {
					
					if ( p == pe )
					goto _test_eof;
					if ( cs == 0 )
					goto _out;
					label _resume {
						_keys = offset( _rangei_trans_keys, (cs<<1) );
						_inds = offset( _rangei_indicies, _rangei_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 125 && ( deref( data, p )) >= 60 )
						{
							int _ic = cast(int)_rangei_char_class[cast(int)( deref( data, p )) - 60];
							if ( _ic <= cast(int)deref( _rangei_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _rangei_trans_keys, _keys ) )
							_trans = cast(int)deref( _rangei_indicies, _inds + cast(int)( _ic - cast(int)deref( _rangei_trans_keys, _keys ) )  ); 
							else
							_trans = cast(int)_rangei_index_defaults[cs];
						}
						else {
							_trans = cast(int)_rangei_index_defaults[cs];
						}
						
						goto _match_cond;
					}
					label _match_cond {
						cs = cast(int)_rangei_cond_targs[_trans];
						
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
					}
					label _out { {}
					}
				}
			}
			host( "working/rangei_cs.rl", 45 ) @{
			}
			
			void finish( )
			{
				if ( cs >= rangei_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"AaBbAa",
				"Aa`bAa",
				"AaB@@Aa",
				"AaBbMa",
				"AaBbma",
			};
			
			
			static readonly int inplen = 5;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@