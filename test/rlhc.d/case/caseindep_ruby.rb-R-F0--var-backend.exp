#
# @LANG: ruby
# @GENERATED: true
#







class << self
	attr_accessor :_indep_trans_keys 
	private :_indep_trans_keys, :_indep_trans_keys=
end
self._indep_trans_keys = [
1, 0, 2, 3, 9, 9, 8, 8, 10, 10, 10, 10, 11, 11, 0, 0, 5, 9, 4, 8, 6, 10, 6, 10, 7, 11, 1, 0, 0 , 
]

class << self
	attr_accessor :_indep_char_class 
	private :_indep_char_class, :_indep_char_class=
end
self._indep_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 1, 1, 1, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 1, 1, 1, 10, 1, 1, 11, 0 , 
]

class << self
	attr_accessor :_indep_index_offsets 
	private :_indep_index_offsets, :_indep_index_offsets=
end
self._indep_index_offsets = [
0, 0, 2, 3, 4, 5, 6, 7, 8, 13, 18, 23, 28, 33, 0 , 
]

class << self
	attr_accessor :_indep_indices 
	private :_indep_indices, :_indep_indices=
end
self._indep_indices = [
0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 9, 10, 1, 1, 1, 10, 11, 1, 1, 1, 11, 12, 1, 1, 1, 12, 7, 1, 1, 1, 7, 0 , 
]

class << self
	attr_accessor :_indep_index_defaults 
	private :_indep_index_defaults, :_indep_index_defaults=
end
self._indep_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_indep_trans_cond_spaces 
	private :_indep_trans_cond_spaces, :_indep_trans_cond_spaces=
end
self._indep_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_indep_cond_targs 
	private :_indep_cond_targs, :_indep_cond_targs=
end
self._indep_cond_targs = [
2, 0, 8, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 0 , 
]

class << self
	attr_accessor :_indep_cond_actions 
	private :_indep_cond_actions, :_indep_cond_actions=
end
self._indep_cond_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_indep_nfa_targs 
	private :_indep_nfa_targs, :_indep_nfa_targs=
end
self._indep_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_indep_nfa_offsets 
	private :_indep_nfa_offsets, :_indep_nfa_offsets=
end
self._indep_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_indep_nfa_push_actions 
	private :_indep_nfa_push_actions, :_indep_nfa_push_actions=
end
self._indep_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_indep_nfa_pop_trans 
	private :_indep_nfa_pop_trans, :_indep_nfa_pop_trans=
end
self._indep_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :indep_start 
end
self.indep_start  = 1;

class << self
	attr_accessor :indep_first_final 
end
self.indep_first_final  = 13;

class << self
	attr_accessor :indep_error 
end
self.indep_error  = 0;

class << self
	attr_accessor :indep_en_main 
end
self.indep_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = indep_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _indep_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 111 && ( data[p ].ord) >= 10  )
									begin
										_ic = _indep_char_class[( data[p ].ord) - 10];
										if ( _ic <= _indep_trans_keys[_keys+1 ]&& _ic >= _indep_trans_keys[_keys ] )
											_trans = _indep_indices[_inds + ( _ic - _indep_trans_keys[_keys ])  ];
											
											else
											_trans = _indep_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _indep_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _indep_cond_targs[_trans];
								if ( cs == 0  )
									_cont = 0;
									
								end
								if ( _cont == 1  )
									p += 1;
									
								end
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	if cs >= indep_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
	end
end

inp = [
"1hello\n",
"1HELLO\n",
"1HeLLo\n",
"2hello\n",
"2HELLO\n",
"2HeLLo\n",
"3hello\n",
"3HELLO\n",
"3HeLLo\n",
"4hello\n",
"4HELLO\n",
"4HeLLo\n",
"5hello\n",
"5HELLO\n",
"5HeLLo\n",
"6hello\n",
"6HELLO\n",
"6HeLLo\n",
]

inplen = 18

inp.each { |str| run_machine(str) }

