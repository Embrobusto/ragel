host( "working/erract7.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	
	
}@
array s8 _foo_actions( 0, 2 ) = { 0, 1, 0, 1, 1, 1, 2, 0 };

array char _foo_trans_keys( 0, 3 ) = { 1, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _foo_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 0 };

array s8 _foo_index_offsets( 0, 5 ) = { 0, 0, 1, 2, 3, 4, 5, 0 };

array s8 _foo_indicies( 0, 5 ) = { 1, 2, 3, 4, 5, 0 };

array s8 _foo_index_defaults( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _foo_cond_targs( 0, 6 ) = { 0, 2, 3, 4, 5, 6, 0 };

array s8 _foo_cond_actions( 0, 3 ) = { 3, 1, 1, 1, 1, 1, 0 };

array s8 _foo_to_state_actions( 0, 5 ) = { 0, 5, 5, 5, 5, 5, 5, 0 };

array s8 _foo_eof_actions( 0, 3 ) = { 0, 3, 3, 3, 3, 3, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 6;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/erract7.rl", 19 ) @{
	
	int main()
	{
		int cs;
		char *p = "hello", *pe = p + strlen(p);
		char *eof = pe;
	}@
	{
		cs = cast(int)foo_start;
	}
	
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _foo_actions, _foo_eof_actions[cs] );
						__nacts = cast(uint)deref( _foo_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _foo_actions, __acts ) ) {
								case 1 {
									host( "working/erract7.rl", 12 ) ${ printf("err: %c\n", *p); }$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _foo_trans_keys, (cs<<1) );
					_inds = offset( _foo_indicies, _foo_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 104 && ( deref( data, p )) >= 88 )
					{
						int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 88];
						if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
						_trans = cast(uint)deref( _foo_indicies, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_foo_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_foo_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_foo_cond_targs[_trans];
					
					if ( _foo_cond_actions[_trans] != 0 ) {
						_acts = offset( _foo_actions, _foo_cond_actions[_trans] );
						_nacts = cast(uint)deref( _foo_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _foo_actions, _acts ) )
							{
								case 0 {
									host( "working/erract7.rl", 11 ) ${ printf("char: %c\n", *p); }$
								}
								case 1 {
									host( "working/erract7.rl", 12 ) ${ printf("err: %c\n", *p); }$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					_acts = offset( _foo_actions, _foo_to_state_actions[cs] );
					_nacts = cast(uint)deref( _foo_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _foo_actions, _acts ) ) {
							case 2 {
								host( "working/erract7.rl", 13 ) ${ printf("to state: %c\n", *p); }$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/erract7.rl", 28 ) @{
		
		printf( "rest: %s\n", p );
		
		return 0;
	}
	
}@