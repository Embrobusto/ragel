(*
* @LANG: ocaml
*)

let id x = x
let fail fmt = Printf.ksprintf failwith fmt
let pr fmt = Printf.ksprintf print_endline fmt

let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
let case = ref 0
let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()

let _atoi_actions : int array = [|
0; 1; 0; 1; 1; 0 ; 
|]
let _atoi_trans_keys : int array = [|
1; 0; 2; 4; 4; 4; 0; 4; 1; 0; 0 ; 
|]
let _atoi_char_class : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 1; 3; 1; 1; 4; 4; 4; 4; 4; 4; 4; 4; 4; 4; 0 ; 
|]
let _atoi_index_offsets : int array = [|
0; 0; 3; 4; 9; 0 ; 
|]
let _atoi_indices : int array = [|
0; 2; 3; 3; 4; 1; 1; 1; 3; 0 ; 
|]
let _atoi_index_defaults : int array = [|
0; 1; 1; 1; 1; 0 ; 
|]
let _atoi_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; 0 ; 
|]
let _atoi_cond_targs : int array = [|
2; 0; 2; 3; 4; 0 ; 
|]
let _atoi_cond_actions : int array = [|
0; 0; 1; 3; 0; 0 ; 
|]
let _atoi_nfa_targs : int array = [|
0; 0 ; 
|]
let _atoi_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0 ; 
|]
let _atoi_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _atoi_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let atoi_start  : int  = 1
let atoi_first_final  : int  = 3
let atoi_error  : int  = 0
let atoi_en_main  : int  = 1
let fail fmt = Printf.ksprintf failwith fmt

let atoi data =
let cs = ref 0 in
let p = ref 0 in
let pe = ref (String.length data) in
let neg = ref false in
let res = ref 0 in

begin
	cs  := atoi_start;
	
end;
begin
	let _trans  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	let _acts : int ref = ref 0 in
	let _nacts : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _inds : int ref = ref 0 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						_keys  := ( cs.contents lsl 1 );
						_inds  := _atoi_index_offsets.(cs.contents);
						if ( Char.code data.[p.contents] )<= 57 && ( Char.code data.[p.contents] )>= 10  then
						begin
							begin
								let _ic  : int  ref = ref _atoi_char_class.(( Char.code data.[p.contents] )- 10) in
								if _ic.contents<= _atoi_trans_keys.( _keys.contents+1  )&& _ic.contents>= _atoi_trans_keys.( _keys.contents ) then
								begin
									_trans  := _atoi_indices.( _inds.contents+ ( _ic.contents- _atoi_trans_keys.( _keys.contents ) ) );
									
								end
								else
								begin
									_trans  := _atoi_index_defaults.(cs.contents);
									
								end
								;
							end;
							
						end
						else
						begin
							begin
								_trans  := _atoi_index_defaults.(cs.contents);
								
							end;
							
						end
						;
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _atoi_cond_targs.(_trans.contents);
						if _atoi_cond_actions.(_trans.contents)!= 0  then
						begin
							begin
								_acts  := _atoi_cond_actions.(_trans.contents);
								_nacts  := _atoi_actions.( _acts.contents );
								_acts  := _acts.contents + 1;
								while _nacts.contents> 0  do
								begin
									if _atoi_actions.( _acts.contents ) = 0  then
									begin
										begin
											neg := true; 
										end;
										
									end
									else if _atoi_actions.( _acts.contents ) = 1  then
									begin
										begin
											res := !res * 10 + ((( Char.code data.[p.contents] )) - Char.code '0'); 
										end;
										
									end
									;
									_nacts  := _nacts.contents - 1;
									_acts  := _acts.contents + 1;
									
								end;
								
								done;
								
							end;
							
						end
						;if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !neg then
res := (-1) * !res ;

print_int res.contents;
print_string "\n";

if !cs < atoi_first_final then
fail "atoi: cs %d < %d" !cs atoi_first_final;

!res 
;;

let () =
let t = test atoi in
t "7" 7;
t "666" 666;
t "-666" (-666);
t "+666" 666;
t "123456789" 123456789;
t "+123456789\n" 123456789;
error atoi "+ 1234567890";
()
;;

