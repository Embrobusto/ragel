host( "working/stateact1_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	
	
	
	
	
	
	
	
}@
array s8 _state_act_key_offsets( 0, 4 ) = { 0, 0, 1, 2, 3, 4, 0 };

array int _state_act_trans_keys( 0, 105 ) = { 105, 10, 104, 104, 104, 0 };

array s8 _state_act_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 0 };

array s8 _state_act_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_index_offsets( 0, 8 ) = { 0, 0, 2, 4, 6, 8, 0 };

array s8 _state_act_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _state_act_trans_offsets( 0, 9 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

array s8 _state_act_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _state_act_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_cond_targs( 0, 5 ) = { 2, 0, 5, 0, 1, 0, 1, 0, 1, 0, 0 };

array s8 _state_act_cond_actions( 0, 3 ) = { 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_to_state_actions( 0, 6 ) = { 0, 0, 1, 4, 6, 4, 0 };

array s8 _state_act_from_state_actions( 0, 7 ) = { 0, 0, 2, 5, 7, 5, 0 };

array s8 _state_act_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int state_act_start = 4;
value int state_act_first_final = 4;
value int state_act_error = 0;

value int state_act_en_main = 4;
value int state_act_en_main_line_again = 3;

host( "working/stateact1_ocaml.rl", 45 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
}@
{
	cs = cast(int)state_act_start;
}
host( "working/stateact1_ocaml.rl", 53 ) @{
}@
{
	int _klen;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	uint _trans;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				switch ( _state_act_from_state_actions[cs] ) {
					case 5 {
						host( "working/stateact1_ocaml.rl", 18 ) ${print_string( "b2\n" );
						}$
					}
					case 2 {
						host( "working/stateact1_ocaml.rl", 22 ) ${print_string( "c2\n" );
						}$
					}
					case 7 {
						host( "working/stateact1_ocaml.rl", 14 ) ${print_string( "a2\n" );
						}$
						host( "working/stateact1_ocaml.rl", 18 ) ${print_string( "b2\n" );
						}$
					}
				}
				
				_keys = offset( _state_act_trans_keys, _state_act_key_offsets[cs] );
				_trans = cast(uint)_state_act_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_state_act_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _state_act_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _state_act_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_state_act_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _state_act_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _state_act_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _state_act_cond_keys, _state_act_trans_offsets[_trans] );
				_klen = cast(int)_state_act_trans_lengths[_trans];
				_cond = cast(uint)_state_act_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _state_act_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _state_act_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_state_act_cond_targs[_cond];
				
				switch ( _state_act_cond_actions[_cond] ) {
					case 3 {
						host( "working/stateact1_ocaml.rl", 24 ) ${${cs = 3;}$}$
					}
				}
				
				switch ( _state_act_to_state_actions[cs] ) {
					case 4 {
						host( "working/stateact1_ocaml.rl", 16 ) ${print_string( "b1\n" );
						}$
					}
					case 1 {
						host( "working/stateact1_ocaml.rl", 20 ) ${print_string( "c1\n" );
						}$
					}
					case 6 {
						host( "working/stateact1_ocaml.rl", 12 ) ${print_string( "a1\n" );
						}$
						host( "working/stateact1_ocaml.rl", 16 ) ${print_string( "b1\n" );
						}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/stateact1_ocaml.rl", 54 ) @{
	if !cs >= state_act_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "hi\nhi\n";
	()
	;;
	
}@