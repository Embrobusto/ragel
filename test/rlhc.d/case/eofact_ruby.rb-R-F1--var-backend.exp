#
# @LANG: ruby
# @GENERATED: true
#








class << self
	attr_accessor :_eofact_trans_keys 
	private :_eofact_trans_keys, :_eofact_trans_keys=
end
self._eofact_trans_keys = [
1, 0, 3, 7, 2, 2, 4, 4, 4, 4, 5, 5, 3, 3, 2, 2, 6, 6, 2, 2, 0, 0, 1, 0, 1, 0, 0 , 
]

class << self
	attr_accessor :_eofact_char_class 
	private :_eofact_char_class, :_eofact_char_class=
end
self._eofact_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0 , 
]

class << self
	attr_accessor :_eofact_index_offsets 
	private :_eofact_index_offsets, :_eofact_index_offsets=
end
self._eofact_index_offsets = [
0, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 0 , 
]

class << self
	attr_accessor :_eofact_indices 
	private :_eofact_indices, :_eofact_indices=
end
self._eofact_indices = [
0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 , 
]

class << self
	attr_accessor :_eofact_index_defaults 
	private :_eofact_index_defaults, :_eofact_index_defaults=
end
self._eofact_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_eofact_trans_cond_spaces 
	private :_eofact_trans_cond_spaces, :_eofact_trans_cond_spaces=
end
self._eofact_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_eofact_cond_targs 
	private :_eofact_cond_targs, :_eofact_cond_targs=
end
self._eofact_cond_targs = [
2, 0, 6, 3, 4, 5, 10, 7, 8, 9, 12, 11, 0 , 
]

class << self
	attr_accessor :_eofact_cond_actions 
	private :_eofact_cond_actions, :_eofact_cond_actions=
end
self._eofact_cond_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_eofact_eof_actions 
	private :_eofact_eof_actions, :_eofact_eof_actions=
end
self._eofact_eof_actions = [
0, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 0, 5, 0 , 
]

class << self
	attr_accessor :_eofact_nfa_targs 
	private :_eofact_nfa_targs, :_eofact_nfa_targs=
end
self._eofact_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_eofact_nfa_offsets 
	private :_eofact_nfa_offsets, :_eofact_nfa_offsets=
end
self._eofact_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_eofact_nfa_push_actions 
	private :_eofact_nfa_push_actions, :_eofact_nfa_push_actions=
end
self._eofact_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_eofact_nfa_pop_trans 
	private :_eofact_nfa_pop_trans, :_eofact_nfa_pop_trans=
end
self._eofact_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :eofact_start 
end
self.eofact_start  = 1;

class << self
	attr_accessor :eofact_first_final 
end
self.eofact_first_final  = 10;

class << self
	attr_accessor :eofact_error 
end
self.eofact_error  = 0;

class << self
	attr_accessor :eofact_en_main 
end
self.eofact_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = eofact_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _have == 0  )
									begin
										case  _eofact_eof_actions[cs]  
										when -2 then
										begin
										end
										when 2  then
										begin
											begin
												print( "a1\n" );
												
											end
											
										end
										when 4  then
										begin
											begin
												print( "a2\n" );
												
											end
											
										end
										when 3  then
										begin
											begin
												print( "a3\n" );
												
											end
											
										end
										when 5  then
										begin
											begin
												print( "a4\n" );
												
											end
											
										end
										when 1  then
										begin
											begin
												print( "a1\n" );
												
											end
											begin
												print( "a3\n" );
												
											end
											
											
										end
									end
									
								end
								
							end
							
						end
						
					end
					if ( _have == 0  )
						_cont = 0;
						
					end
					
				end
				
			end
			if ( _cont == 1  )
				begin
					if ( _have == 0  )
						begin
							_keys = (cs<<1) ;
							_inds = _eofact_index_offsets[cs] ;
							if ( ( data[p ].ord) <= 116 && ( data[p ].ord) >= 10  )
								begin
									_ic = _eofact_char_class[( data[p ].ord) - 10];
									if ( _ic <= _eofact_trans_keys[_keys+1 ]&& _ic >= _eofact_trans_keys[_keys ] )
										_trans = _eofact_indices[_inds + ( _ic - _eofact_trans_keys[_keys ])  ];
										
										else
										_trans = _eofact_index_defaults[cs];
										
									end
									
								end
								
								else
								begin
									_trans = _eofact_index_defaults[cs];
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _eofact_cond_targs[_trans];
							if ( cs == 0  )
								_cont = 0;
								
							end
							if ( _cont == 1  )
								p += 1;
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end
if cs >= eofact_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"",
	"h",
	"hell",
	"hello",
	"hello\n",
	"t",
	"ther",
	"there",
	"friend",
	]
	
	inplen = 9
	
	inp.each { |str| run_machine(str) }
	
