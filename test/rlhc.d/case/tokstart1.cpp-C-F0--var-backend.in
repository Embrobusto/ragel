host( "working/tokstart1.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using namespace std;
	
	extern char buf[];
	
	struct Scanner
	{
		int cs, act;
		char *ts, *te;
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		void init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		int execute( char *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
	};
	
	
	
}@
array s8 _Scanner_actions( 0, 31 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 7, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 2, 4, 0, 2, 6, 1, 2, 7, 8, 2, 7, 9, 2, 7, 10, 2, 7, 11, 3, 4, 5, 0, 0 };

array char _Scanner_trans_keys( 0, 19 ) = { 1, 0, 0, 17, 1, 0, 0, 17, 1, 0, 7, 7, 6, 10, 9, 10, 9, 13, 5, 5, 5, 8, 0, 0, 2, 19, 2, 19, 7, 10, 9, 18, 9, 18, 5, 8, 7, 19, 7, 18, 15, 18, 15, 18, 15, 18, 9, 18, 15, 18, 7, 18, 9, 19, 3, 19, 1, 0, 1, 0, 0 };

array s8 _Scanner_char_class( 0, 19 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 2, 2, 5, 6, 2, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 2, 2, 2, 2, 2, 2, 2, 11, 11, 11, 11, 12, 13, 14, 14, 14, 14, 14, 15, 14, 14, 14, 14, 14, 14, 14, 14, 16, 14, 14, 14, 14, 14, 2, 17, 2, 2, 14, 2, 11, 11, 11, 11, 12, 13, 14, 14, 14, 14, 14, 18, 14, 14, 14, 14, 14, 14, 14, 14, 16, 14, 14, 19, 14, 14, 2, 2, 2, 2, 0 };

array s16 _Scanner_index_offsets( 0, 210 ) = { 0, 0, 18, 18, 36, 36, 37, 42, 44, 49, 50, 54, 55, 73, 91, 95, 105, 115, 119, 132, 144, 148, 152, 156, 166, 170, 182, 193, 210, 210, 0 };

array s8 _Scanner_indices( 0, 47 ) = { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 9, 0, 0, 10, 10, 10, 10, 12, 12, 12, 12, 12, 14, 14, 13, 13, 15, 17, 19, 1, 4, 19, 19, 20, 21, 22, 23, 24, 24, 24, 24, 25, 24, 19, 24, 24, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 28, 27, 29, 29, 29, 29, 30, 31, 32, 30, 32, 30, 30, 32, 10, 10, 30, 30, 32, 30, 32, 30, 30, 32, 33, 27, 27, 34, 29, 35, 36, 36, 35, 31, 35, 35, 37, 37, 35, 37, 38, 29, 39, 36, 36, 39, 31, 39, 39, 40, 40, 39, 40, 41, 41, 39, 41, 42, 42, 35, 42, 43, 43, 35, 43, 12, 12, 12, 12, 12, 44, 45, 45, 44, 45, 46, 46, 44, 46, 29, 35, 23, 23, 35, 31, 35, 35, 37, 37, 35, 37, 24, 24, 24, 24, 24, 24, 24, 24, 47, 24, 24, 1, 4, 47, 47, 47, 47, 24, 24, 24, 24, 24, 24, 24, 24, 47, 24, 24, 0 };

array s8 _Scanner_index_defaults( 0, 48 ) = { 0, 1, 1, 4, 4, 7, 0, 0, 11, 13, 13, 16, 18, 18, 27, 30, 30, 27, 35, 39, 39, 35, 35, 44, 44, 35, 47, 47, 48, 48, 0 };

array s8 _Scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _Scanner_cond_targs( 0, 29 ) = { 12, 1, 12, 2, 3, 12, 4, 12, 12, 7, 16, 12, 23, 9, 10, 28, 11, 29, 13, 12, 14, 17, 18, 25, 26, 27, 12, 12, 5, 15, 12, 6, 12, 12, 12, 12, 19, 21, 8, 12, 20, 12, 22, 12, 12, 24, 12, 12, 0, 0 };

array s8 _Scanner_cond_actions( 0, 66 ) = { 49, 0, 13, 0, 0, 11, 0, 47, 23, 0, 0, 45, 0, 0, 0, 5, 0, 7, 0, 25, 9, 0, 63, 63, 0, 57, 43, 41, 0, 60, 33, 0, 15, 27, 29, 35, 66, 0, 0, 37, 0, 19, 0, 17, 39, 0, 21, 31, 0, 0 };

array s8 _Scanner_to_state_actions( 0, 69 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 51, 1, 51, 69, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Scanner_from_state_actions( 0, 54 ) = { 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 54, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 };

array s8 _Scanner_eof_trans( 0, 48 ) = { 0, 1, 1, 1, 1, 8, 1, 1, 12, 0, 0, 0, 0, 27, 28, 31, 31, 28, 36, 40, 40, 36, 36, 45, 45, 36, 48, 48, 0, 0, 0 };

array s8 _Scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Scanner_start = 12;
value int Scanner_first_final = 12;
value int Scanner_error = 0;

value int Scanner_en_c_comm = 9;
value int Scanner_en_cxx_comm = 11;
value int Scanner_en_main = 12;

host( "working/tokstart1.rl", 99 ) @{
	
	void Scanner::init( )
	{
	}@
	{
		cs = cast(int)Scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/tokstart1.rl", 103 ) @{
	}
	
	int Scanner::execute( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
		
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _Scanner_eof_trans[cs] > 0 ) {
						_trans = cast(uint)_Scanner_eof_trans[cs] - 1;
						_have = 1;
					}
					if ( _have == 0 ) {
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_acts = offset( _Scanner_actions, _Scanner_from_state_actions[cs] );
					_nacts = cast(uint)deref( _Scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _Scanner_actions, _acts ) ) {
							case 1 {
								host( "working/tokstart1.rl", 45 ) ${
									cout << "from: fc = ";
									if ( ={( deref( data, p ))}= == '\'' )
									cout << (int)={( deref( data, p ))}=;
									else
									cout << ={( deref( data, p ))}=;
									cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
								}$
							}
							case 6 {
								host( "NONE", 1 ) ${${ts = p;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					_keys = offset( _Scanner_trans_keys, (cs<<1) );
					_inds = offset( _Scanner_indices, _Scanner_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_Scanner_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _Scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Scanner_trans_keys, _keys ) )
						_trans = cast(uint)deref( _Scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _Scanner_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_Scanner_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_Scanner_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_Scanner_cond_targs[_trans];
					
					if ( _Scanner_cond_actions[_trans] != 0 ) {
						_acts = offset( _Scanner_actions, _Scanner_cond_actions[_trans] );
						_nacts = cast(uint)deref( _Scanner_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _Scanner_actions, _acts ) )
							{
								case 2 {
									host( "working/tokstart1.rl", 54 ) ${ ${cs = 12;}$}$
								}
								case 3 {
									host( "working/tokstart1.rl", 55 ) ${ ${cs = 12;}$}$
								}
								case 7 {
									host( "NONE", 1 ) ${${te = p+1;}$}$
								}
								case 8 {
									host( "working/tokstart1.rl", 64 ) ${${act = 3;}$}$
								}
								case 9 {
									host( "working/tokstart1.rl", 71 ) ${${act = 4;}$}$
								}
								case 10 {
									host( "working/tokstart1.rl", 75 ) ${${act = 5;}$}$
								}
								case 11 {
									host( "working/tokstart1.rl", 78 ) ${${act = 6;}$}$
								}
								case 12 {
									host( "working/tokstart1.rl", 60 ) ${${te = p+1;}$}$
								}
								case 13 {
									host( "working/tokstart1.rl", 61 ) ${${te = p+1;}$}$
								}
								case 14 {
									host( "working/tokstart1.rl", 71 ) ${${te = p+1;}$}$
								}
								case 15 {
									host( "working/tokstart1.rl", 75 ) ${${te = p+1;}$}$
								}
								case 16 {
									host( "working/tokstart1.rl", 78 ) ${${te = p+1;}$}$
								}
								case 17 {
									host( "working/tokstart1.rl", 81 ) ${${te = p+1;}$}$
								}
								case 18 {
									host( "working/tokstart1.rl", 84 ) ${${te = p+1;}$}$
								}
								case 19 {
									host( "working/tokstart1.rl", 87 ) ${${te = p+1;}$}$
								}
								case 20 {
									host( "working/tokstart1.rl", 90 ) ${${te = p+1;host( "working/tokstart1.rl", 90 ) ${ ${cs = 9;}$}$}$}$
								}
								case 21 {
									host( "working/tokstart1.rl", 91 ) ${${te = p+1;host( "working/tokstart1.rl", 91 ) ${ ${cs = 11;}$}$}$}$
								}
								case 22 {
									host( "working/tokstart1.rl", 64 ) ${${te = p;p = p - 1;}$}$
								}
								case 23 {
									host( "working/tokstart1.rl", 71 ) ${${te = p;p = p - 1;}$}$
								}
								case 24 {
									host( "working/tokstart1.rl", 75 ) ${${te = p;p = p - 1;}$}$
								}
								case 25 {
									host( "working/tokstart1.rl", 78 ) ${${te = p;p = p - 1;}$}$
								}
								case 26 {
									host( "working/tokstart1.rl", 81 ) ${${te = p;p = p - 1;}$}$
								}
								case 27 {
									host( "working/tokstart1.rl", 87 ) ${${te = p;p = p - 1;}$}$
								}
								case 28 {
									host( "working/tokstart1.rl", 93 ) ${${te = p;p = p - 1;}$}$
								}
								case 29 {
									host( "working/tokstart1.rl", 75 ) ${${p = ((te))-1;
										}$}$
								}
								case 30 {
									host( "working/tokstart1.rl", 87 ) ${${p = ((te))-1;
										}$}$
								}
								case 31 {
									host( "NONE", 1 ) ${${switch( act ) {
												case 0 {
													host( "NONE", 1 ) ${${cs = 0;}$}$ }
												default {
													p = ((te))-1;
												}
											}}$
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					_acts = offset( _Scanner_actions, _Scanner_to_state_actions[cs] );
					_nacts = cast(uint)deref( _Scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _Scanner_actions, _acts ) ) {
							case 0 {
								host( "working/tokstart1.rl", 37 ) ${ 
									cout << "to:   fc = ";
									if ( ={( deref( data, p ))}= == '\'' )
									cout << (int)={( deref( data, p ))}=;
									else
									cout << ={( deref( data, p ))}=;
									cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
								}$
							}
							case 4 {
								host( "NONE", 1 ) ${${ts = nil;}$}$
							}
							case 5 {
								host( "NONE", 1 ) ${${act = 0;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/tokstart1.rl", 112 ) @{
		
		return 0;
	}
	
	int Scanner::finish( )
	{
		if ( cs == Scanner_error )
		return -1;
		if ( cs >= Scanner_first_final )
		return 1;
		return 0;
	}
	
	void test( )
	{
		int len = strlen( buf );
		Scanner scanner;
		
		scanner.init();
		scanner.execute( buf, len );
		if ( scanner.cs == Scanner_error ) {
			/* Machine failed before finding a token. */
			cout << "PARSE ERROR" << endl;
		}
		scanner.finish();
	}
	
	char buf[4096];
	
	int main()
	{
		strcpy( buf, 
		"a b 0.98 /*\n"
		"9 */'\\''//hi\n"
		"there\n"
		);
		test();
		return 0;
	}
	
}@