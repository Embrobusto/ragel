#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_clang_actions 
	private :_clang_actions, :_clang_actions=
end
self._clang_actions = [
0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 2, 2, 1, 0, 2, 3, 1, 2, 3, 2, 2, 4, 1, 2, 4, 2, 2, 5, 1, 2, 5, 2, 2, 6, 1, 2, 6, 2, 2, 7, 1, 2, 7, 2, 2, 8, 1, 2, 8, 2, 3, 3, 1, 0, 3, 4, 1, 0, 3, 5, 1, 0, 3, 6, 1, 0, 3, 7, 1, 0, 3, 8, 1, 0, 0 , 
]

class << self
	attr_accessor :_clang_trans_keys 
	private :_clang_trans_keys, :_clang_trans_keys=
end
self._clang_trans_keys = [
1, 0, 0, 12, 0, 12, 0, 0, 0, 2, 0, 7, 0, 0, 8, 9, 8, 10, 0, 0, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0 , 
]

class << self
	attr_accessor :_clang_char_class 
	private :_clang_char_class, :_clang_char_class=
end
self._clang_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 4, 4, 11, 4, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 4, 4, 4, 4, 0 , 
]

class << self
	attr_accessor :_clang_index_offsets 
	private :_clang_index_offsets, :_clang_index_offsets=
end
self._clang_index_offsets = [
0, 0, 13, 26, 27, 30, 38, 39, 41, 44, 45, 59, 73, 87, 101, 115, 129, 143, 157, 0 , 
]

class << self
	attr_accessor :_clang_indicies 
	private :_clang_indicies, :_clang_indicies=
end
self._clang_indicies = [
1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 6, 5, 8, 7, 9, 8, 7, 9, 7, 7, 7, 7, 10, 12, 13, 13, 15, 15, 15, 1, 12, 10, 16, 17, 16, 18, 16, 19, 20, 21, 22, 22, 16, 22, 24, 23, 25, 26, 25, 27, 25, 28, 29, 30, 31, 31, 25, 31, 33, 32, 34, 35, 34, 36, 34, 37, 38, 39, 40, 40, 34, 40, 24, 23, 7, 26, 25, 27, 25, 11, 29, 30, 31, 31, 25, 31, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 50, 52, 51, 53, 54, 53, 55, 53, 56, 13, 13, 57, 57, 53, 57, 59, 58, 60, 61, 60, 62, 60, 63, 64, 64, 64, 64, 60, 64, 42, 41, 43, 44, 43, 45, 46, 47, 48, 48, 49, 49, 43, 49, 66, 65, 67, 68, 67, 69, 67, 70, 71, 71, 71, 72, 67, 72, 0 , 
]

class << self
	attr_accessor :_clang_index_defaults 
	private :_clang_index_defaults, :_clang_index_defaults=
end
self._clang_index_defaults = [
0, 0, 4, 4, 7, 7, 11, 14, 14, 0, 10, 23, 32, 23, 41, 51, 58, 41, 65, 0 , 
]

class << self
	attr_accessor :_clang_trans_cond_spaces 
	private :_clang_trans_cond_spaces, :_clang_trans_cond_spaces=
end
self._clang_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_clang_cond_targs 
	private :_clang_cond_targs, :_clang_cond_targs=
end
self._clang_cond_targs = [
1, 1, 12, 9, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 0, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0 , 
]

class << self
	attr_accessor :_clang_cond_actions 
	private :_clang_cond_actions, :_clang_cond_actions=
end
self._clang_cond_actions = [
1, 19, 0, 0, 1, 19, 0, 0, 5, 0, 0, 0, 5, 1, 0, 22, 22, 3, 3, 22, 22, 22, 22, 17, 58, 81, 55, 55, 81, 81, 81, 81, 9, 34, 65, 31, 31, 65, 65, 65, 65, 13, 46, 73, 43, 43, 1, 73, 1, 73, 0, 11, 40, 69, 37, 37, 69, 69, 7, 28, 61, 25, 25, 61, 1, 15, 52, 77, 49, 49, 77, 1, 77, 0 , 
]

class << self
	attr_accessor :_clang_eof_actions 
	private :_clang_eof_actions, :_clang_eof_actions=
end
self._clang_eof_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 17, 13, 11, 7, 13, 15, 0 , 
]

class << self
	attr_accessor :_clang_nfa_targs 
	private :_clang_nfa_targs, :_clang_nfa_targs=
end
self._clang_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_offsets 
	private :_clang_nfa_offsets, :_clang_nfa_offsets=
end
self._clang_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_push_actions 
	private :_clang_nfa_push_actions, :_clang_nfa_push_actions=
end
self._clang_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_clang_nfa_pop_trans 
	private :_clang_nfa_pop_trans, :_clang_nfa_pop_trans=
end
self._clang_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :clang_start 
end
self.clang_start  = 10;

class << self
	attr_accessor :clang_first_final 
end
self.clang_first_final  = 10;

class << self
	attr_accessor :clang_error 
end
self.clang_error  = 0;

class << self
	attr_accessor :clang_en_main 
end
self.clang_en_main  = 10;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	pos = 1
	line = 1
	pos = 0;
	line = 1;
	begin
		cs = clang_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _have == 0  )
									begin
										__acts = 0;
										__nacts= 0
										;
										__acts = _clang_eof_actions[cs] ;
										__nacts = _clang_actions[__acts ];
										__acts += 1;
										while ( __nacts > 0  )
											begin
												case  _clang_actions[__acts ] 
												when -2 then
												begin
												end
												when 3  then
												begin
													begin
														print( "ident(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
												end
												when 4  then
												begin
													begin
														print( "literal(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
												end
												when 5  then
												begin
													begin
														print( "float(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
												end
												when 6  then
												begin
													begin
														print( "int(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
												end
												when 7  then
												begin
													begin
														print( "hex(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
												end
												when 8  then
												begin
													begin
														print( "symbol(" );
														print( line );
														print( "," );
														print( blen );
														print( "): " );
														print( buffer[0..blen-1].pack( "c*" ) );
														print( "\n" );
														
													end
													
													
												end
											end
											__nacts -= 1;
											__acts += 1;
											
										end
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _have == 0  )
						_cont = 0;
						
					end
					
				end
				
			end
			if ( _cont == 1  )
				begin
					if ( _have == 0  )
						begin
							_keys = (cs<<1) ;
							_inds = _clang_index_offsets[cs] ;
							if ( ( data[p ].ord) <= 126 && ( data[p ].ord) >= 10  )
								begin
									_ic = _clang_char_class[( data[p ].ord) - 10];
									if ( _ic <= _clang_trans_keys[_keys+1 ]&& _ic >= _clang_trans_keys[_keys ] )
										_trans = _clang_indicies[_inds + ( _ic - _clang_trans_keys[_keys ])  ];
										
										else
										_trans = _clang_index_defaults[cs];
										
									end
									
								end
								
								else
								begin
									_trans = _clang_index_defaults[cs];
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _clang_cond_targs[_trans];
							if ( _clang_cond_actions[_trans] != 0  )
								begin
									_acts = _clang_cond_actions[_trans] ;
									_nacts = _clang_actions[_acts ];
									_acts += 1;
									while ( _nacts > 0  )
										begin
											case  _clang_actions[_acts ] 
											when -2 then
											begin
											end
											when 0  then
											begin
												begin
													buffer[blen] = ( data[p ].ord);
													blen += 1;
													
												end
												
											end
											when 1  then
											begin
												begin
													blen = 0;
													
												end
												
											end
											when 2  then
											begin
												begin
													line = line + 1;
													
												end
												
											end
											when 3  then
											begin
												begin
													print( "ident(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
											end
											when 4  then
											begin
												begin
													print( "literal(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
											end
											when 5  then
											begin
												begin
													print( "float(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
											end
											when 6  then
											begin
												begin
													print( "int(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
											end
											when 7  then
											begin
												begin
													print( "hex(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
											end
											when 8  then
											begin
												begin
													print( "symbol(" );
													print( line );
													print( "," );
													print( blen );
													print( "): " );
													print( buffer[0..blen-1].pack( "c*" ) );
													print( "\n" );
													
												end
												
												
											end
										end
										_nacts -= 1;
										_acts += 1;
										
									end
									
								end
								
							end
							
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= clang_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n",
	"wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n",
	]
	
	inplen = 2
	
	inp.each { |str| run_machine(str) }
	
