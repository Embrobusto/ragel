#
# @LANG: ruby
# @GENERATED: true
#








class << self
	attr_accessor :_erract_actions 
	private :_erract_actions, :_erract_actions=
end
self._erract_actions = [
0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 , 
]

class << self
	attr_accessor :_erract_trans_keys 
	private :_erract_trans_keys, :_erract_trans_keys=
end
self._erract_trans_keys = [
1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0 , 
]

class << self
	attr_accessor :_erract_char_class 
	private :_erract_char_class, :_erract_char_class=
end
self._erract_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 , 
]

class << self
	attr_accessor :_erract_index_offsets 
	private :_erract_index_offsets, :_erract_index_offsets=
end
self._erract_index_offsets = [
0, 0, 1, 2, 3, 4, 5, 6, 0 , 
]

class << self
	attr_accessor :_erract_indices 
	private :_erract_indices, :_erract_indices=
end
self._erract_indices = [
1, 3, 4, 5, 6, 8, 0 , 
]

class << self
	attr_accessor :_erract_index_defaults 
	private :_erract_index_defaults, :_erract_index_defaults=
end
self._erract_index_defaults = [
0, 0, 2, 2, 2, 2, 7, 9, 0 , 
]

class << self
	attr_accessor :_erract_trans_cond_spaces 
	private :_erract_trans_cond_spaces, :_erract_trans_cond_spaces=
end
self._erract_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_erract_cond_targs 
	private :_erract_cond_targs, :_erract_cond_targs=
end
self._erract_cond_targs = [
0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 , 
]

class << self
	attr_accessor :_erract_cond_actions 
	private :_erract_cond_actions, :_erract_cond_actions=
end
self._erract_cond_actions = [
1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 , 
]

class << self
	attr_accessor :_erract_eof_actions 
	private :_erract_eof_actions, :_erract_eof_actions=
end
self._erract_eof_actions = [
0, 10, 15, 15, 15, 15, 20, 0, 0 , 
]

class << self
	attr_accessor :_erract_nfa_targs 
	private :_erract_nfa_targs, :_erract_nfa_targs=
end
self._erract_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_erract_nfa_offsets 
	private :_erract_nfa_offsets, :_erract_nfa_offsets=
end
self._erract_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_erract_nfa_push_actions 
	private :_erract_nfa_push_actions, :_erract_nfa_push_actions=
end
self._erract_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_erract_nfa_pop_trans 
	private :_erract_nfa_pop_trans, :_erract_nfa_pop_trans=
end
self._erract_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :erract_start 
end
self.erract_start  = 1;

class << self
	attr_accessor :erract_first_final 
end
self.erract_first_final  = 7;

class << self
	attr_accessor :erract_error 
end
self.erract_error  = 0;

class << self
	attr_accessor :erract_en_main 
end
self.erract_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = erract_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _have == 0  )
									begin
										__acts = 0;
										__nacts= 0
										;
										__acts = _erract_eof_actions[cs] ;
										__nacts = _erract_actions[__acts ];
										__acts += 1;
										while ( __nacts > 0  )
											begin
												case  _erract_actions[__acts ] 
												when -2 then
												begin
												end
												when 0  then
												begin
													begin
														print( "err_start\n" );
														
													end
													
												end
												when 1  then
												begin
													begin
														print( "err_all\n" );
														
													end
													
												end
												when 2  then
												begin
													begin
														print( "err_middle\n" );
														
													end
													
												end
												when 3  then
												begin
													begin
														print( "err_out\n" );
														
													end
													
												end
												when 4  then
												begin
													begin
														print( "eof_start\n" );
														
													end
													
												end
												when 5  then
												begin
													begin
														print( "eof_all\n" );
														
													end
													
												end
												when 6  then
												begin
													begin
														print( "eof_middle\n" );
														
													end
													
												end
												when 7  then
												begin
													begin
														print( "eof_out\n" );
														
													end
													
													
												end
											end
											__nacts -= 1;
											__acts += 1;
											
										end
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _have == 0  )
						_cont = 0;
						
					end
					
				end
				
			end
			if ( _cont == 1  )
				begin
					if ( _have == 0  )
						begin
							_keys = (cs<<1) ;
							_inds = _erract_index_offsets[cs] ;
							if ( ( data[p ].ord) <= 111 && ( data[p ].ord) >= 10  )
								begin
									_ic = _erract_char_class[( data[p ].ord) - 10];
									if ( _ic <= _erract_trans_keys[_keys+1 ]&& _ic >= _erract_trans_keys[_keys ] )
										_trans = _erract_indices[_inds + ( _ic - _erract_trans_keys[_keys ])  ];
										
										else
										_trans = _erract_index_defaults[cs];
										
									end
									
								end
								
								else
								begin
									_trans = _erract_index_defaults[cs];
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _erract_cond_targs[_trans];
							if ( _erract_cond_actions[_trans] != 0  )
								begin
									_acts = _erract_cond_actions[_trans] ;
									_nacts = _erract_actions[_acts ];
									_acts += 1;
									while ( _nacts > 0  )
										begin
											case  _erract_actions[_acts ] 
											when -2 then
											begin
											end
											when 0  then
											begin
												begin
													print( "err_start\n" );
													
												end
												
											end
											when 1  then
											begin
												begin
													print( "err_all\n" );
													
												end
												
											end
											when 2  then
											begin
												begin
													print( "err_middle\n" );
													
												end
												
											end
											when 3  then
											begin
												begin
													print( "err_out\n" );
													
												end
												
												
											end
										end
										_nacts -= 1;
										_acts += 1;
										
									end
									
								end
								
							end
							
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= erract_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"",
	"h",
	"x",
	"he",
	"hx",
	"hel",
	"hex",
	"hell",
	"helx",
	"hello",
	"hellx",
	"hello\n",
	"hellox",
	]
	
	inplen = 13
	
	inp.each { |str| run_machine(str) }
	
