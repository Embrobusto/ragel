#
# @LANG: ruby
# @GENERATED: true
#








class << self
	attr_accessor :_zlen1_key_offsets 
	private :_zlen1_key_offsets, :_zlen1_key_offsets=
end
self._zlen1_key_offsets = [
0, 0, 0 , 
]

class << self
	attr_accessor :_zlen1_trans_keys 
	private :_zlen1_trans_keys, :_zlen1_trans_keys=
end
self._zlen1_trans_keys = [
0 , 
]

class << self
	attr_accessor :_zlen1_single_lengths 
	private :_zlen1_single_lengths, :_zlen1_single_lengths=
end
self._zlen1_single_lengths = [
0, 0, 0 , 
]

class << self
	attr_accessor :_zlen1_range_lengths 
	private :_zlen1_range_lengths, :_zlen1_range_lengths=
end
self._zlen1_range_lengths = [
0, 0, 0 , 
]

class << self
	attr_accessor :_zlen1_index_offsets 
	private :_zlen1_index_offsets, :_zlen1_index_offsets=
end
self._zlen1_index_offsets = [
0, 0, 0 , 
]

class << self
	attr_accessor :_zlen1_trans_cond_spaces 
	private :_zlen1_trans_cond_spaces, :_zlen1_trans_cond_spaces=
end
self._zlen1_trans_cond_spaces = [
-1, 0 , 
]

class << self
	attr_accessor :_zlen1_trans_offsets 
	private :_zlen1_trans_offsets, :_zlen1_trans_offsets=
end
self._zlen1_trans_offsets = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_trans_lengths 
	private :_zlen1_trans_lengths, :_zlen1_trans_lengths=
end
self._zlen1_trans_lengths = [
1, 0 , 
]

class << self
	attr_accessor :_zlen1_cond_keys 
	private :_zlen1_cond_keys, :_zlen1_cond_keys=
end
self._zlen1_cond_keys = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_cond_targs 
	private :_zlen1_cond_targs, :_zlen1_cond_targs=
end
self._zlen1_cond_targs = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_cond_actions 
	private :_zlen1_cond_actions, :_zlen1_cond_actions=
end
self._zlen1_cond_actions = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_nfa_targs 
	private :_zlen1_nfa_targs, :_zlen1_nfa_targs=
end
self._zlen1_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_nfa_offsets 
	private :_zlen1_nfa_offsets, :_zlen1_nfa_offsets=
end
self._zlen1_nfa_offsets = [
0, 0, 0 , 
]

class << self
	attr_accessor :_zlen1_nfa_push_actions 
	private :_zlen1_nfa_push_actions, :_zlen1_nfa_push_actions=
end
self._zlen1_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_zlen1_nfa_pop_trans 
	private :_zlen1_nfa_pop_trans, :_zlen1_nfa_pop_trans=
end
self._zlen1_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :zlen1_start 
end
self.zlen1_start  = 1;

class << self
	attr_accessor :zlen1_first_final 
end
self.zlen1_first_final  = 1;

class << self
	attr_accessor :zlen1_error 
end
self.zlen1_error  = 0;

class << self
	attr_accessor :zlen1_en_main 
end
self.zlen1_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = zlen1_start;
		
	end
	begin
		_klen= 0
		;
		_trans = 0;
		_cond = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = _zlen1_key_offsets[cs] ;
								_trans = _zlen1_index_offsets[cs];
								_have = 0;
								_klen = _zlen1_single_lengths[cs];
								if ( _klen > 0  )
									begin
										_lower = 0;
										_mid = 0;
										_upper = 0;
										_lower = _keys;
										_upper = _keys + _klen - 1;
										while ( _upper >= _lower && _have == 0  )
											begin
												_mid = _lower + ((_upper-_lower) >> 1);
												if ( ( data[p ].ord) < _zlen1_trans_keys[_mid ] )
													_upper = _mid - 1;
													
													elsif ( ( data[p ].ord) > _zlen1_trans_keys[_mid ] )
													_lower = _mid + 1;
													
													else
													begin
														_trans += (_mid - _keys);
														_have = 1;
														
													end
													
												end
												
											end
											
										end
										if ( _have == 0  )
											begin
												_keys += _klen;
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										_klen = _zlen1_range_lengths[cs];
										if ( _klen > 0  )
											begin
												_lower = 0;
												_mid = 0;
												_upper = 0;
												_lower = _keys;
												_upper = _keys + (_klen<<1) - 2;
												while ( _have == 0 && _lower <= _upper  )
													begin
														_mid = _lower + (((_upper-_lower) >> 1) & ~1);
														if ( ( data[p ].ord) < _zlen1_trans_keys[_mid ] )
															_upper = _mid - 2;
															
															elsif ( ( data[p ].ord) > _zlen1_trans_keys[_mid + 1 ] )
															_lower = _mid + 2;
															
															else
															begin
																_trans += ((_mid - _keys)>>1);
																_have = 1;
																
															end
															
														end
														
													end
													
												end
												if ( _have == 0  )
													_trans += _klen;
													
												end
												
											end
											
										end
										
									end
									
								end
								_ckeys = _zlen1_trans_offsets[_trans] ;
								_klen = _zlen1_trans_lengths[_trans];
								_cond = _zlen1_trans_offsets[_trans];
								_have = 0;
								_cpc = 0;
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _ckeys;
									_upper = _ckeys + _klen - 1;
									while ( _have == 0 && _lower <= _upper  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( _cpc < _zlen1_cond_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( _cpc > _zlen1_cond_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_cond += (_mid - _ckeys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											cs = 0;
											_cont = 0;
											
										end
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _zlen1_cond_targs[_cond];
								if ( cs == 0  )
									_cont = 0;
									
								end
								if ( _cont == 1  )
									p += 1;
									
								end
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	if cs >= zlen1_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
	end
end

inp = [
"",
"x",
]

inplen = 2

inp.each { |str| run_machine(str) }

