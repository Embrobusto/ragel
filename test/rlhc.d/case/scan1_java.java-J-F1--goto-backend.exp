class scan1_java
{
	int
	ts ;
	int
	te ;
	int act ;
	int token ;
	
	
	
	
	
	private static char  _scanner_trans_keys [] = { 1, 0, 2, 9, 4, 4, 10, 10, 10, 10, 10, 10, 2, 9, 0, 9, 7, 7, 9, 9, 2, 9, 0,  };
	private static byte  _scanner_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 5, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0 ,  };
	private static byte  _scanner_index_offsets [] = { 0, 0, 8, 9, 10, 11, 12, 20, 30, 31, 32, 0 ,  };
	private static byte  _scanner_indices [] = { 1, 2, 2, 2, 0, 0, 0, 2, 3, 6, 7, 8, 1, 2, 9, 10, 4, 4, 4, 2, 11, 4, 4, 2, 2, 2, 12, 13, 14, 15, 13, 18, 1, 2, 2, 2, 0, 0, 0, 2, 0 ,  };
	private static byte  _scanner_index_defaults [] = { 0, 0, 4, 5, 5, 5, 4, 4, 16, 17, 0, 0 ,  };
	private static byte  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _scanner_cond_targs [] = { 7, 7, 1, 9, 0, 7, 4, 5, 7, 10, 10, 7, 7, 8, 2, 6, 7, 7, 3, 0 ,  };
	private static byte  _scanner_cond_actions [] = { 1, 2, 0, 3, 0, 4, 0, 0, 5, 6, 7, 10, 11, 0, 0, 0, 12, 13, 0, 0 ,  };
	private static byte  _scanner_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0 ,  };
	private static byte  _scanner_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0 ,  };
	private static byte  _scanner_eof_trans [] = { 0, 1, 0, 6, 6, 6, 0, 0, 17, 18, 1, 0 ,  };
	private static byte  _scanner_nfa_targs [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  scanner_start  = 7;
	private static int  scanner_first_final  = 7;
	private static int  scanner_error  = 0;
	private static int  scanner_en_main  = 7;
	int cs;
	
	void init()
	{
		{
			cs = (int)scanner_start;
			ts = 0;
			te = 0;
			act = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _trans = 0;
			int _keys;
			int _inds;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					case 1:
					switch ( _scanner_from_state_actions[cs]  ) {
						case 9 :
						{
							{
								ts = p;
								
							}
							
						}
						
						break;
						
					}
					_keys = (cs<<1) ;
					_inds = _scanner_index_offsets[cs] ;
					if ( ( data[p ]) <= 120 && ( data[p ]) >= 10  )
					{
						int _ic = (int)_scanner_char_class[(int)( data[p ]) - 10];
						if ( _ic <= (int)_scanner_trans_keys[_keys+1 ]&& _ic >= (int)_scanner_trans_keys[_keys ] )
						_trans = (int)_scanner_indices[_inds + (int)( _ic - (int)_scanner_trans_keys[_keys ])  ];
						
						else
						_trans = (int)_scanner_index_defaults[cs];
						
						
					}
					
					else
					{
						_trans = (int)_scanner_index_defaults[cs];
						
					}
					
					{
						_goto_targ = 2;
						if (true)
						continue _goto;
					}
					
					case 2:
					cs = (int)_scanner_cond_targs[_trans];
					if ( _scanner_cond_actions[_trans] == 0  )
					{
						_goto_targ = 3;
						if (true)
						continue _goto;
					}
					
					switch ( _scanner_cond_actions[_trans]  ) {
						case 3 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 11 :
						{
							{
								te = p+1;
								{
									System.out.print( "on last     " );
									if ( p + 1 == te )
									{
										System.out.print( "yes" );
										
									} 
									System.out.print( "\n" );
									
								}
								
							}
							
						}
						
						break;
						case 5 :
						{
							{
								te = p+1;
								{
									System.out.print( "on lag      " );
									if ( p + 1 == te )
									{
										System.out.print( "yes" );
										
									} 
									System.out.print( "\n" );
									
								}
								
							}
							
						}
						
						break;
						case 2 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 10 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 12 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "on next     " );
									if ( p + 1 == te )
									{
										System.out.print( "yes" );
										
									} 
									System.out.print( "\n" );
									
								}
								
							}
							
						}
						
						break;
						case 13 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "on lag      " );
									if ( p + 1 == te )
									{
										System.out.print( "yes" );
										
									} 
									System.out.print( "\n" );
									
								}
								
							}
							
						}
						
						break;
						case 4 :
						{
							{
								p = ((te))-1;
								{
									System.out.print( "on lag      " );
									if ( p + 1 == te )
									{
										System.out.print( "yes" );
										
									} 
									System.out.print( "\n" );
									
								}
								
							}
							
						}
						
						break;
						case 1 :
						{
							{
								switch ( act  ) {
									case 0 :
									{
										{
											cs = 0;
											{
												_goto_targ = 3;
												if (true)
												continue _goto;
											}
											
										}
										
									}
									
									break;
									case 4 :
									p = ((te))-1;
									{
										System.out.print( "lm switch1  " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
									break;
									case 5 :
									p = ((te))-1;
									{
										System.out.print( "lm switch2  " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
									break;
									
								}
								
							}
							
							
						}
						
						break;
						case 6 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 4;
								
							}
							
						}
						
						break;
						case 7 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 5;
								
							}
							
						}
						
						break;
						
					}
					
					case 3:
					switch ( _scanner_to_state_actions[cs]  ) {
						case 8 :
						{
							{
								ts = 0;
								
							}
							
						}
						{
							{
								act = 0;
								
							}
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					p+= 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 4:
					{
					
					}
					if ( p == eof  )
					{
						if ( _scanner_eof_trans[cs] > 0  )
						{
							_trans = (int)_scanner_eof_trans[cs] - 1;
							{
								_goto_targ = 2;
								if (true)
								continue _goto;
							}
							
						}
						
						
					}
					
					
					case 5:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"abbc1d1d2\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		scan1_java machine = new scan1_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
