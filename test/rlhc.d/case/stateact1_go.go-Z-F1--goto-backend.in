host( "working/stateact1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	
	
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _state_act_trans_keys( 0, 3 ) = { u(1), u(0), u(3), u(3), u(0), u(0), u(2), u(2), u(2), u(2), u(2), u(2), u(0) };

array s8 _state_act_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 };

array s8 _state_act_index_offsets( 0, 4 ) = { 0, 0, 1, 2, 3, 4, 0 };

array s8 _state_act_indicies( 0, 3 ) = { 0, 2, 3, 3, 3, 0 };

array s8 _state_act_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 0 };

array s8 _state_act_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0 };

array s8 _state_act_cond_targs( 0, 5 ) = { 2, 0, 5, 1, 0 };

array s8 _state_act_cond_actions( 0, 3 ) = { 0, 0, 3, 0, 0 };

array s8 _state_act_to_state_actions( 0, 6 ) = { 0, 0, 1, 4, 6, 4, 0 };

array s8 _state_act_from_state_actions( 0, 7 ) = { 0, 0, 2, 5, 7, 5, 0 };

array s8 _state_act_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int state_act_start = 4;
value int state_act_first_final = 4;
value int state_act_error = 0;

value int state_act_en_main = 4;
value int state_act_en_main_line_again = 3;

host( "working/stateact1_go.rl", 45 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)state_act_start;
	}
	host( "working/stateact1_go.rl", 48 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		int _trans = 0;
		index byte _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				switch ( _state_act_from_state_actions[cs] ) {
					case 5 {
						host( "working/stateact1_go.rl", 18 ) ${fmt.Print( "b2\n" );}$
					}
					case 2 {
						host( "working/stateact1_go.rl", 20 ) ${fmt.Print( "c2\n" );}$
					}
					case 7 {
						host( "working/stateact1_go.rl", 16 ) ${fmt.Print( "a2\n" );}$	host( "working/stateact1_go.rl", 18 ) ${fmt.Print( "b2\n" );}$
					}
				}
				
				_keys = offset( _state_act_trans_keys, (cs<<1) );
				_inds = offset( _state_act_indicies, _state_act_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 105 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_state_act_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _state_act_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _state_act_trans_keys, _keys ) )
					_trans = cast(int)deref( _state_act_indicies, _inds + cast(int)( _ic - cast(int)deref( _state_act_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_state_act_index_defaults[cs];
				}
				else {
					_trans = cast(int)_state_act_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_state_act_cond_targs[_trans];
				
				if ( _state_act_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _state_act_cond_actions[_trans] ) {
					case 3 {
						host( "working/stateact1_go.rl", 21 ) ${${cs = 3;}$}$
					}
				}
				
				
			}
			label _again {
				switch ( _state_act_to_state_actions[cs] ) {
					case 4 {
						host( "working/stateact1_go.rl", 17 ) ${fmt.Print( "b1\n" );}$
					}
					case 1 {
						host( "working/stateact1_go.rl", 19 ) ${fmt.Print( "c1\n" );}$
					}
					case 6 {
						host( "working/stateact1_go.rl", 15 ) ${fmt.Print( "a1\n" );}$	host( "working/stateact1_go.rl", 17 ) ${fmt.Print( "b1\n" );}$
					}
				}
				
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/stateact1_go.rl", 54 ) @{
	}
	func finish() {
		if cs >= state_act_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"hi\nhi\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@