class cond7_java
{
	int i ;
	int c ;
	
	
	
	
	
	private static char  _foo_trans_keys [] = { 1, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0,  };
	private static byte  _foo_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 ,  };
	private static byte  _foo_index_offsets [] = { 0, 0, 1, 2, 5, 0 ,  };
	private static byte  _foo_indicies [] = { 0, 2, 3, 1, 4, 0 ,  };
	private static byte  _foo_index_defaults [] = { 0, 1, 1, 1, 1, 0 ,  };
	private static byte  _foo_trans_cond_spaces [] = { -1, -1, 0, 0, 0, 0 ,  };
	private static byte  _foo_trans_offsets [] = { 0, 1, 2, 4, 6, 0 ,  };
	private static byte  _foo_cond_targs [] = { 2, 0, 3, 2, 4, 0, 0, 3, 0 ,  };
	private static byte  _foo_cond_actions [] = { 1, 0, 1, 2, 0, 0, 0, 2, 0 ,  };
	private static byte  _foo_nfa_targs [] = { 0, 0 ,  };
	private static byte  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _foo_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _foo_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  foo_start  = 1;
	private static int  foo_first_final  = 4;
	private static int  foo_error  = 0;
	private static int  foo_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)foo_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _cpc;
			int _trans = 0;
			int _have = 0;
			int _cont = 1;
			int _cond = 0;
			int _keys;
			int _inds;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = (cs<<1) ;
						_inds = _foo_index_offsets[cs] ;
						if ( ( data[p ]) <= 57 && ( data[p ]) >= 10  )
						{
							int _ic = (int)_foo_char_class[(int)( data[p ]) - 10];
							if ( _ic <= (int)_foo_trans_keys[_keys+1 ]&& _ic >= (int)_foo_trans_keys[_keys ] )
							_trans = (int )_foo_indicies[_inds + (int)( _ic - (int)_foo_trans_keys[_keys ])  ];
							
							else
							_trans = (int )_foo_index_defaults[cs];
							
							
						}
						
						else
						{
							_trans = (int )_foo_index_defaults[cs];
							
						}
						
						_cond = (int )_foo_trans_offsets[_trans];
						_cpc = 0;
						switch ( _foo_trans_cond_spaces[_trans]  ) {
							case 0 :
							if ( (i > 0) )
							_cpc += 1;
							
							
							break;
							
						}
						_cond += (int )_cpc;
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_foo_cond_targs[_cond];
						switch ( _foo_cond_actions[_cond]  ) {
							case 2 :
							{
								i = i - 1;
								c = ( int ) ( (( data[p ])) )
								;
								System.out.print( "item: " );
								System.out.print( c );
								System.out.print( "\n" );
								
							}
							
							break;
							case 1 :
							{
								i = ( int ) ( (( data[p ])) - 48 )
								;
								System.out.print( "count: " );
								System.out.print( i );
								System.out.print( "\n" );
								
							}
							
							break;
							
						}
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= foo_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"00\n",
		"019\n",
		"190\n",
		"1719\n",
		"1040000\n",
		"104000a\n",
		"104000\n",
	};
	
	static final int inplen = 7;
	
	public static void main (String[] args)
	{
		cond7_java machine = new cond7_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
