host( "working/awkemu.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	/*
	* Emulate the basic parser of the awk program. Breaks lines up into
	* words and prints the words.
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	#define LINEBUF 2048
	static char lineBuf[LINEBUF];
	static char blineBuf[LINEBUF];
	static int lineLen;
	static int blineLen;
	static int words;
	
	void finishLine();
	
	struct awkemu
	{
		int cs;
	};
	
	
	
	void finishLine()
	{
		int i;
		char *pword = blineBuf;
		lineBuf[lineLen] = 0;
		printf("endline(%i): %s\n", words, lineBuf );
		for ( i = 0; i < words; i++ ) {
			printf("  word: %s\n", pword );
			pword += strlen(pword) + 1;
		}
	}
	
}@
array char _awkemu_trans_keys( 0, 1 ) = { 0, 1, 0, 1, 0, 1, 0 };

array s8 _awkemu_char_class( 0, 2 ) = { 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0 };

array s8 _awkemu_index_offsets( 0, 4 ) = { 0, 2, 4, 0 };

array s8 _awkemu_indices( 0, 7 ) = { 1, 2, 3, 4, 6, 7, 0 };

array s8 _awkemu_index_defaults( 0, 5 ) = { 0, 0, 5, 0 };

array s8 _awkemu_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _awkemu_cond_targs( 0, 2 ) = { 0, 1, 2, 1, 2, 0, 1, 2, 0 };

array s8 _awkemu_cond_actions( 0, 8 ) = { 1, 2, 3, 4, 5, 6, 7, 8, 0 };

array s8 _awkemu_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _awkemu_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _awkemu_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _awkemu_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int awkemu_start = 2;
value int awkemu_first_final = 2;
value int awkemu_error = -1;

value int awkemu_en_main = 2;

host( "working/awkemu.rl", 101 ) @{
	
	void awkemu_init( struct awkemu *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)awkemu_start;
	}
	host( "working/awkemu.rl", 105 ) @{
	}
	
	void awkemu_execute( struct awkemu *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _awkemu_trans_keys, (host( "-", 1 ) ={ fsm->cs}=<<1) );
					_inds = offset( _awkemu_indices, _awkemu_index_offsets[host( "-", 1 ) ={ fsm->cs}=] );
					
					if ( ( deref( data, p )) <= 32 && ( deref( data, p )) >= 9 )
					{
						int _ic = cast(int)_awkemu_char_class[cast(int)( deref( data, p )) - 9];
						if ( _ic <= cast(int)deref( _awkemu_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _awkemu_trans_keys, _keys ) )
						_trans = cast(uint)deref( _awkemu_indices, _inds + cast(int)( _ic - cast(int)deref( _awkemu_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_awkemu_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					else {
						_trans = cast(uint)_awkemu_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
					}
					
				}
				if ( _cont == 1 ) {
					host( "-", 1 ) ={ fsm->cs}= = cast(int)_awkemu_cond_targs[_trans];
					
					switch ( _awkemu_cond_actions[_trans] ) {
						case 4 {
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 5 {
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 7 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 8 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 1 {
							host( "working/awkemu.rl", 41 ) ${
								blineBuf[blineLen++] = ={( deref( data, p ))}=;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 2 {
							host( "working/awkemu.rl", 47 ) ${
								blineBuf[blineLen++] = 0;
								words += 1;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
						case 3 {
							host( "working/awkemu.rl", 47 ) ${
								blineBuf[blineLen++] = 0;
								words += 1;
							}$
							host( "working/awkemu.rl", 78 ) ${ finishLine(); }$
						}
						case 6 {
							host( "working/awkemu.rl", 33 ) ${
								lineLen = 0;	
								blineLen = 0;	
								words = 0;
							}$
							host( "working/awkemu.rl", 41 ) ${
								blineBuf[blineLen++] = ={( deref( data, p ))}=;
							}$
							host( "working/awkemu.rl", 54 ) ${
								lineBuf[lineLen++] = ={( deref( data, p ))}=;
							}$
						}
					}
					
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/awkemu.rl", 112 ) @{
	}
	
	int awkemu_finish( struct awkemu *fsm )
	{
		if ( fsm->cs == awkemu_error ) 
		return -1;
		if ( fsm->cs >= awkemu_first_final ) 
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#define BUFSIZE 2048
	
	struct awkemu fsm;
	char buf[BUFSIZE];
	
	void test( char *buf )
	{
		int len = strlen( buf );
		awkemu_init( &fsm );
		awkemu_execute( &fsm, buf, len );
		if ( awkemu_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "" );
		test( "one line with no newline" );
		test( "one line\n" );
		return 0;
	}
	
}@