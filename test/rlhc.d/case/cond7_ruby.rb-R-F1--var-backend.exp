#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_foo_trans_keys 
	private :_foo_trans_keys, :_foo_trans_keys=
end
self._foo_trans_keys = [
1, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0 , 
]

class << self
	attr_accessor :_foo_char_class 
	private :_foo_char_class, :_foo_char_class=
end
self._foo_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 , 
]

class << self
	attr_accessor :_foo_index_offsets 
	private :_foo_index_offsets, :_foo_index_offsets=
end
self._foo_index_offsets = [
0, 0, 1, 2, 5, 0 , 
]

class << self
	attr_accessor :_foo_indicies 
	private :_foo_indicies, :_foo_indicies=
end
self._foo_indicies = [
0, 2, 3, 1, 4, 0 , 
]

class << self
	attr_accessor :_foo_index_defaults 
	private :_foo_index_defaults, :_foo_index_defaults=
end
self._foo_index_defaults = [
0, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_foo_trans_cond_spaces 
	private :_foo_trans_cond_spaces, :_foo_trans_cond_spaces=
end
self._foo_trans_cond_spaces = [
-1, -1, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_foo_trans_offsets 
	private :_foo_trans_offsets, :_foo_trans_offsets=
end
self._foo_trans_offsets = [
0, 1, 2, 4, 6, 0 , 
]

class << self
	attr_accessor :_foo_cond_targs 
	private :_foo_cond_targs, :_foo_cond_targs=
end
self._foo_cond_targs = [
2, 0, 3, 2, 4, 0, 0, 3, 0 , 
]

class << self
	attr_accessor :_foo_cond_actions 
	private :_foo_cond_actions, :_foo_cond_actions=
end
self._foo_cond_actions = [
1, 0, 1, 2, 0, 0, 0, 2, 0 , 
]

class << self
	attr_accessor :_foo_nfa_targs 
	private :_foo_nfa_targs, :_foo_nfa_targs=
end
self._foo_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_offsets 
	private :_foo_nfa_offsets, :_foo_nfa_offsets=
end
self._foo_nfa_offsets = [
0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_push_actions 
	private :_foo_nfa_push_actions, :_foo_nfa_push_actions=
end
self._foo_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_pop_trans 
	private :_foo_nfa_pop_trans, :_foo_nfa_pop_trans=
end
self._foo_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :foo_start 
end
self.foo_start  = 1;

class << self
	attr_accessor :foo_first_final 
end
self.foo_first_final  = 4;

class << self
	attr_accessor :foo_error 
end
self.foo_error  = 0;

class << self
	attr_accessor :foo_en_main 
end
self.foo_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	i = 1
	c = 1
	begin
		cs = foo_start;
		
	end
	begin
		_cpc= 0
		;
		_trans = 0;
		_have = 0;
		_cont = 1;
		_cond = 0;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _foo_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 57 && ( data[p ].ord) >= 10  )
									begin
										_ic = _foo_char_class[( data[p ].ord) - 10];
										if ( _ic <= _foo_trans_keys[_keys+1 ]&& _ic >= _foo_trans_keys[_keys ] )
											_trans = _foo_indicies[_inds + ( _ic - _foo_trans_keys[_keys ])  ];
											
											else
											_trans = _foo_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _foo_index_defaults[cs];
										
									end
									
								end
								_cond = _foo_trans_offsets[_trans];
								_cpc = 0;
								case  _foo_trans_cond_spaces[_trans]  
								when -2 then
								begin
								end
								when 0  then
								begin
									if ( (i > 0) )
										_cpc += 1;
										
									end
									
									
								end
							end
							_cond += _cpc;
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _foo_cond_targs[_cond];
							case  _foo_cond_actions[_cond]  
							when -2 then
							begin
							end
							when 2  then
							begin
								begin
									i = i - 1;
									c = ( ( data[p ].ord) )
									;
									print( "item: " );
									print( c );
									print( "\n" );
									
								end
								
							end
							when 1  then
							begin
								begin
									i = ( ( data[p ].ord) - 48 )
									;
									print( "count: " );
									print( i );
									print( "\n" );
									
								end
								
								
							end
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= foo_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"00\n",
	"019\n",
	"190\n",
	"1719\n",
	"1040000\n",
	"104000a\n",
	"104000\n",
	]
	
	inplen = 7
	
	inp.each { |str| run_machine(str) }
	
