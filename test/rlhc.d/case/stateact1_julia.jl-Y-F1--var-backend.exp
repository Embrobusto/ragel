const _state_act_trans_keys = UInt8[1, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0 , ]
const _state_act_char_class = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 , ]
const _state_act_index_offsets = Int8[0, 0, 1, 2, 3, 4, 0 , ]
const _state_act_indices = Int8[0, 2, 3, 3, 3, 0 , ]
const _state_act_index_defaults = Int8[0, 1, 1, 1, 1, 1, 0 , ]
const _state_act_trans_cond_spaces = Int8[-1, -1, -1, -1, 0 , ]
const _state_act_cond_targs = Int8[2, 0, 5, 1, 0 , ]
const _state_act_cond_actions = Int8[0, 0, 3, 0, 0 , ]
const _state_act_to_state_actions = Int8[0, 0, 1, 4, 6, 4, 0 , ]
const _state_act_from_state_actions = Int8[0, 0, 2, 5, 7, 5, 0 , ]
const _state_act_nfa_targs = Int8[0, 0 , ]
const _state_act_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0 , ]
const _state_act_nfa_push_actions = Int8[0, 0 , ]
const _state_act_nfa_pop_trans = Int8[0, 0 , ]
const state_act_start  = 4
const state_act_first_final  = 4
const state_act_error  = 0
const state_act_en_main  = 4
const state_act_en_main_line_again  = 3
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	
	cs = convert(Int, state_act_start )
	_trans = 0;
	_have = 0;
	_cont = 1;
	_keys = 0;
	_inds = 0;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				if _state_act_from_state_actions[1+(cs)] == 5 
					print( "b2\n" );
					
				elseif _state_act_from_state_actions[1+(cs)] == 2 
					print( "c2\n" );
					
				elseif _state_act_from_state_actions[1+(cs)] == 7 
					print( "a2\n" );
					print( "b2\n" );
					
				end
				_keys = (cs<<1)
				_inds = _state_act_index_offsets[1+(cs)]
				if (data[1+(p )])<= 105 && (data[1+(p )])>= 10 
					_ic = convert(Int, _state_act_char_class[1+(convert(Int, (data[1+(p )]) )- 10)] );
					if _ic <= convert(Int, _state_act_trans_keys[1+(_keys+1 )] )&& _ic >= convert(Int, _state_act_trans_keys[1+(_keys )] )
						_trans = convert(UInt, _state_act_indices[1+(_inds + convert(Int, (_ic - convert(Int, _state_act_trans_keys[1+(_keys )] )) ))] )
						
					else
						_trans = convert(UInt, _state_act_index_defaults[1+(cs)] )
						
					end
					
				else
					_trans = convert(UInt, _state_act_index_defaults[1+(cs)] )
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _state_act_cond_targs[1+(_trans)] )
				if _state_act_cond_actions[1+(_trans)] == 3 
					{
						cs = 3
						
					}
					
				end
				if _state_act_to_state_actions[1+(cs)] == 4 
					print( "b1\n" );
					
				elseif _state_act_to_state_actions[1+(cs)] == 1 
					print( "c1\n" );
					
				elseif _state_act_to_state_actions[1+(cs)] == 6 
					print( "a1\n" );
					print( "b1\n" );
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= state_act_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "hi\nhi\n" );
