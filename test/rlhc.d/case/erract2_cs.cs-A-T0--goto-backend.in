host( "working/erract2_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			
			
			
			
			
			
		}@
		array s8 _erract_actions( 0, 7 ) = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 };
		
		array s8 _erract_key_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };
		
		array char _erract_trans_keys( 0, 111 ) = { c(104), c(101), c(108), c(108), c(111), c(10), c(0) };
		
		array s8 _erract_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0, 0 };
		
		array s8 _erract_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _erract_index_offsets( 0, 12 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 0 };
		
		array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _erract_trans_offsets( 0, 12 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 };
		
		array s8 _erract_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _erract_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _erract_cond_targs( 0, 7 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 0, 0 };
		
		array s8 _erract_cond_actions( 0, 7 ) = { 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0, 7, 0, 0 };
		
		array s8 _erract_eof_actions( 0, 20 ) = { 0, 10, 15, 15, 15, 15, 20, 0, 0 };
		
		array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int erract_start = 1;
		value int erract_first_final = 7;
		value int erract_error = 0;
		
		value int erract_en_main = 1;
		
		host( "working/erract2_cs.rl", 36 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)erract_start;
			}
			host( "working/erract2_cs.rl", 41 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _klen;
				uint _trans = 0;
				uint _cond = 0;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _ckeys;
				int _cpc;
				entry {
					
					if ( p == pe )
					goto _test_eof;
					if ( cs == 0 )
					goto _out;
					label _resume {
						_keys = offset( _erract_trans_keys, _erract_key_offsets[cs] );
						_trans = cast(uint)_erract_index_offsets[cs];
						
						_klen = cast(int)_erract_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									goto _match;
								}
							}
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
						
						_klen = cast(int)_erract_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									goto _match;
								}
							}
							_trans += cast(uint)_klen;
						}
						
					}
					label _match {
						_ckeys = offset( _erract_cond_keys, _erract_trans_offsets[_trans] );
						_klen = cast(int)_erract_trans_lengths[_trans];
						_cond = cast(uint)_erract_trans_offsets[_trans];
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _erract_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _erract_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									goto _match_cond;
								}
							}
							cs = 0;
							goto _again;
						}
					}
					label _match_cond {
						cs = cast(int)_erract_cond_targs[_cond];
						
						if ( _erract_cond_actions[_cond] == 0 )
						goto _again;
						
						_acts = offset( _erract_actions, _erract_cond_actions[_cond] );
						_nacts = cast(uint)deref( _erract_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _erract_actions, _acts ) )
							{
								case 0 {
									host( "working/erract2_cs.rl", 18 ) ${Console.Write( "err_start\n" );}$
								}
								case 1 {
									host( "working/erract2_cs.rl", 19 ) ${Console.Write( "err_all\n" );}$
								}
								case 2 {
									host( "working/erract2_cs.rl", 20 ) ${Console.Write( "err_middle\n" );}$
								}
								case 3 {
									host( "working/erract2_cs.rl", 21 ) ${Console.Write( "err_out\n" );}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						
					}
					label _again {
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
						if ( p == eof )
						{
							index s8 __acts;
							uint __nacts;
							__acts = offset( _erract_actions, _erract_eof_actions[cs] );
							__nacts = cast(uint)deref( _erract_actions, __acts );
							__acts += 1;
							while ( __nacts > 0 ) {
								switch ( deref( _erract_actions, __acts ) ) {
									case 0 {
										host( "working/erract2_cs.rl", 18 ) ${Console.Write( "err_start\n" );}$
									}
									case 1 {
										host( "working/erract2_cs.rl", 19 ) ${Console.Write( "err_all\n" );}$
									}
									case 2 {
										host( "working/erract2_cs.rl", 20 ) ${Console.Write( "err_middle\n" );}$
									}
									case 3 {
										host( "working/erract2_cs.rl", 21 ) ${Console.Write( "err_out\n" );}$
									}
									case 4 {
										host( "working/erract2_cs.rl", 23 ) ${Console.Write( "eof_start\n" );}$
									}
									case 5 {
										host( "working/erract2_cs.rl", 24 ) ${Console.Write( "eof_all\n" );}$
									}
									case 6 {
										host( "working/erract2_cs.rl", 25 ) ${Console.Write( "eof_middle\n" );}$
									}
									case 7 {
										host( "working/erract2_cs.rl", 26 ) ${Console.Write( "eof_out\n" );}$
									}
								}
								__nacts -= 1;
								__acts += 1;
							}
						}
						
					}
					label _out { {}
					}
				}
			}
			host( "working/erract2_cs.rl", 52 ) @{
			}
			
			void finish( )
			{
				if ( cs >= erract_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"",
				"h",
				"x",
				"he",
				"hx",
				"hel",
				"hex",
				"hell",
				"helx",
				"hello",
				"hellx",
				"hello\n",
				"hellox",
			};
			
			
			static readonly int inplen = 13;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@