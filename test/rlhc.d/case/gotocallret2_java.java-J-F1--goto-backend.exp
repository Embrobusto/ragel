class gotocallret2_java
{
	char comm ;
	int top ;
	int stack [] = new int[32];
	int
	ts ;
	int
	te ;
	int act ;
	int val ;
	
	
	
	
	
	private static char  _GotoCallRet_trans_keys [] = { 1, 0, 6, 6, 9, 9, 7, 7, 8, 8, 1, 0, 0, 10, 2, 9, 5, 9, 1, 0, 2, 11, 5, 9, 2, 2, 2, 10, 2, 2, 5, 9, 0,  };
	private static byte  _GotoCallRet_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 4, 1, 1, 1, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 8, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 1, 11, 0 ,  };
	private static byte  _GotoCallRet_index_offsets [] = { 0, 0, 1, 2, 3, 4, 4, 15, 23, 28, 28, 38, 43, 44, 53, 54, 0 ,  };
	private static byte  _GotoCallRet_indices [] = { 1, 2, 3, 4, 6, 7, 8, 9, 7, 10, 10, 10, 10, 10, 11, 13, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 7, 17, 17, 17, 17, 17, 18, 19, 17, 17, 17, 17, 17, 19, 22, 23, 24, 25, 25, 25, 25, 25, 26, 24, 25, 25, 25, 25, 25, 0 ,  };
	private static byte  _GotoCallRet_index_defaults [] = { 0, 0, 0, 0, 0, 5, 7, 12, 12, 7, 7, 20, 21, 7, 27, 28, 0 ,  };
	private static byte  _GotoCallRet_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _GotoCallRet_cond_targs [] = { 6, 2, 3, 4, 6, 9, 6, 0, 6, 6, 7, 6, 6, 1, 8, 10, 10, 11, 10, 12, 10, 10, 13, 13, 14, 15, 13, 13, 13, 0 ,  };
	private static byte  _GotoCallRet_cond_actions [] = { 1, 0, 0, 0, 2, 4, 6, 0, 7, 8, 9, 10, 11, 0, 0, 12, 13, 0, 14, 0, 15, 16, 17, 18, 0, 0, 19, 20, 21, 0 ,  };
	private static byte  _GotoCallRet_to_state_actions [] = { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0 ,  };
	private static byte  _GotoCallRet_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0 ,  };
	private static byte  _GotoCallRet_eof_trans [] = { 0, 1, 1, 1, 1, 0, 0, 13, 13, 0, 0, 21, 22, 0, 28, 29, 0 ,  };
	private static byte  _GotoCallRet_nfa_targs [] = { 0, 0 ,  };
	private static byte  _GotoCallRet_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _GotoCallRet_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _GotoCallRet_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  GotoCallRet_start  = 6;
	private static int  GotoCallRet_first_final  = 6;
	private static int  GotoCallRet_error  = 0;
	private static int  GotoCallRet_en_handle  = 5;
	private static int  GotoCallRet_en_one  = 10;
	private static int  GotoCallRet_en_two  = 13;
	private static int  GotoCallRet_en_main  = 6;
	int cs;
	
	void init()
	{
		{
			cs = (int)GotoCallRet_start;
			top = 0;
			ts = 0;
			te = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _trans = 0;
			int _keys;
			int _inds;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					case 1:
					switch ( _GotoCallRet_from_state_actions[cs]  ) {
						case 5 :
						{
							{
								ts = p;
								
							}
							
						}
						
						break;
						
					}
					_keys = (cs<<1) ;
					_inds = _GotoCallRet_index_offsets[cs] ;
					if ( ( data[p ]) <= 125 && ( data[p ]) >= 10  )
					{
						int _ic = (int)_GotoCallRet_char_class[(int)( data[p ]) - 10];
						if ( _ic <= (int)_GotoCallRet_trans_keys[_keys+1 ]&& _ic >= (int)_GotoCallRet_trans_keys[_keys ] )
						_trans = (int)_GotoCallRet_indices[_inds + (int)( _ic - (int)_GotoCallRet_trans_keys[_keys ])  ];
						
						else
						_trans = (int)_GotoCallRet_index_defaults[cs];
						
						
					}
					
					else
					{
						_trans = (int)_GotoCallRet_index_defaults[cs];
						
					}
					
					{
						_goto_targ = 2;
						if (true)
						continue _goto;
					}
					
					case 2:
					cs = (int)_GotoCallRet_cond_targs[_trans];
					if ( _GotoCallRet_cond_actions[_trans] == 0  )
					{
						_goto_targ = 3;
						if (true)
						continue _goto;
					}
					
					switch ( _GotoCallRet_cond_actions[_trans]  ) {
						case 4 :
						{
							System.out.print( "handle " );
							{
								p = p - 1;
								
							}
							if ( val == 1 )
							{
								{
									cs = (10);
									
								}
								
							} 
							if ( val == 2 )
							{
								{
									cs = (13);
									
								}
								
							} 
							if ( val == 3 )
							{
								{
									cs = 6;
									
								}
							} 
							
						}
						
						break;
						case 9 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 14 :
						{
							{
								te = p+1;
								{
									System.out.print( "{ " );
									{
										stack[top] = cs;
										top += 1;
										cs = (10);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 13 :
						{
							{
								te = p+1;
								{
									System.out.print( "[ " );
									{
										stack[top] = cs;
										top += 1;
										cs = (13);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 12 :
						{
							{
								te = p+1;
								{
									System.out.print( "space " );
									
								}
								
							}
							
						}
						
						break;
						case 16 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "} " );
									{
										top -= 1;
										cs = stack[top];
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 15 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "word " );
									val = 1;
									{
										cs = (5);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 19 :
						{
							{
								te = p+1;
								{
									System.out.print( "{ " );
									{
										stack[top] = cs;
										top += 1;
										cs = (10);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 18 :
						{
							{
								te = p+1;
								{
									System.out.print( "[ " );
									{
										stack[top] = cs;
										top += 1;
										cs = (13);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 17 :
						{
							{
								te = p+1;
								{
									System.out.print( "space " );
									
								}
								
							}
							
						}
						
						break;
						case 20 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "] " );
									{
										top -= 1;
										cs = stack[top];
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 21 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "word " );
									val = 2;
									{
										cs = (5);
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 10 :
						{
							{
								te = p+1;
								{
									System.out.print( "{ " );
									{
										stack[top] = cs;
										top += 1;
										cs = 10;
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 8 :
						{
							{
								te = p+1;
								{
									System.out.print( "[ " );
									{
										stack[top] = cs;
										top += 1;
										cs = 13;
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 2 :
						{
							{
								te = p+1;
								{
									System.out.print( "this is the foil" );
									
								}
								
							}
							
						}
						
						break;
						case 7 :
						{
							{
								te = p+1;
								{
									System.out.print( "space " );
									
								}
								
							}
							
						}
						
						break;
						case 6 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 11 :
						{
							{
								te = p;
								p = p - 1;
								{
									System.out.print( "word " );
									val = 3;
									{
										cs = 5;
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 1 :
						{
							{
								p = ((te))-1;
								{
									System.out.print( "word " );
									val = 3;
									{
										cs = 5;
										{
											_goto_targ = 3;
											if (true)
											continue _goto;
										}
										
									}
									
								}
								
							}
							
						}
						
						break;
						
					}
					
					case 3:
					switch ( _GotoCallRet_to_state_actions[cs]  ) {
						case 3 :
						{
							{
								ts = 0;
								
							}
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					p+= 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 4:
					{
					
					}
					if ( p == eof  )
					{
						if ( _GotoCallRet_eof_trans[cs] > 0  )
						{
							_trans = (int)_GotoCallRet_eof_trans[cs] - 1;
							{
								_goto_targ = 2;
								if (true)
								continue _goto;
							}
							
						}
						
						
					}
					
					
					case 5:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= GotoCallRet_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"{a{b[c d]d}c}\n",
		"[a{b[c d]d}c}\n",
		"[a[b]c]d{ef{g{h}i}j}l\n",
		"{{[]}}\n",
		"a b c\n",
		"{a b c}\n",
		"[a b c]\n",
		"{]\n",
		"{{}\n",
		"[[[[[[]]]]]]\n",
		"[[[[[[]]}]]]\n",
	};
	
	static final int inplen = 11;
	
	public static void main (String[] args)
	{
		gotocallret2_java machine = new gotocallret2_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
