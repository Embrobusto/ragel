static mut pos : i32 = 0;
static mut line : i32 = 0;





static _clang_actions: [i8 ; 87] = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 2, 2, 1, 0, 2, 3, 1, 2, 3, 2, 2, 4, 1, 2, 4, 2, 2, 5, 1, 2, 5, 2, 2, 6, 1, 2, 6, 2, 2, 7, 1, 2, 7, 2, 2, 8, 1, 2, 8, 2, 3, 3, 1, 0, 3, 4, 1, 0, 3, 5, 1, 0, 3, 6, 1, 0, 3, 7, 1, 0, 3, 8, 1, 0, 0 , 0 ];
static _clang_key_offsets: [i16 ; 21] = [ 0, 0, 5, 10, 13, 17, 22, 25, 27, 33, 36, 56, 76, 96, 117, 138, 157, 176, 196, 0 , 0 ];
static _clang_trans_keys: [u8 ; 221] = [ 10, 34, 92, 0, 127, 10, 39, 92, 0, 127, 10, 0, 127, 10, 33, 0, 127, 10, 33, 47, 0, 127, 10, 0, 127, 48, 57, 48, 57, 65, 70, 97, 102, 10, 0, 127, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 33, 34, 39, 47, 48, 95, 35, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0 , 0 ];
static _clang_single_lengths: [i8 ; 21] = [ 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 , 0 ];
static _clang_range_lengths: [i8 ; 21] = [ 0, 1, 1, 1, 1, 1, 1, 1, 3, 1, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 , 0 ];
static _clang_index_offsets: [i16 ; 21] = [ 0, 0, 5, 10, 13, 17, 22, 25, 27, 31, 34, 48, 62, 76, 91, 106, 119, 132, 146, 0 , 0 ];
static _clang_trans_cond_spaces: [i8 ; 163] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _clang_trans_offsets: [i16 ; 163] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 0 , 0 ];
static _clang_trans_lengths: [i8 ; 163] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _clang_cond_keys: [i8 ; 163] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _clang_cond_targs: [i8 ; 163] = [ 1, 12, 9, 1, 0, 2, 12, 3, 2, 0, 2, 2, 0, 4, 5, 4, 0, 4, 5, 10, 4, 0, 10, 6, 0, 15, 0, 18, 18, 18, 0, 1, 1, 0, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 4, 1, 2, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 , 0 ];
static _clang_cond_actions: [i8 ; 163] = [ 19, 0, 0, 1, 0, 19, 0, 0, 1, 0, 19, 1, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 1, 0, 22, 22, 22, 0, 19, 1, 0, 5, 3, 3, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 0, 58, 55, 55, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 17, 34, 31, 31, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 9, 58, 0, 55, 55, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 17, 46, 43, 43, 1, 73, 73, 0, 73, 1, 73, 73, 73, 73, 73, 13, 40, 37, 37, 69, 69, 69, 1, 69, 69, 69, 69, 69, 11, 28, 25, 25, 61, 1, 61, 1, 61, 1, 61, 1, 61, 7, 46, 43, 43, 1, 73, 73, 73, 1, 73, 73, 73, 73, 73, 13, 52, 49, 49, 77, 77, 77, 1, 77, 1, 77, 77, 1, 77, 77, 15, 0 , 0 ];
static _clang_eof_actions: [i8 ; 21] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 9, 17, 13, 11, 7, 13, 15, 0 , 0 ];
static _clang_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _clang_nfa_offsets: [i8 ; 21] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _clang_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _clang_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static clang_start : i32 = 10;
static clang_first_final : i32 = 10;
static clang_error : i32 = 0;
static clang_en_main : i32 = 10;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	pos = 0;
	line = 1;
	
	
	{
		cs = ( clang_start ) as i32;
	}
	
	{
		let mut _klen = 0;
		let mut _trans  = 0;
		let mut _cond  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _ckeys :i32 = 0;
		let mut _cpc = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _have == 0  ) {
								{
									let mut __acts :i32 = 0;
									let mut __nacts = 0;
									__acts = ( _clang_eof_actions[(cs) as usize] ) as i32;
									__nacts = ( _clang_actions[(__acts ) as usize]
									) as u32;
									__acts += 1;
									while ( __nacts > 0  )
									{
										match ( _clang_actions[(__acts ) as usize]
										) {
											3  => {
												{print!( "{}", "ident(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											4  => {
												{print!( "{}", "literal(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											5  => {
												{print!( "{}", "float(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											6  => {
												{print!( "{}", "int(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											7  => {
												{print!( "{}", "hex(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											8  => {
												{print!( "{}", "symbol(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											
											_ => {}
										}
										__nacts -= 1;
										__acts += 1;
									}
									
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( _clang_key_offsets[(cs) as usize] ) as i32;
							_trans = ( _clang_index_offsets[(cs) as usize] ) as u32;
							_have = 0;
							_klen = ( _clang_single_lengths[(cs) as usize] ) as i32;
							if ( _klen > 0  ) {
								{
									let mut _lower :i32 = 0;
									let mut _mid :i32 = 0;
									let mut _upper :i32 = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
									{
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( ( data[(p ) as usize]
										) < _clang_trans_keys[(_mid ) as usize]
										) {
											_upper = _mid - 1;
											
										}
										else if ( ( data[(p ) as usize]
										) > _clang_trans_keys[(_mid ) as usize]
										) {
											_lower = _mid + 1;
											
										}
										else {
											{
												_trans += ( (_mid - _keys) ) as u32;
												_have = 1;
											}
											
										}
									}
									
									if ( _have == 0  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
										}
										
									}
								}
								
								
							}
							if ( _have == 0  ) {
								{
									_klen = ( _clang_range_lengths[(cs) as usize] ) as i32;
									if ( _klen > 0  ) {
										{
											let mut _lower :i32 = 0;
											let mut _mid :i32 = 0;
											let mut _upper :i32 = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
											{
												_mid = _lower + (((_upper-_lower) >> 1) & !1
												);
												if ( ( data[(p ) as usize]
												) < _clang_trans_keys[(_mid ) as usize]
												) {
													_upper = _mid - 2;
													
												}
												else if ( ( data[(p ) as usize]
												) > _clang_trans_keys[(_mid + 1 ) as usize]
												) {
													_lower = _mid + 2;
													
												}
												else {
													{
														_trans += ( ((_mid - _keys)>>1) ) as u32;
														_have = 1;
													}
													
												}
											}
											
											if ( _have == 0  ) {
												_trans += ( _klen ) as u32;
												
											}
										}
										
									}
								}
								
								
							}
							_ckeys = ( _clang_trans_offsets[(_trans) as usize] ) as i32;
							_klen = ( _clang_trans_lengths[(_trans) as usize] ) as i32;
							_cond = ( _clang_trans_offsets[(_trans) as usize] ) as u32;
							_have = 0;
							_cpc = 0;
							{
								let mut _lower :i32 = 0;
								let mut _mid :i32 = 0;
								let mut _upper :i32 = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < ( _clang_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_upper = _mid - 1;
										
									}
									else if ( _cpc > ( _clang_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_lower = _mid + 1;
										
									}
									else {
										{
											_cond += ( (_mid - _ckeys) ) as u32;
											_have = 1;
										}
										
									}
								}
								
								if ( _have == 0  ) {
									{
										cs = 0;
										_cont = 0;
									}
									
								}
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _clang_cond_targs[(_cond) as usize] ) as i32;
							if ( _clang_cond_actions[(_cond) as usize]!= 0  ) {
								{
									_acts = ( _clang_cond_actions[(_cond) as usize] ) as i32;
									_nacts = ( _clang_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _clang_actions[(_acts ) as usize]
										) {
											0  => {
												{buffer.push( ( (( data[(p ) as usize]
													)) ) as char );
												}
												
											}
											1  => {
												{buffer = String::new();
												}
												
											}
											2  => {
												{line = line + 1;
												}
												
											}
											3  => {
												{print!( "{}", "ident(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											4  => {
												{print!( "{}", "literal(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											5  => {
												{print!( "{}", "float(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											6  => {
												{print!( "{}", "int(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											7  => {
												{print!( "{}", "hex(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											8  => {
												{print!( "{}", "symbol(" );
													print!( "{}", line );
													print!( "{}", "," );
													print!( "{}", buffer.len() );
													print!( "{}", "): " );
													print!( "{}", buffer );
													print!( "{}", "\n" );
												}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
						
					}
				}
				
			}
		}
		
	}
	if ( cs >= clang_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "999 0xaAFF99 99.99 /!\n!/ 'lksdj' //\n\"\n\nliteral\n\n\n\"0x00aba foobardd.ddsf 0x0.9\n".to_string() ); }
	unsafe { m( "wordwithnum00asdf\n000wordfollowsnum,makes new symbol\n\nfinishing early /! unfinished ...\n".to_string() ); }
}

