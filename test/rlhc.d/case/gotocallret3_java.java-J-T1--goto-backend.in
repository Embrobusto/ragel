host( "working/gotocallret3_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class gotocallret3_java
	{
		char comm ;
		int top ;
		int stack [] = new int[32];
		
		
		
		
		
	}@
	array s8 _gotocallret_key_offsets( 0, 18 ) = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 };
	
	array char _gotocallret_trans_keys( 0, 122 ) = { u(32), u(10), u(10), u(10), u(65), u(90), u(97), u(122), u(48), u(57), u(48), u(57), u(97), u(122), u(65), u(90), u(97), u(122), u(48), u(57), u(0) };
	
	array s8 _gotocallret_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _gotocallret_range_lengths( 0, 2 ) = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 };
	
	array s8 _gotocallret_index_offsets( 0, 20 ) = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 };
	
	array s8 _gotocallret_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _gotocallret_trans_offsets( 0, 21 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 };
	
	array s8 _gotocallret_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _gotocallret_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _gotocallret_cond_targs( 0, 10 ) = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 };
	
	array s8 _gotocallret_cond_actions( 0, 9 ) = { 2, 1, 3, 1, 6, 5, 7, 0, 0, 0, 8, 0, 8, 9, 9, 1, 0, 0, 0, 8, 0, 8, 0 };
	
	array s8 _gotocallret_eof_actions( 0, 8 ) = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 };
	
	array s8 _gotocallret_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _gotocallret_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _gotocallret_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _gotocallret_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int gotocallret_start = 7;
	value int gotocallret_first_final = 7;
	value int gotocallret_error = 0;
	
	value int gotocallret_en_garble_line = 3;
	value int gotocallret_en_alp_comm = 5;
	value int gotocallret_en_dig_comm = 6;
	value int gotocallret_en_main = 7;
	
	host( "working/gotocallret3_java.rl", 66 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)gotocallret_start;
			top = 0;
		}
		host( "working/gotocallret3_java.rl", 71 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			int eof = len;
			String _s;
		}@
		{
			int _klen;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			uint _trans = 0;
			uint _cond = 0;
			entry {
				
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume { 
					_keys = offset( _gotocallret_trans_keys, _gotocallret_key_offsets[cs] );
					_trans = cast(uint)_gotocallret_index_offsets[cs];
					
					_klen = cast(int)_gotocallret_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								goto _match;
							}
						}
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
					
					_klen = cast(int)_gotocallret_range_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								goto _match;
							}
						}
						_trans += cast(uint)_klen;
					}
					
				}
				label _match {
					_ckeys = offset( _gotocallret_cond_keys, _gotocallret_trans_offsets[_trans] );
					_klen = cast(int)_gotocallret_trans_lengths[_trans];
					_cond = cast(uint)_gotocallret_trans_offsets[_trans];
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _gotocallret_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _gotocallret_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								goto _match_cond;
							}
						}
						cs = 0;
						goto _again;
					}
				}
				label _match_cond {
					cs = cast(int)_gotocallret_cond_targs[_cond];
					
					if ( _gotocallret_cond_actions[_cond] == 0 )
					goto _again;
					
					switch ( _gotocallret_cond_actions[_cond] ) {
						case 5 {
							host( "working/gotocallret3_java.rl", 20 ) ${System.out.print( "error: garbling line\n" );
							}$
						}
						case 7 {
							host( "working/gotocallret3_java.rl", 22 ) ${${cs = 7;}$}$
						}
						case 8 {
							host( "working/gotocallret3_java.rl", 33 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
						}
						case 9 {
							host( "working/gotocallret3_java.rl", 52 ) ${comm = ={( deref( data, p ))}=;
							}$
						}
						case 3 {
							host( "working/gotocallret3_java.rl", 55 ) ${System.out.print( "correct command\n" );
							}$
						}
						case 1 {
							host( "working/gotocallret3_java.rl", 60 ) ${${p = p - 1; }$${cs = 3;}$}$
						}
						case 6 {
							host( "working/gotocallret3_java.rl", 20 ) ${System.out.print( "error: garbling line\n" );
							}$
							host( "working/gotocallret3_java.rl", 22 ) ${${cs = 7;}$}$
						}
						case 2 {
							host( "working/gotocallret3_java.rl", 41 ) ${if ( comm >= 97 )
								{
									${stack[top] = cs; top += 1;cs = 5; }$} 
								else {
									${stack[top] = cs; top += 1;cs = 6; }$}
							}$
							host( "working/gotocallret3_java.rl", 53 ) ${System.out.print( "prints\n" );
							}$
						}
					}
					
					
				}
				label _again {
					if ( cs == 0 )
					goto _out;
					p += 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
					if ( p == eof )
					{
						switch ( _gotocallret_eof_actions[cs] ) {
							case 4 {
								host( "working/gotocallret3_java.rl", 23 ) ${System.out.print( "error: failed to recover\n" );
								}$
							}
							case 8 {
								host( "working/gotocallret3_java.rl", 33 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
							}
							case 1 {
								host( "working/gotocallret3_java.rl", 60 ) ${${p = p - 1; }$${cs = 3;}$}$
							}
						}
					}
					
				}
				label _out { {}
				}
			}
		}
		host( "working/gotocallret3_java.rl", 83 ) @{
		}
		
		void finish( )
		{
			if ( cs >= gotocallret_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"lkajsdf\n",
			"2134\n",
			"(\n",
			"\n",
			"*234234()0909 092 -234aslkf09`1 11\n",
			"1\n",
			"909\n",
			"1 a\n",
			"11 1\n",
			"a 1\n",
			"aa a\n",
			"1 1\n",
			"1 123456\n",
			"a a\n",
			"a abcdef\n",
			"h",
			"a aa1",
		};
		
		static final int inplen = 17;
		
		public static void main (String[] args)
		{
			gotocallret3_java machine = new gotocallret3_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@