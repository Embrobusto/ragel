host( "working/recdescent4.rl", 1 ) @{/*
	* @@LANG: c
	*
	* Test growable stack.
	*/
	
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	
	
}@
array s8 _recdescent_key_offsets( 0, 25 ) = { 0, 0, 1, 13, 25, 0 };

array char _recdescent_trans_keys( 0, 125 ) = { 125, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 32, 95, 123, 125, 9, 10, 48, 57, 65, 90, 97, 122, 0 };

array s8 _recdescent_single_lengths( 0, 4 ) = { 0, 1, 4, 4, 4, 0 };

array s8 _recdescent_range_lengths( 0, 4 ) = { 0, 0, 4, 4, 4, 0 };

array s8 _recdescent_index_offsets( 0, 20 ) = { 0, 0, 2, 11, 20, 0 };

array s8 _recdescent_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _recdescent_trans_offsets( 0, 28 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 };

array s8 _recdescent_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _recdescent_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _recdescent_cond_targs( 0, 4 ) = { 2, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 0 };

array s8 _recdescent_cond_actions( 0, 7 ) = { 0, 0, 0, 1, 2, 3, 0, 1, 1, 1, 0, 4, 5, 6, 7, 4, 0, 5, 5, 0, 4, 0, 6, 7, 4, 5, 0, 0, 0, 0 };

array s8 _recdescent_eof_actions( 0, 4 ) = { 0, 0, 0, 4, 4, 0 };

array s8 _recdescent_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _recdescent_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _recdescent_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _recdescent_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int recdescent_start = 2;
value int recdescent_first_final = 2;
value int recdescent_error = 0;

value int recdescent_en_main = 2;

host( "working/recdescent4.rl", 73 ) @{
	
	void test( char *buf )
	{
		int cs;
		int *stack;
		int top, stack_size;
		char *p, *pe, *eof, *item = 0;
		
		int len = strlen( buf );
		
	}@
	{
		cs = cast(int)recdescent_start;
		top = 0;
	}
	host( "working/recdescent4.rl", 84 ) @{
		
		stack_size = 1;
		stack = (int*)malloc( sizeof(int) * stack_size );
		
		p = buf;
		pe = buf + len;
		eof = pe;
		
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _recdescent_eof_actions[cs] ) {
							case 4 {
								host( "working/recdescent4.rl", 33 ) ${
									printf( "item: " );
									fwrite( item, 1, p-item, stdout );
									printf( "\n" );
								}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _recdescent_trans_keys, _recdescent_key_offsets[cs] );
					_trans = cast(uint)_recdescent_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_recdescent_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _recdescent_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _recdescent_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_recdescent_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _recdescent_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _recdescent_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _recdescent_cond_keys, _recdescent_trans_offsets[_trans] );
					_klen = cast(int)_recdescent_trans_lengths[_trans];
					_cond = cast(uint)_recdescent_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _recdescent_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _recdescent_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_recdescent_cond_targs[_cond];
					
					switch ( _recdescent_cond_actions[_cond] ) {
						case 1 {
							host( "working/recdescent4.rl", 30 ) ${ item = p; }$
						}
						case 4 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
						}
						case 2 {
							host( "working/recdescent4.rl", 40 ) ${
								printf( "calling main\n" );
								${host( "working/recdescent4.rl", 14 ) ${ 
										if ( top == stack_size ) {
											printf( "growing stack\n" );
											stack_size = top * 2;
											stack = (int*)realloc( stack, sizeof(int)*stack_size );
										}
									}$stack[top] = cs; top += 1;cs = 2;}$}$
						}
						case 3 {
							host( "working/recdescent4.rl", 46 ) ${
								if ( top == 0 ) {
									printf( "STRAY CLOSE\n" );
									${p+= 1; _cont = 0; }$
								}
								else {
									printf( "returning from main\n" );
									${p = p - 1; }$
									${top-= 1;cs = stack[top]; host( "working/recdescent4.rl", 22 ) ${ 
											if ( stack_size > (top * 4) ) {
												stack_size = top * 2;
												stack = (int*)realloc( stack, sizeof(int)*stack_size );
												printf( "shrinking stack\n" );
											}
										}$}$
								}
							}$
						}
						case 5 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 30 ) ${ item = p; }$
						}
						case 6 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 40 ) ${
								printf( "calling main\n" );
								${host( "working/recdescent4.rl", 14 ) ${ 
										if ( top == stack_size ) {
											printf( "growing stack\n" );
											stack_size = top * 2;
											stack = (int*)realloc( stack, sizeof(int)*stack_size );
										}
									}$stack[top] = cs; top += 1;cs = 2;}$}$
						}
						case 7 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 46 ) ${
								if ( top == 0 ) {
									printf( "STRAY CLOSE\n" );
									${p+= 1; _cont = 0; }$
								}
								else {
									printf( "returning from main\n" );
									${p = p - 1; }$
									${top-= 1;cs = stack[top]; host( "working/recdescent4.rl", 22 ) ${ 
											if ( stack_size > (top * 4) ) {
												stack_size = top * 2;
												stack = (int*)realloc( stack, sizeof(int)*stack_size );
												printf( "shrinking stack\n" );
											}
										}$}$
								}
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/recdescent4.rl", 93 ) @{
		
		if ( cs == recdescent_error ) {
			/* Machine failed before finding a token. */
			printf( "PARSE ERROR\n" );
		}
	}
	
	int main()
	{
		test( "88 foo { 99 {{{{}}}}{ } }");
		test( "76 } sadf");
	return 0;
}

}@