#
# @LANG: ruby
# @GENERATED: true
#







class << self
	attr_accessor :_rangei_trans_keys 
	private :_rangei_trans_keys, :_rangei_trans_keys=
end
self._rangei_trans_keys = [
1, 0, 1, 2, 1, 2, 0, 3, 1, 5, 1, 4, 0, 5, 1, 0, 0 , 
]

class << self
	attr_accessor :_rangei_char_class 
	private :_rangei_char_class, :_rangei_char_class=
end
self._rangei_char_class = [
0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 4, 4, 4, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 5, 5, 5, 0 , 
]

class << self
	attr_accessor :_rangei_index_offsets 
	private :_rangei_index_offsets, :_rangei_index_offsets=
end
self._rangei_index_offsets = [
0, 0, 2, 4, 8, 13, 17, 23, 0 , 
]

class << self
	attr_accessor :_rangei_indices 
	private :_rangei_indices, :_rangei_indices=
end
self._rangei_indices = [
0, 0, 2, 2, 3, 3, 3, 3, 4, 4, 1, 4, 4, 5, 1, 5, 5, 6, 6, 6, 6, 6, 6, 0 , 
]

class << self
	attr_accessor :_rangei_index_defaults 
	private :_rangei_index_defaults, :_rangei_index_defaults=
end
self._rangei_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_rangei_trans_cond_spaces 
	private :_rangei_trans_cond_spaces, :_rangei_trans_cond_spaces=
end
self._rangei_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_rangei_cond_targs 
	private :_rangei_cond_targs, :_rangei_cond_targs=
end
self._rangei_cond_targs = [
2, 0, 3, 4, 5, 6, 7, 0 , 
]

class << self
	attr_accessor :_rangei_cond_actions 
	private :_rangei_cond_actions, :_rangei_cond_actions=
end
self._rangei_cond_actions = [
0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_rangei_nfa_targs 
	private :_rangei_nfa_targs, :_rangei_nfa_targs=
end
self._rangei_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_rangei_nfa_offsets 
	private :_rangei_nfa_offsets, :_rangei_nfa_offsets=
end
self._rangei_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_rangei_nfa_push_actions 
	private :_rangei_nfa_push_actions, :_rangei_nfa_push_actions=
end
self._rangei_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_rangei_nfa_pop_trans 
	private :_rangei_nfa_pop_trans, :_rangei_nfa_pop_trans=
end
self._rangei_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :rangei_start 
end
self.rangei_start  = 1;

class << self
	attr_accessor :rangei_first_final 
end
self.rangei_first_final  = 7;

class << self
	attr_accessor :rangei_error 
end
self.rangei_error  = 0;

class << self
	attr_accessor :rangei_en_main 
end
self.rangei_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	begin
		cs = rangei_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _rangei_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 125 && ( data[p ].ord) >= 60  )
									begin
										_ic = _rangei_char_class[( data[p ].ord) - 60];
										if ( _ic <= _rangei_trans_keys[_keys+1 ]&& _ic >= _rangei_trans_keys[_keys ] )
											_trans = _rangei_indices[_inds + ( _ic - _rangei_trans_keys[_keys ])  ];
											
											else
											_trans = _rangei_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _rangei_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _rangei_cond_targs[_trans];
								if ( cs == 0  )
									_cont = 0;
									
								end
								if ( _cont == 1  )
									p += 1;
									
								end
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	if cs >= rangei_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
	end
end

inp = [
"AaBbAa",
"Aa`bAa",
"AaB@Aa",
"AaBbMa",
"AaBbma",
]

inplen = 5

inp.each { |str| run_machine(str) }

