host( "working/gotocallret2_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var comm  byte ;
	var top  int ;
	var stack [32] int ;
	var ts  int ;
	var te  int ;
	var act  int ;
	var val  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _GotoCallRet_trans_keys( 0, 11 ) = { u(1), u(0), u(6), u(6), u(9), u(9), u(7), u(7), u(8), u(8), u(1), u(0), u(0), u(10), u(2), u(9), u(5), u(9), u(1), u(0), u(2), u(11), u(5), u(9), u(2), u(2), u(2), u(10), u(2), u(2), u(5), u(9), u(0) };

array s8 _GotoCallRet_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 4, 1, 1, 1, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 8, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 1, 11, 0 };

array s8 _GotoCallRet_index_offsets( 0, 54 ) = { 0, 0, 1, 2, 3, 4, 4, 15, 23, 28, 28, 38, 43, 44, 53, 54, 0 };

array s8 _GotoCallRet_indices( 0, 26 ) = { 1, 2, 3, 4, 6, 7, 8, 9, 7, 10, 10, 10, 10, 10, 11, 13, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 7, 17, 17, 17, 17, 17, 18, 19, 17, 17, 17, 17, 17, 19, 22, 23, 24, 25, 25, 25, 25, 25, 26, 24, 25, 25, 25, 25, 25, 0 };

array s8 _GotoCallRet_index_defaults( 0, 28 ) = { 0, 0, 0, 0, 0, 5, 7, 12, 12, 7, 7, 20, 21, 7, 27, 28, 0 };

array s8 _GotoCallRet_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _GotoCallRet_cond_targs( 0, 15 ) = { 6, 2, 3, 4, 6, 9, 6, 0, 6, 6, 7, 6, 6, 1, 8, 10, 10, 11, 10, 12, 10, 10, 13, 13, 14, 15, 13, 13, 13, 0 };

array s8 _GotoCallRet_cond_actions( 0, 21 ) = { 1, 0, 0, 0, 2, 4, 6, 0, 7, 8, 9, 10, 11, 0, 0, 12, 13, 0, 14, 0, 15, 16, 17, 18, 0, 0, 19, 20, 21, 0 };

array s8 _GotoCallRet_to_state_actions( 0, 3 ) = { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0 };

array s8 _GotoCallRet_from_state_actions( 0, 5 ) = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0 };

array s8 _GotoCallRet_eof_trans( 0, 29 ) = { 0, 1, 1, 1, 1, 0, 0, 13, 13, 0, 0, 21, 22, 0, 28, 29, 0 };

array s8 _GotoCallRet_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _GotoCallRet_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int GotoCallRet_start = 6;
value int GotoCallRet_first_final = 6;
value int GotoCallRet_error = 0;

value int GotoCallRet_en_handle = 5;
value int GotoCallRet_en_one = 10;
value int GotoCallRet_en_two = 13;
value int GotoCallRet_en_main = 6;

host( "working/gotocallret2_go.rl", 84 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)GotoCallRet_start;
		top = 0;
		ts = nil;
		te = nil;
	}
	host( "working/gotocallret2_go.rl", 87 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		int _trans = 0;
		index byte _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				switch ( _GotoCallRet_from_state_actions[cs] ) {
					case 5 {
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				
				_keys = offset( _GotoCallRet_trans_keys, (cs<<1) );
				_inds = offset( _GotoCallRet_indices, _GotoCallRet_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 125 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_GotoCallRet_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _GotoCallRet_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _GotoCallRet_trans_keys, _keys ) )
					_trans = cast(int)deref( _GotoCallRet_indices, _inds + cast(int)( _ic - cast(int)deref( _GotoCallRet_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_GotoCallRet_index_defaults[cs];
				}
				else {
					_trans = cast(int)_GotoCallRet_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_GotoCallRet_cond_targs[_trans];
				
				if ( _GotoCallRet_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _GotoCallRet_cond_actions[_trans] ) {
					case 4 {
						host( "working/gotocallret2_go.rl", 22 ) ${fmt.Print( "handle " );${p = p - 1; }$ 
							
							if ( val == 1 ) {
								${cs = host( "-", 1 ) ={10}=;}$ 
								
							}
							if ( val == 2 ) {
								${cs = host( "-", 1 ) ={13}=;}$ 
								
							}
							if ( val == 3 ) {
								${cs = 6;}$}
						}$
					}
					case 9 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					}
					case 14 {
						host( "working/gotocallret2_go.rl", 39 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 39 ) ${fmt.Print( "{ " );${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={10}=; goto _again;}$ 
									}$}$}$
						}
						case 13 {
							host( "working/gotocallret2_go.rl", 41 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 41 ) ${fmt.Print( "[ " );${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={13}=; goto _again;}$ 
									}$}$}$
						}
						case 12 {
							host( "working/gotocallret2_go.rl", 48 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 48 ) ${fmt.Print( "space " );}$}$}$
						}
						case 16 {
							host( "working/gotocallret2_go.rl", 43 ) ${${te = p;p = p - 1;host( "working/gotocallret2_go.rl", 43 ) ${fmt.Print( "} " );${top -= 1;cs = stack[top];goto _again;}$ 
								}$}$}$
					}
					case 15 {
						host( "working/gotocallret2_go.rl", 45 ) ${${te = p;p = p - 1;host( "working/gotocallret2_go.rl", 45 ) ${fmt.Print( "word " );val = 1;
									${cs = host( "-", 1 ) ={5}=; goto _again;}$ 
								}$}$}$
					}
					case 19 {
						host( "working/gotocallret2_go.rl", 52 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 52 ) ${fmt.Print( "{ " );${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={10}=; goto _again;}$ 
									}$}$}$
						}
						case 18 {
							host( "working/gotocallret2_go.rl", 54 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 54 ) ${fmt.Print( "[ " );${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={13}=; goto _again;}$ 
									}$}$}$
						}
						case 17 {
							host( "working/gotocallret2_go.rl", 61 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 61 ) ${fmt.Print( "space " );}$}$}$
						}
						case 20 {
							host( "working/gotocallret2_go.rl", 56 ) ${${te = p;p = p - 1;host( "working/gotocallret2_go.rl", 56 ) ${fmt.Print( "] " );${top -= 1;cs = stack[top];goto _again;}$ 
									}$}$}$
						}
						case 21 {
							host( "working/gotocallret2_go.rl", 58 ) ${${te = p;p = p - 1;host( "working/gotocallret2_go.rl", 58 ) ${fmt.Print( "word " );val = 2;
										${cs = host( "-", 1 ) ={5}=; goto _again;}$ 
									}$}$}$
						}
						case 10 {
							host( "working/gotocallret2_go.rl", 65 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 65 ) ${fmt.Print( "{ " );${stack[top] = cs; top += 1;cs = 10; goto _again;}$}$}$}$
							}
							case 8 {
								host( "working/gotocallret2_go.rl", 67 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 67 ) ${fmt.Print( "[ " );${stack[top] = cs; top += 1;cs = 13; goto _again;}$}$}$}$
							}
							case 2 {
								host( "working/gotocallret2_go.rl", 72 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 72 ) ${fmt.Print( "this is the foil" );}$}$}$
							}
							case 7 {
								host( "working/gotocallret2_go.rl", 73 ) ${${te = p+1;host( "working/gotocallret2_go.rl", 73 ) ${fmt.Print( "space " );}$}$}$
							}
							case 6 {
								host( "working/gotocallret2_go.rl", 74 ) ${${te = p+1;}$}$
							}
							case 11 {
								host( "working/gotocallret2_go.rl", 69 ) ${${te = p;p = p - 1;host( "working/gotocallret2_go.rl", 69 ) ${fmt.Print( "word " );val = 3;
											${cs = 5; goto _again;}$}$}$}$
							}
							case 1 {
								host( "working/gotocallret2_go.rl", 69 ) ${${p = ((te))-1;
										host( "working/gotocallret2_go.rl", 69 ) ${fmt.Print( "word " );val = 3;
											${cs = 5; goto _again;}$}$}$}$
							}
						}
						
						
					}
					label _again {
						switch ( _GotoCallRet_to_state_actions[cs] ) {
							case 3 {
								host( "NONE", 1 ) ${${ts = nil;}$}$
							}
						}
						
						if ( cs == 0 )
						goto _out;
						p+= 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
						if ( p == eof )
						{
							if ( _GotoCallRet_eof_trans[cs] > 0 ) {
								_trans = cast(int)_GotoCallRet_eof_trans[cs] - 1;
								goto _match_cond;
							}
						}
						
					}
					label _out { {}
					}
				}
			}
			host( "working/gotocallret2_go.rl", 94 ) @{
			}
			func finish() {
				if cs >= GotoCallRet_first_final {
					fmt.Println("ACCEPT")
				} else {
					fmt.Println("FAIL")
				}
			}
			var inp []string = []string {
				"{a{b[c d]d}c}\n",
				"[a{b[c d]d}c}\n",
			"[a[b]c]d{ef{g{h}i}j}l\n",
			"{{[]}}\n",
			"a b c\n",
			"{a b c}\n",
			"[a b c]\n",
			"{]\n",
				"{{}\n",
					"[[[[[[]]]]]]\n",
					"[[[[[[]]}]]]\n",
			};
			
			func main() {
				for _, data := range inp {
					prepare()
					exec(data)
					finish()
				}
			}
		}@