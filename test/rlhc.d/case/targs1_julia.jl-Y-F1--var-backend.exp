const _targs1_trans_keys = UInt8[1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0 , ]
const _targs1_char_class = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 , ]
const _targs1_index_offsets = Int8[0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 , ]
const _targs1_indices = Int8[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 , ]
const _targs1_index_defaults = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _targs1_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _targs1_cond_targs = Int8[2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 , ]
const _targs1_cond_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 4, 0 , ]
const _targs1_nfa_targs = Int8[0, 0 , ]
const _targs1_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _targs1_nfa_push_actions = Int8[0, 0 , ]
const _targs1_nfa_pop_trans = Int8[0, 0 , ]
const targs1_start  = 13
const targs1_first_final  = 13
const targs1_error  = 0
const targs1_en_unused  = 1
const targs1_en_one  = 7
const targs1_en_two  = 10
const targs1_en_main  = 13
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	return_to = 0;
	
	cs = convert(Int, targs1_start )
	_trans = 0;
	_have = 0;
	_cont = 1;
	_keys = 0;
	_inds = 0;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = (cs<<1)
				_inds = _targs1_index_offsets[1+(cs)]
				if (data[1+(p )])<= 119 && (data[1+(p )])>= 10 
					_ic = convert(Int, _targs1_char_class[1+(convert(Int, (data[1+(p )]) )- 10)] );
					if _ic <= convert(Int, _targs1_trans_keys[1+(_keys+1 )] )&& _ic >= convert(Int, _targs1_trans_keys[1+(_keys )] )
						_trans = convert(UInt, _targs1_indices[1+(_inds + convert(Int, (_ic - convert(Int, _targs1_trans_keys[1+(_keys )] )) ))] )
						
					else
						_trans = convert(UInt, _targs1_index_defaults[1+(cs)] )
						
					end
					
				else
					_trans = convert(UInt, _targs1_index_defaults[1+(cs)] )
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _targs1_cond_targs[1+(_trans)] )
				if _targs1_cond_actions[1+(_trans)] == 1 
					print( "one\n" );
					{
						cs = (return_to)
						
					}
					
				elseif _targs1_cond_actions[1+(_trans)] == 2 
					print( "two\n" );
					{
						cs = (return_to)
						
					}
					
				elseif _targs1_cond_actions[1+(_trans)] == 3 
					return_to = (cs);
					{
						cs = 7
						
					}
					
				elseif _targs1_cond_actions[1+(_trans)] == 4 
					return_to = (cs);
					{
						cs = 10
						
					}
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= targs1_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "1one2two1one\n" );
