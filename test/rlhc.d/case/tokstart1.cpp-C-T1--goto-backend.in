host( "working/tokstart1.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using namespace std;
	
	extern char buf[];
	
	struct Scanner
	{
		int cs, act;
		char *ts, *te;
		
		// Initialize the machine. Invokes any init statement blocks. Returns 0
		// if the machine begins in a non-accepting state and 1 if the machine
		// begins in an accepting state.
		void init( );
		
		// Execute the machine on a block of data. Returns -1 if after processing
		// the data, the machine is in the error state and can never accept, 0 if
		// the machine is in a non-accepting state and 1 if the machine is in an
		// accepting state.
		int execute( char *data, int len );
		
		// Indicate that there is no more data. Returns -1 if the machine finishes
		// in the error state and does not accept, 0 if the machine finishes
		// in any other non-accepting state and 1 if the machine finishes in an
		// accepting state.
		int finish( );
	};
	
	
	
}@
array s16 _Scanner_key_offsets( 0, 135 ) = { 0, 0, 3, 3, 6, 6, 7, 11, 13, 19, 20, 22, 23, 44, 46, 49, 57, 63, 65, 75, 84, 88, 92, 96, 106, 110, 119, 126, 135, 135, 0 };

array char _Scanner_trans_keys( 0, 126 ) = { 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 42, 42, 47, 10, 34, 39, 46, 47, 48, 76, 95, 33, 45, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 42, 47, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 76, 85, 108, 117, 76, 85, 108, 117, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 76, 85, 108, 117, 46, 69, 76, 85, 101, 108, 117, 48, 57, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 0 };

array s8 _Scanner_single_lengths( 0, 8 ) = { 0, 3, 0, 3, 0, 1, 2, 0, 0, 1, 2, 1, 7, 0, 1, 6, 4, 2, 8, 7, 4, 4, 4, 4, 4, 7, 1, 3, 0, 0, 0 };

array s8 _Scanner_range_lengths( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 0, 0, 7, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 1, 3, 3, 0, 0, 0 };

array s16 _Scanner_index_offsets( 0, 135 ) = { 0, 0, 4, 5, 9, 10, 12, 16, 18, 22, 24, 27, 29, 44, 46, 49, 57, 63, 66, 76, 85, 90, 95, 100, 108, 113, 122, 127, 134, 135, 0 };

array s8 _Scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s16 _Scanner_trans_offsets( 0, 158 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 0 };

array s8 _Scanner_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Scanner_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Scanner_cond_targs( 0, 29 ) = { 12, 12, 2, 1, 1, 12, 12, 4, 3, 3, 12, 12, 7, 7, 16, 12, 16, 12, 23, 23, 23, 12, 10, 9, 10, 28, 9, 29, 11, 1, 3, 14, 17, 18, 27, 26, 12, 25, 12, 26, 12, 26, 12, 13, 12, 13, 5, 15, 12, 6, 12, 12, 6, 12, 12, 15, 12, 12, 12, 12, 12, 16, 12, 12, 12, 12, 15, 6, 21, 21, 6, 21, 21, 8, 19, 12, 15, 6, 20, 20, 6, 20, 20, 19, 12, 12, 12, 12, 12, 12, 22, 22, 22, 22, 12, 12, 12, 12, 12, 12, 24, 24, 24, 24, 23, 23, 23, 12, 12, 12, 12, 12, 12, 15, 6, 21, 21, 6, 21, 21, 25, 12, 26, 26, 26, 26, 12, 1, 3, 26, 26, 26, 26, 12, 0, 0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 0 };

array s8 _Scanner_cond_actions( 0, 32 ) = { 3, 4, 0, 0, 0, 3, 5, 0, 0, 0, 7, 6, 0, 0, 0, 3, 0, 3, 0, 0, 0, 8, 0, 0, 0, 10, 0, 11, 0, 0, 0, 15, 0, 16, 17, 0, 14, 16, 14, 0, 14, 0, 14, 0, 18, 0, 0, 20, 19, 0, 22, 22, 0, 22, 22, 20, 21, 22, 22, 22, 22, 0, 21, 23, 24, 19, 20, 0, 0, 0, 0, 0, 0, 0, 26, 25, 20, 0, 0, 0, 0, 0, 0, 26, 27, 28, 28, 28, 28, 27, 0, 0, 0, 0, 25, 29, 29, 29, 29, 25, 0, 0, 0, 0, 0, 0, 0, 30, 31, 31, 31, 31, 30, 20, 0, 0, 0, 0, 0, 0, 16, 25, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 32, 0, 0, 3, 3, 3, 3, 6, 3, 3, 8, 18, 19, 21, 21, 19, 25, 27, 27, 25, 25, 30, 30, 25, 32, 32, 0 };

array s8 _Scanner_to_state_actions( 0, 12 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 1, 9, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Scanner_from_state_actions( 0, 13 ) = { 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

array s8 _Scanner_eof_trans_indexed( 0, 32 ) = { 0, 13, 13, 13, 13, 16, 13, 13, 18, 0, 0, 0, 0, 20, 21, 22, 22, 21, 26, 27, 27, 26, 26, 30, 30, 26, 32, 32, 0, 0, 0 };

array s16 _Scanner_eof_trans_direct( 0, 159 ) = { 0, 137, 138, 139, 140, 141, 142, 143, 144, 0, 0, 0, 0, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 0, 0, 0 };

array s8 _Scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Scanner_start = 12;
value int Scanner_first_final = 12;
value int Scanner_error = 0;

value int Scanner_en_c_comm = 9;
value int Scanner_en_cxx_comm = 11;
value int Scanner_en_main = 12;

host( "working/tokstart1.rl", 99 ) @{
	
	void Scanner::init( )
	{
	}@
	{
		cs = cast(int)Scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/tokstart1.rl", 103 ) @{
	}
	
	int Scanner::execute( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
		
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				switch ( _Scanner_from_state_actions[cs] ) {
					case 2 {
						host( "working/tokstart1.rl", 45 ) ${
							cout << "from: fc = ";
							if ( ={( deref( data, p ))}= == '\'' )
							cout << (int)={( deref( data, p ))}=;
							else
							cout << ={( deref( data, p ))}=;
							cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
						}$
					}
					case 13 {
						host( "NONE", 1 ) ${${ts = p;}$}$
						host( "working/tokstart1.rl", 45 ) ${
							cout << "from: fc = ";
							if ( ={( deref( data, p ))}= == '\'' )
							cout << (int)={( deref( data, p ))}=;
							else
							cout << ={( deref( data, p ))}=;
							cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
						}$
					}
				}
				
				_keys = offset( _Scanner_trans_keys, _Scanner_key_offsets[cs] );
				_trans = cast(uint)_Scanner_index_offsets[cs];
				
				_klen = cast(int)_Scanner_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _Scanner_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _Scanner_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_Scanner_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _Scanner_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _Scanner_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _Scanner_cond_keys, _Scanner_trans_offsets[_trans] );
				_klen = cast(int)_Scanner_trans_lengths[_trans];
				_cond = cast(uint)_Scanner_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _Scanner_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _Scanner_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_Scanner_cond_targs[_cond];
				
				if ( _Scanner_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _Scanner_cond_actions[_cond] ) {
					case 10 {
						host( "working/tokstart1.rl", 54 ) ${ ${cs = 12; goto _again;}$}$
					}
					case 11 {
						host( "working/tokstart1.rl", 55 ) ${ ${cs = 12; goto _again;}$}$
					}
					case 15 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					}
					case 5 {
						host( "working/tokstart1.rl", 60 ) ${${te = p+1;}$}$
					}
					case 4 {
						host( "working/tokstart1.rl", 61 ) ${${te = p+1;}$}$
					}
					case 22 {
						host( "working/tokstart1.rl", 71 ) ${${te = p+1;}$}$
					}
					case 29 {
						host( "working/tokstart1.rl", 75 ) ${${te = p+1;}$}$
					}
					case 28 {
						host( "working/tokstart1.rl", 78 ) ${${te = p+1;}$}$
					}
					case 31 {
						host( "working/tokstart1.rl", 81 ) ${${te = p+1;}$}$
					}
					case 7 {
						host( "working/tokstart1.rl", 84 ) ${${te = p+1;}$}$
					}
					case 14 {
						host( "working/tokstart1.rl", 87 ) ${${te = p+1;}$}$
					}
					case 23 {
						host( "working/tokstart1.rl", 90 ) ${${te = p+1;host( "working/tokstart1.rl", 90 ) ${ ${cs = 9; goto _again;}$}$}$}$
					}
					case 24 {
						host( "working/tokstart1.rl", 91 ) ${${te = p+1;host( "working/tokstart1.rl", 91 ) ${ ${cs = 11; goto _again;}$}$}$}$
					}
					case 32 {
						host( "working/tokstart1.rl", 64 ) ${${te = p;p = p - 1;}$}$
					}
					case 21 {
						host( "working/tokstart1.rl", 71 ) ${${te = p;p = p - 1;}$}$
					}
					case 25 {
						host( "working/tokstart1.rl", 75 ) ${${te = p;p = p - 1;}$}$
					}
					case 27 {
						host( "working/tokstart1.rl", 78 ) ${${te = p;p = p - 1;}$}$
					}
					case 30 {
						host( "working/tokstart1.rl", 81 ) ${${te = p;p = p - 1;}$}$
					}
					case 19 {
						host( "working/tokstart1.rl", 87 ) ${${te = p;p = p - 1;}$}$
					}
					case 18 {
						host( "working/tokstart1.rl", 93 ) ${${te = p;p = p - 1;}$}$
					}
					case 8 {
						host( "working/tokstart1.rl", 75 ) ${${p = ((te))-1;
							}$}$
					}
					case 6 {
						host( "working/tokstart1.rl", 87 ) ${${p = ((te))-1;
							}$}$
					}
					case 3 {
						host( "NONE", 1 ) ${${switch( act ) {
									case 0 {
										host( "NONE", 1 ) ${${cs = 0; goto _again;}$}$ }
									default {
										p = ((te))-1;
									}
								}}$
						}$
					}
					case 17 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/tokstart1.rl", 64 ) ${${act = 3;}$}$
					}
					case 20 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/tokstart1.rl", 71 ) ${${act = 4;}$}$
					}
					case 16 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/tokstart1.rl", 75 ) ${${act = 5;}$}$
					}
					case 26 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/tokstart1.rl", 78 ) ${${act = 6;}$}$
					}
				}
				
				
			}
			label _again {
				switch ( _Scanner_to_state_actions[cs] ) {
					case 1 {
						host( "working/tokstart1.rl", 37 ) ${ 
							cout << "to:   fc = ";
							if ( ={( deref( data, p ))}= == '\'' )
							cout << (int)={( deref( data, p ))}=;
							else
							cout << ={( deref( data, p ))}=;
							cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
						}$
					}
					case 9 {
						host( "NONE", 1 ) ${${ts = nil;}$}$
						host( "working/tokstart1.rl", 37 ) ${ 
							cout << "to:   fc = ";
							if ( ={( deref( data, p ))}= == '\'' )
							cout << (int)={( deref( data, p ))}=;
							else
							cout << ={( deref( data, p ))}=;
							cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
						}$
					}
					case 12 {
						host( "NONE", 1 ) ${${ts = nil;}$}$
						host( "NONE", 1 ) ${${act = 0;}$}$
						host( "working/tokstart1.rl", 37 ) ${ 
							cout << "to:   fc = ";
							if ( ={( deref( data, p ))}= == '\'' )
							cout << (int)={( deref( data, p ))}=;
							else
							cout << ={( deref( data, p ))}=;
							cout << " ts = " << ( ts == 0 ? -1 : ts-buf ) << endl;
						}$
					}
				}
				
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					if ( _Scanner_eof_trans_direct[cs] > 0 ) {
						_trans = cast(uint)_Scanner_eof_trans_direct[cs] - 1;
						_cond = cast(uint)_Scanner_trans_offsets[_trans];
						goto _match_cond;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/tokstart1.rl", 112 ) @{
		
		return 0;
	}
	
	int Scanner::finish( )
	{
		if ( cs == Scanner_error )
		return -1;
		if ( cs >= Scanner_first_final )
		return 1;
		return 0;
	}
	
	void test( )
	{
		int len = strlen( buf );
		Scanner scanner;
		
		scanner.init();
		scanner.execute( buf, len );
		if ( scanner.cs == Scanner_error ) {
			/* Machine failed before finding a token. */
			cout << "PARSE ERROR" << endl;
		}
		scanner.finish();
	}
	
	char buf[4096];
	
	int main()
	{
		strcpy( buf, 
		"a b 0.98 /*\n"
		"9 */'\\''//hi\n"
		"there\n"
		);
		test();
		return 0;
	}
	
}@