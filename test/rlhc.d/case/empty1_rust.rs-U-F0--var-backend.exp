static _empty1_trans_keys: [u8 ; 6] = [ 1, 0, 1, 0, 0 , 0 ];
static _empty1_char_class: [i8 ; 2] = [ 0 , 0 ];
static _empty1_index_offsets: [i8 ; 4] = [ 0, 0, 0 , 0 ];
static _empty1_indices: [i8 ; 2] = [ 0 , 0 ];
static _empty1_index_defaults: [i8 ; 4] = [ 0, 0, 0 , 0 ];
static _empty1_trans_cond_spaces: [i8 ; 3] = [ -1, 0 , 0 ];
static _empty1_cond_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _empty1_cond_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _empty1_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _empty1_nfa_offsets: [i8 ; 4] = [ 0, 0, 0 , 0 ];
static _empty1_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _empty1_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static empty1_start : i32 = 1;
static empty1_first_final : i32 = 2;
static empty1_error : i32 = 0;
static empty1_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( empty1_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_trans = ( _empty1_index_defaults[(cs) as usize] ) as u32;
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _empty1_cond_targs[(_trans) as usize] ) as i32;
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= empty1_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "".to_string() ); }
	unsafe { m( "x".to_string() ); }
}

