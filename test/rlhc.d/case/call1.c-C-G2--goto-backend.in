host( "working/call1.rl", 1 ) @{/*
	* @@LANG: c
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	int num = 0;
	
	struct test
	{
		int cs, top, stack[32];
	};
	
	
	
}@
value int test_start = 1;
value int test_first_final = 23;
value int test_error = 0;

value int test_en_even = 13;
value int test_en_odd = 18;
value int test_en_fail = 22;
value int test_en_main = 1;

array s8 _test_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/call1.rl", 43 ) @{
	
	void test_init( struct test *fsm )
	{
		num = 0;
	}@
	{
		host( "-", 1 ) @{fsm->}@ -> cs = cast(int)test_start;
		host( "-", 1 ) @{fsm->}@ -> top = 0;
	}
	host( "working/call1.rl", 48 ) @{
	}
	
	void test_execute( struct test *fsm, const char *data, int len )
	{
		const char *p = data;
		const char *pe = data+len;
		
	}@
	{
		if ( p == pe )
		goto _test_eof;
		goto _resume;
		
		_again:
		switch ( host( "-", 1 ) @{fsm->}@ -> cs ) {
			case 1: goto st1;
			case 0: goto st0;
			case 2: goto st2;
			case 3: goto st3;
			case 23: goto st23;
			case 4: goto st4;
			case 5: goto st5;
			case 6: goto st6;
			case 7: goto st7;
			case 8: goto st8;
			case 9: goto st9;
			case 10: goto st10;
			case 11: goto st11;
			case 12: goto st12;
			case 13: goto st13;
			case 14: goto st14;
			case 15: goto st15;
			case 16: goto st16;
			case 17: goto st17;
			case 24: goto st24;
			case 18: goto st18;
			case 19: goto st19;
			case 20: goto st20;
			case 21: goto st21;
			case 25: goto st25;
			case 22: goto st22;
		}
		
		_resume:
		switch ( host( "-", 1 ) @{fsm->}@ -> cs )
		{
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 23:
			goto st_case_23;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			case 12:
			goto st_case_12;
			case 13:
			goto st_case_13;
			case 14:
			goto st_case_14;
			case 15:
			goto st_case_15;
			case 16:
			goto st_case_16;
			case 17:
			goto st_case_17;
			case 24:
			goto st_case_24;
			case 18:
			goto st_case_18;
			case 19:
			goto st_case_19;
			case 20:
			goto st_case_20;
			case 21:
			goto st_case_21;
			case 25:
			goto st_case_25;
			case 22:
			goto st_case_22;
		}
		goto st_out;
		st1:
		p+= 1;
		if ( p == pe )
		goto _test_eof1;
		st_case_1:
		if ( ( deref( data, p )) == 79 ) {
			goto st4;
		}
		if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
			goto ctr0;
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		host( "-", 1 ) @{fsm->}@ -> cs = 0;
		goto _out;
		ctr0:
		host( "working/call1.rl", 30 ) ${ num = num * 10 + (={( deref( data, p ))}= - '0'); }$
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		if ( ( deref( data, p )) == 32 ) {
			goto ctr3;
		}
		if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
			goto ctr0;
		}
		{
			goto st0;
		}
		ctr3:
		host( "working/call1.rl", 20 ) ${
			if ( num & 1 )
			${host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top] = 3; host( "-", 1 ) @{fsm->}@ -> top+= 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) ={18}=; goto _again;}$
			else
			${host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top] = 3; host( "-", 1 ) @{fsm->}@ -> top+= 1; goto st13;}$}$
		
		goto st3;
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		if ( ( deref( data, p )) == 10 ) {
			goto st23;
		}
		{
			goto st0;
		}
		st23:
		p+= 1;
		if ( p == pe )
		goto _test_eof23;
		st_case_23:
		{
			goto st0;
		}
		st4:
		p+= 1;
		if ( p == pe )
		goto _test_eof4;
		st_case_4:
		if ( ( deref( data, p )) == 65 ) {
			goto st5;
		}
		{
			goto st0;
		}
		st5:
		p+= 1;
		if ( p == pe )
		goto _test_eof5;
		st_case_5:
		if ( ( deref( data, p )) == 32 ) {
			goto st6;
		}
		{
			goto st0;
		}
		st6:
		p+= 1;
		if ( p == pe )
		goto _test_eof6;
		st_case_6:
		switch( ( deref( data, p )) ) {
			case 101: {
				goto st7;
			}
			case 111: {
				goto st12;
			}
		}
		{
			goto st0;
		}
		st7:
		p+= 1;
		if ( p == pe )
		goto _test_eof7;
		st_case_7:
		if ( ( deref( data, p )) == 114 ) {
			goto st8;
		}
		{
			goto st0;
		}
		st8:
		p+= 1;
		if ( p == pe )
		goto _test_eof8;
		st_case_8:
		if ( ( deref( data, p )) == 114 ) {
			goto st9;
		}
		{
			goto st0;
		}
		st9:
		p+= 1;
		if ( p == pe )
		goto _test_eof9;
		st_case_9:
		if ( ( deref( data, p )) == 111 ) {
			goto st10;
		}
		{
			goto st0;
		}
		st10:
		p+= 1;
		if ( p == pe )
		goto _test_eof10;
		st_case_10:
		if ( ( deref( data, p )) == 114 ) {
			goto st11;
		}
		{
			goto st0;
		}
		st11:
		p+= 1;
		if ( p == pe )
		goto _test_eof11;
		st_case_11:
		if ( 49 <= ( deref( data, p )) && ( deref( data, p )) <= 50 ) {
			goto st3;
		}
		{
			goto st0;
		}
		st12:
		p+= 1;
		if ( p == pe )
		goto _test_eof12;
		st_case_12:
		if ( ( deref( data, p )) == 107 ) {
			goto st3;
		}
		{
			goto st0;
		}
		st13:
		p+= 1;
		if ( p == pe )
		goto _test_eof13;
		st_case_13:
		if ( ( deref( data, p )) == 101 ) {
			goto st14;
		}
		{
			goto st0;
		}
		st14:
		p+= 1;
		if ( p == pe )
		goto _test_eof14;
		st_case_14:
		if ( ( deref( data, p )) == 118 ) {
			goto st15;
		}
		{
			goto st0;
		}
		st15:
		p+= 1;
		if ( p == pe )
		goto _test_eof15;
		st_case_15:
		if ( ( deref( data, p )) == 101 ) {
			goto st16;
		}
		{
			goto st0;
		}
		st16:
		p+= 1;
		if ( p == pe )
		goto _test_eof16;
		st_case_16:
		if ( ( deref( data, p )) == 110 ) {
			goto st17;
		}
		{
			goto st0;
		}
		st17:
		p+= 1;
		if ( p == pe )
		goto _test_eof17;
		st_case_17:
		{
			goto ctr18;
		}
		ctr18:
		host( "working/call1.rl", 28 ) ${${p = p - 1; }$ ${host( "-", 1 ) @{fsm->}@ -> top -= 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top];goto _again;}$}$
		
		goto st24;
		st24:
		p+= 1;
		if ( p == pe )
		goto _test_eof24;
		st_case_24:
		{
			goto st0;
		}
		st18:
		p+= 1;
		if ( p == pe )
		goto _test_eof18;
		st_case_18:
		if ( ( deref( data, p )) == 111 ) {
			goto st19;
		}
		{
			goto st0;
		}
		st19:
		p+= 1;
		if ( p == pe )
		goto _test_eof19;
		st_case_19:
		if ( ( deref( data, p )) == 100 ) {
			goto st20;
		}
		{
			goto st0;
		}
		st20:
		p+= 1;
		if ( p == pe )
		goto _test_eof20;
		st_case_20:
		if ( ( deref( data, p )) == 100 ) {
			goto st21;
		}
		{
			goto st0;
		}
		st21:
		p+= 1;
		if ( p == pe )
		goto _test_eof21;
		st_case_21:
		{
			goto ctr22;
		}
		ctr22:
		host( "working/call1.rl", 29 ) ${${p = p - 1; }$ ${host( "-", 1 ) @{fsm->}@ -> top -= 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top];goto _again;}$}$
		
		goto st25;
		st25:
		p+= 1;
		if ( p == pe )
		goto _test_eof25;
		st_case_25:
		{
			goto st0;
		}
		st22:
		p+= 1;
		if ( p == pe )
		goto _test_eof22;
		st_case_22:
		{
			goto st0;
		}
		st_out:
		_test_eof1: host( "-", 1 ) @{fsm->}@ -> cs = 1; goto _test_eof; 
		_test_eof2: host( "-", 1 ) @{fsm->}@ -> cs = 2; goto _test_eof; 
		_test_eof3: host( "-", 1 ) @{fsm->}@ -> cs = 3; goto _test_eof; 
		_test_eof23: host( "-", 1 ) @{fsm->}@ -> cs = 23; goto _test_eof; 
		_test_eof4: host( "-", 1 ) @{fsm->}@ -> cs = 4; goto _test_eof; 
		_test_eof5: host( "-", 1 ) @{fsm->}@ -> cs = 5; goto _test_eof; 
		_test_eof6: host( "-", 1 ) @{fsm->}@ -> cs = 6; goto _test_eof; 
		_test_eof7: host( "-", 1 ) @{fsm->}@ -> cs = 7; goto _test_eof; 
		_test_eof8: host( "-", 1 ) @{fsm->}@ -> cs = 8; goto _test_eof; 
		_test_eof9: host( "-", 1 ) @{fsm->}@ -> cs = 9; goto _test_eof; 
		_test_eof10: host( "-", 1 ) @{fsm->}@ -> cs = 10; goto _test_eof; 
		_test_eof11: host( "-", 1 ) @{fsm->}@ -> cs = 11; goto _test_eof; 
		_test_eof12: host( "-", 1 ) @{fsm->}@ -> cs = 12; goto _test_eof; 
		_test_eof13: host( "-", 1 ) @{fsm->}@ -> cs = 13; goto _test_eof; 
		_test_eof14: host( "-", 1 ) @{fsm->}@ -> cs = 14; goto _test_eof; 
		_test_eof15: host( "-", 1 ) @{fsm->}@ -> cs = 15; goto _test_eof; 
		_test_eof16: host( "-", 1 ) @{fsm->}@ -> cs = 16; goto _test_eof; 
		_test_eof17: host( "-", 1 ) @{fsm->}@ -> cs = 17; goto _test_eof; 
		_test_eof24: host( "-", 1 ) @{fsm->}@ -> cs = 24; goto _test_eof; 
		_test_eof18: host( "-", 1 ) @{fsm->}@ -> cs = 18; goto _test_eof; 
		_test_eof19: host( "-", 1 ) @{fsm->}@ -> cs = 19; goto _test_eof; 
		_test_eof20: host( "-", 1 ) @{fsm->}@ -> cs = 20; goto _test_eof; 
		_test_eof21: host( "-", 1 ) @{fsm->}@ -> cs = 21; goto _test_eof; 
		_test_eof25: host( "-", 1 ) @{fsm->}@ -> cs = 25; goto _test_eof; 
		_test_eof22: host( "-", 1 ) @{fsm->}@ -> cs = 22; goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
	host( "working/call1.rl", 56 ) @{
	}
	
	int test_finish( struct test *fsm )
	{
		if ( fsm->cs == test_error )
		return -1;
		if ( fsm->cs >= test_first_final )
		return 1;
		return 0;
	}
	
	#define BUFSIZE 1024
	
	void test( char *buf )
	{   
		struct test test;
		test_init( &test );
		test_execute( &test, buf, strlen(buf) );
		if ( test_finish( &test ) > 0 )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	int main()
	{
		test( "78 even\n" );
		test( "89 odd\n" );
		test( "1 even\n" );
		test( "0 odd\n" );
		test( "OA ok\n" );
		test( "OA error1\n" );
		test( "OA error2\n" );
		
		return 0;
	}
	
	
}@