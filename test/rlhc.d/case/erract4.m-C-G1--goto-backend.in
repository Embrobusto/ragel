host( "working/erract4.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	#include <stdio.h>
	#include <Foundation/Foundation.h>
	
	#define IDENT_BUFLEN 256
	
	@@interface ErrAct : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation ErrAct
	
	
	
}@
array s8 _ErrAct_eof_actions( 0, 1 ) = { 0, 0, 1, 1, 1, 1, 1, 0 };

array s8 _ErrAct_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ErrAct_start = 0;
value int ErrAct_first_final = 0;
value int ErrAct_error = -1;

value int ErrAct_en_main = 0;

host( "working/erract4.rl", 49 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)ErrAct_start;
	}
	host( "working/erract4.rl", 53 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const char *)_data len:(int)_len;
	{
		const char *p = _data;
		const char *pe = _data + _len;
		const char *eof = pe;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		_resume:
		switch ( cs ) {
			case 0:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 104: {
					goto ctr2;
				}
			}
			{
				goto ctr0;
			}
			case 1:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr4;
			}
			{
				goto ctr3;
			}
			case 2:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 101: {
					goto ctr5;
				}
			}
			{
				goto ctr0;
			}
			case 3:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 108: {
					goto ctr6;
				}
			}
			{
				goto ctr0;
			}
			case 4:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 108: {
					goto ctr7;
				}
			}
			{
				goto ctr0;
			}
			case 5:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 111: {
					goto ctr8;
				}
			}
			{
				goto ctr0;
			}
			case 6:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr9;
			}
			{
				goto ctr0;
			}
		}
		
		ctr9: cs = 0; goto f2;
		ctr3: cs = 1; goto _again;
		ctr0: cs = 1; goto f0;
		ctr1: cs = 1; goto f1;
		ctr4: cs = 1; goto f2;
		ctr2: cs = 2; goto _again;
		ctr5: cs = 3; goto _again;
		ctr6: cs = 4; goto _again;
		ctr7: cs = 5; goto _again;
		ctr8: cs = 6; goto _again;
		
		f0:
		host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
		goto _again;
		f2:
		host( "working/erract4.rl", 43 ) ${printf("newline\n");}$
		goto _again;
		f1:
		host( "working/erract4.rl", 43 ) ${printf("newline\n");}$	host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
		goto _again;
		
		_again:
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		if ( p == eof )
		{
			switch ( _ErrAct_eof_actions[cs] ) {
				case 1{
					host( "working/erract4.rl", 41 ) ${ printf("hello fails\n");}$
				}
			}
		}
		
	}
	host( "working/erract4.rl", 62 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == ErrAct_error )
		return -1;
		else if ( cs >= ErrAct_first_final )
		return 1;
		return 0;
	}
	
	@@end
	
	#include <stdio.h>
	#include <string.h>
	#define BUFSIZE 2048
	
	ErrAct *fsm;
	char buf[BUFSIZE];
	
	void test( char *buf )
	{
		int len = strlen(buf);
		fsm = [[ErrAct alloc] init];
		
		[fsm initFsm];
		[fsm executeWithData:buf len:len];
		if ( [fsm finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test(
		"hello\n"
		"hello\n"
		"hello\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"hello there\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"he"	);
		
		test( "" );
		
		return 0;
	}
	
}@