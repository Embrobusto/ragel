host( "working/cond2.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
	
	
}@
array s8 _foo_actions( 0, 2 ) = { 0, 1, 0, 1, 1, 2, 0, 1, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 2;

value int foo_en_main = 1;

host( "working/cond2.rl", 27 ) @{
	
	void test( int i, int j, const char *str )
	{
		int cs = foo_start;
		const char *p = str;
		const char *pe = str + strlen( str );
		
		cout << "run:" << endl;
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			if ( ( deref( data, p )) == 10 ) {
				int ck = 0;
				if ( host( "working/cond2.rl", 13 ) ={i}= ) ck += 1;
				if ( host( "working/cond2.rl", 14 ) ={j}= ) ck += 2;
				if ( ck < 2 ) {
					if ( 1 <= ck )
					{			goto ctr0;
					}
				} else if ( ck > 2 ) {
					goto ctr2;
				} else {
					goto ctr1;
				}
				goto ctr3;
				
			}
			if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 122 ) {
				goto ctr5;
			}
			{
				goto ctr4;
			}
			case 0:
			goto _out;
			case 2:
			{
				goto ctr4;
			}
			case 3:
			if ( ( deref( data, p )) == 10 ) {
				int ck = 0;
				if ( host( "working/cond2.rl", 13 ) ={i}= ) ck += 1;
				if ( host( "working/cond2.rl", 14 ) ={j}= ) ck += 2;
				if ( ck < 2 ) {
					if ( 1 <= ck )
					{			goto ctr0;
					}
				} else if ( ck > 2 ) {
					goto ctr2;
				} else {
					goto ctr1;
				}
				goto ctr3;
				
			}
			if ( 97 <= ( deref( data, p )) && ( deref( data, p )) <= 122 ) {
				goto ctr5;
			}
			{
				goto ctr4;
			}
		}
		
		ctr4: cs = 0; goto _again;
		ctr5: cs = 1; goto _again;
		ctr3: cs = 0; goto _again;
		ctr0: cs = 1; goto f0;
		ctr1: cs = 2; goto f1;
		ctr2: cs = 3; goto f2;
		
		f0: _acts = offset( _foo_actions, 1 ); goto execFuncs;
		f1: _acts = offset( _foo_actions, 3 ); goto execFuncs;
		f2: _acts = offset( _foo_actions, 5 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _foo_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _foo_actions, _acts ) ) {
				case 0{
					host( "working/cond2.rl", 16 ) ${ cout << "  one" << endl;}$
				}
				case 1{
					host( "working/cond2.rl", 17 ) ${ cout << "  two" << endl;}$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/cond2.rl", 36 ) @{
		if ( cs >= foo_first_final )
		cout << "  success" << endl;
		else
		cout << "  failure" << endl;
		cout << endl;
	}
	
	int main()
	{
		test( 0, 0, "hi\n\n" );
		test( 1, 0, "hi\n\n" );
		test( 0, 1, "hi\n" );
		test( 0, 1, "hi\n\n" );
		test( 1, 1, "hi\n" );
		test( 1, 1, "hi\n\n" );
		test( 1, 1, "hi\n\nx" );
		return 0;
	}
	
}@