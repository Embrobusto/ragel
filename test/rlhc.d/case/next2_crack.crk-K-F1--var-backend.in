host( "working/next2_crack.rl", 1 ) @{//
	// @@LANG: crack
	// @@GENERATED: true
	//
	
	import crack.io cout;
	import crack.lang Buffer;
	
	int target;
	int last;
	
	
	
	
	
}@
array byte _next2_trans_keys( 0, 15 ) = { c(1), c(0), c(15), c(15), c(13), c(13), c(8), c(8), c(13), c(13), c(11), c(11), c(6), c(6), c(5), c(5), c(9), c(9), c(8), c(8), c(6), c(6), c(12), c(12), c(14), c(14), c(9), c(9), c(12), c(12), c(7), c(7), c(10), c(10), c(6), c(6), c(6), c(6), c(0), c(4), c(1), c(0), c(1), c(0), c(1), c(0), c(1), c(0), c(0) };

array s8 _next2_char_class( 0, 15 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 6, 1, 1, 7, 1, 1, 1, 1, 1, 8, 9, 1, 1, 10, 11, 12, 13, 1, 14, 15, 0 };

array s8 _next2_index_offsets( 0, 23 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 23, 23, 23, 0 };

array s8 _next2_indices( 0, 21 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19, 20, 21, 0 };

array s8 _next2_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _next2_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _next2_cond_targs( 0, 23 ) = { 19, 0, 3, 4, 5, 6, 7, 20, 9, 10, 21, 12, 13, 22, 15, 16, 17, 18, 23, 19, 19, 1, 0 };

array s8 _next2_cond_actions( 0, 6 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 3, 4, 5, 6, 0 };

array s8 _next2_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _next2_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _next2_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _next2_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int next2_start = 19;
value int next2_first_final = 19;
value int next2_error = 0;

value int next2_en_unused = 2;
value int next2_en_one = 8;
value int next2_en_two = 11;
value int next2_en_three = 14;
value int next2_en_main = 19;

host( "working/next2_crack.rl", 54 ) @{
	
	void m( String s )
	{
		byteptr data = s.buffer;
		int p = 0;
		int pe = s.size;
		int cs;
		String buffer;
		
	}@
	{
		cs = cast(int)next2_start;
	}
	host( "working/next2_crack.rl", 64 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index byte _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _next2_trans_keys, (cs<<1) );
					_inds = offset( _next2_indices, _next2_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 120 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_next2_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _next2_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _next2_trans_keys, _keys ) )
						_trans = cast(uint)deref( _next2_indices, _inds + cast(int)( _ic - cast(int)deref( _next2_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_next2_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_next2_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_next2_cond_targs[_trans];
					
					switch ( _next2_cond_actions[_trans] ) {
						case 1 {
							host( "working/next2_crack.rl", 17 ) ${cout.format( "one\n" );
								target = 19;
								${cs = host( "-", 1 ) ={target}=;}$}$
						}
						case 2 {
							host( "working/next2_crack.rl", 21 ) ${cout.format( "two\n" );
								target = 19;
								${cs = host( "-", 1 ) ={target}=;}$}$
						}
						case 3 {
							host( "working/next2_crack.rl", 25 ) ${cout.format( "three\n" );
								target = 19;
								${cs = host( "-", 1 ) ={target}=;}$}$
						}
						case 4 {
							host( "working/next2_crack.rl", 30 ) ${target = 8;
								${cs = host( "-", 1 ) ={target}=;}$last = 1;
							}$
						}
						case 5 {
							host( "working/next2_crack.rl", 34 ) ${target = 11;
								${cs = host( "-", 1 ) ={target}=;}$last = 2;
							}$
						}
						case 6 {
							host( "working/next2_crack.rl", 39 ) ${if ( last == 2 )
								{
									target = 14;
									${cs = host( "-", 1 ) ={target}=;}$
								} 
								last = 3;
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/next2_crack.rl", 65 ) @{
		
		if ( cs >= next2_first_final ) {
			cout `ACCEPT\n`;
		}
		else {
			cout `FAIL\n`;
		}
	}
	
	void main()
	{
		m( "1one3x2two3three\n" );
	}
	
	main();
}@