#
# Tokens
#

# Any single character can be a literal
lex
	# Ignore whitespace.
	ignore /[ \t\n\r\v]+/

	# Open and close id
	token id /[a-zA-Z_][a-zA-Z0-9_]*/

	token open_paren /'('/ 
	{
		parse_stop NC: nested_comment[ stdin ]
		print( %NC.tree '\n' )
		input.push_ignore( NC.tree )
	}
end

#
# Token translation
#

lex
	literal '(', ')'
	token nc_data /[^()]+/
end

def nc_item 
	[nc_data]
|	[nested_comment]

def nested_comment 
	['(' nc_item* ')']

def nested [id*]

parse NP: nested[ stdin ]
P: nested = NP.tree

print( ^P '\n' )
print_xml( ^P )
print( '\n' )
print_xml_ac( ^P )
print( '\n' )
print( ^P '\n' )
