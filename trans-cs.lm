include 'trans.lm'

namespace cs
	lex 
		literal `%%{ `}%%

		literal `int `bool `const `char `ptr
				`printf `fwrite `var `byte `Console `Write `new

		literal `; `< `> `( `) `[ `] `=
				`* `! `{ `} `+ `- `== `!= `, `.

		ignore / ( [ \t] | NL )+ /

		token tk_ident /ident/
		token tk_number /digit+/
		token tk_hex_number /'0x' [0-9a-fA-F]+/

		token string
			/ s_literal | d_literal /
	end

	def factor
		[tk_ident]
	|	[tk_ident `[ expr `]]
	|	[tk_ident `( expr `)]
	|	[tk_number]
	|	[tk_hex_number]
	|	[string]
	|	[`( type `) `( expr `)]
	|	[`( expr `)]
	|	[`new expr]
	|	[`new `char `[ expr `]]
	|	[`new `int `[ expr `]]

	def op
		[`<] | [`>] | [`=] | [`!]
	|	[`+] | [`-] | [`*] | [`!=]
	|	[`==] | [`,]

	def expr_op
		[op factor]

	def expr
		[factor expr_op*]

	def opt_arr
		[`[ `]]
	|	[]

	def type
		[`int]
	|	[`bool]
	|	[`char]
	|	[`char `*]
	|	[`const `( `char `) `*]
	|	[`byte]

	def var_decl
		[type opt_arr tk_ident opt_init `;]
	
	def opt_init
		[`= expr]
	|	[]

	def print_stmt
		[`printf `( expr `) `;]
	|	[`fwrite `( expr `) `;]
	|	[`Console `. `Write `( expr `) `;]
end

namespace indep

cs::factor cs_factor( Factor: factor )
{
	return cast<cs::factor> Factor
}

cs::tk_ident cs_ident( Ident: tk_ident )
{
	return cast<cs::tk_ident> Ident
}

cs::opt_arr cs_opt_arr( OptArr: opt_arr )
{
	return cast<cs::opt_arr> OptArr
}

cs::expr cs_expr( Expr: expr )
{
	return cast<cs::expr> Expr
}

int cs_rewrite( Indep: ref<any> )
{
	for Factor: factor in Indep {
		if match Factor "true" {
			Factor = cons factor "1"
		}
		elsif match Factor "false" {
			Factor = cons factor "0"
		}
		elsif match Factor 
				['<' type '>' '(' Expr: expr ')']
		{
			Factor = cast<factor> cons cs::factor 
				"( [cs_expr(Expr)] )
		}
		elsif match Factor ['first_token_char'] {
			Factor = cast<factor> cons cs::factor
				"data\[ts\]"
		}
	}

	for Decl: var_decl in Indep {
		if match Decl
			"bool [Ident: tk_ident OptArr: opt_arr];
		{
			Decl = cast<var_decl> cons cs::var_decl
				"int [cs_opt_arr(OptArr)] [cs_ident(Ident)];
		}
		elsif match Decl
			"ptr [Ident: tk_ident];
		{
			Decl = cast<var_decl> cons cs::var_decl
				"int [cs_ident(Ident)];
		}
		elsif match Decl
			"char [Ident: tk_ident `[ Expr: expr `]];
		{
			Decl = cast<var_decl> cons cs::var_decl
				"char \[\] [cs_ident(Ident)] = new char \[[cs_expr(Expr)]\];
		}
		elsif match Decl
			"int [Ident: tk_ident `[ Expr: expr `]];
		{
			Decl = cast<var_decl> cons cs::var_decl
				"int \[\] [cs_ident(Ident)] = new int \[[cs_expr(Expr)]\];
		}
	}

	for Stmt: print_stmt in Indep {
		if match Stmt ['print_int' F: factor ';' ] {
			Stmt = cast<print_stmt> cons cs::print_stmt
				"Console.Write( [cs_factor(F)] );"
		}
		elsif match Stmt ['print_buf' F: factor ',' L: tk_ident ';' ] {
			Stmt = cast<print_stmt> cons cs::print_stmt
				"Console.Write( new String( [cs_factor(F)], 0, [cs_ident(L)] ) );"
		}
		elsif match Stmt ['print_str' F: factor ';' ] {
			Stmt = cast<print_stmt> cons cs::print_stmt
				"Console.Write( [cs_factor(F)] );"
		}
		elsif match Stmt ['print_token' ';' ] {
			Stmt = cast<print_stmt> cons cs::print_stmt
				"Console.Write( new String( data , ts , te - ts ) );

		}
	}
}

end


OutputFile: str = argv.pop()
InputFile: str = argv.pop()
Lang: str = argv.pop()

Input: stream = open( InputFile "r" )
Output: stream = open( OutputFile "w" )

RagelTree: indep::start = parse indep::start[ Input ]

if ( !RagelTree ) {
	print( error '\n' )
	exit(1)
}

# Find the machine name.
MachineName: ragel::machine_name = ragel::machine_name in RagelTree

# Do we need EOF?
NeedsEof: bool = false
for CommVal: indep::comm_val in RagelTree {
	if $CommVal ==
		'@NEEDS_EOF: yes\n'
	{
		NeedsEof = true
	}
}

send Output
	"/*
	" * @LANG: [Lang]
	" * @GENERATED: yes
	" */
	"
	"using System;
	"// Disables lots of warnings that appear in the test suite
	"#pragma warning disable 0168, 0169, 0219, 0162, 0414
	"namespace Test {
	"class Test
	"{

Init: indep::stmt* = RagelTree.Init
for Stmt: indep::stmt in Init {
	if match Stmt [Decl: var_decl] {
		cs_rewrite( Decl )
		send Output [Decl]
	}
}

Section: indep::section = RagelTree.section
for Action: ragel::action_block in Section {
	# Reparse as lang-independent code.
	parse IndepActionBlock: indep::action_block[$Action]
	if ( !IndepActionBlock ) {
		print( error '\n' Action )
		exit(1)
	}

	# Translate to specific language.
	cs_rewrite( IndepActionBlock )

	# Reparse back to ragel action block.
	Action = parse ragel::action_block[$IndepActionBlock]
	if ( !Action ) {
		print( error '\n' )
		exit(1)
	}
}

send Output
	["\n" Section "\n"]

send Output
	"%% write data;
	"int cs;
	"
	"void init()
	"{

for Stmt: indep::stmt in Init {
	if match Stmt [ExprStmt: expr_stmt] {
		cs_rewrite( ExprStmt )
		send Output [ExprStmt]
	}
}

send Output
	"	%% write init;
	"}
	"
	"void exec( char\[\] data, int len )
	"{
	"	int p = 0;
	"	int pe = len;
	"	int eof = len;
	"	string _s;
	"	%% write exec;
	"}
	"
	"void finish( )
	"{
	"	if ( cs >= [$MachineName.word]_first_final )
	"		Console.WriteLine( \"ACCEPT\" );
	"	else
	"		Console.WriteLine( \"FAIL\" );
	"}
	"

send Output
	"static readonly string\[\] inp = {

NR: int = 0
for InputString: indep::input_string in RagelTree {
	send Output 
		[^InputString ",\n"]
	NR = NR + 1
}

send Output
	"};
	"

send Output
	"
	"static readonly int inplen = [NR];
	"
	"public static void Main (string\[\] args)
	"{
	"	Test machine = new Test();
	"	for ( int i = 0; i < inplen; i++ ) {
	"		machine.init();
	"		machine.exec( inp\[i\].ToCharArray(), inp\[i\].Length );
	"		machine.finish();
	"	}
	"}
	"}
	"}

send Output "/* _____OUTPUT_____
for OutputLine: indep::output_line in RagelTree {
	send Output [OutputLine]
}
send Output "*/
